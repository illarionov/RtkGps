/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <iostream>
using namespace std;

#define CPL_SUPRESS_CPLUSPLUS
#include "cpl_port.h"
#include "cpl_string.h"
#include "cpl_multiproc.h"
#include "cpl_http.h"
#include "cpl_vsi_error.h"

#include "gdal.h"
#include "gdal_alg.h"
#include "gdalwarper.h"

typedef void GDALMajorObjectShadow;
typedef void GDALDriverShadow;
typedef void GDALDatasetShadow;
typedef void GDALRasterBandShadow;
typedef void GDALColorTableShadow;
typedef void GDALRasterAttributeTableShadow;
typedef void GDALTransformerInfoShadow;
typedef void GDALAsyncReaderShadow;


#ifdef DEBUG
typedef struct OGRSpatialReferenceHS OSRSpatialReferenceShadow;
typedef struct OGRLayerHS OGRLayerShadow;
typedef struct OGRFeatureHS OGRFeatureShadow;
typedef struct OGRGeometryHS OGRGeometryShadow;
#else
typedef void OSRSpatialReferenceShadow;
typedef void OGRLayerShadow;
typedef void OGRFeatureShadow;
typedef void OGRGeometryShadow;
#endif
typedef struct OGRStyleTableHS OGRStyleTableShadow;


/* use this to not return the int returned by GDAL */
typedef int RETURN_NONE;
/* return value that is used for VSI methods that return -1 on error (and set errno) */
typedef int VSI_RETVAL;


static int bUseExceptions=1;

static void CPL_STDCALL
VeryQuietErrorHandler(CPLErr eclass, int code, const char *msg )
{
  /* If the error class is CE_Fatal, we want to have a message issued
     because the CPL support code does an abort() before any exception
     can be generated */
  if (eclass == CE_Fatal ) {
    CPLDefaultErrorHandler(eclass, code, msg );
  }
}


static void UseExceptions() {
  bUseExceptions = 1;
  CPLSetErrorHandler( (CPLErrorHandler) VeryQuietErrorHandler );
}

static void DontUseExceptions() {
  bUseExceptions = 0;
  CPLSetErrorHandler( CPLDefaultErrorHandler );
}


    static CPLErr BandBlockReadWrite_Validate(GDALRasterBandH self, void *nioBuffer, long nioBufferSize)
    {
        int nBlockXSize, nBlockYSize;
        GDALDataType eDataType;
        GDALGetBlockSize(self, &nBlockXSize, &nBlockYSize);
        eDataType = GDALGetRasterDataType(self);
        int nDataTypeSize = GDALGetDataTypeSize( eDataType ) / 8;
        if (nBlockXSize > (INT_MAX / nDataTypeSize) / nBlockYSize)
        {
            CPLError(CE_Failure, CPLE_AppDefined, "Integer overflow");
            return CE_Failure;
        }
        if (nioBufferSize < nBlockXSize * nBlockYSize * nDataTypeSize)
        {
            CPLError(CE_Failure, CPLE_AppDefined, "Buffer not big enough");
            return CE_Failure;
        }
        return CE_None;
    }



static
GIntBig ComputeDatasetRasterIOSize (int buf_xsize, int buf_ysize, int nPixelSize,
                                int nBands, int* bandMap, int nBandMapArrayLength,
                                GIntBig nPixelSpace, GIntBig nLineSpace, GIntBig nBandSpace,
                                int bSpacingShouldBeMultipleOfPixelSize );

static CPLErr DatasetRasterIO( GDALDatasetH hDS, GDALRWFlag eRWFlag,
                            int xoff, int yoff, int xsize, int ysize,
                            int buf_xsize, int buf_ysize,
                            GDALDataType buf_type,
                            void *regularArray, long nRegularArraySize,
                            int band_list, int *pband_list,
                            int nPixelSpace, int nLineSpace, int nBandSpace,
                            GDALDataType gdal_type, size_t sizeof_ctype)
{
    if ((gdal_type == GDT_Int16 && buf_type != GDT_Int16 && buf_type != GDT_UInt16 && buf_type != GDT_CInt16) ||
        (gdal_type == GDT_Int32 && buf_type != GDT_Int32 && buf_type != GDT_UInt32 && buf_type != GDT_CInt32) ||
        (gdal_type == GDT_Float32 && buf_type != GDT_Float32 && buf_type != GDT_CFloat32) ||
        (gdal_type == GDT_Float64 && buf_type != GDT_Float64 && buf_type != GDT_CFloat64))
  {
      CPLError(CE_Failure, CPLE_AppDefined,
              "Java array type is not compatible with GDAL data type");
      return CE_Failure;
  }

  if (band_list == 0)
  {
      if (pband_list != NULL)
          return CE_Failure;

      band_list = GDALGetRasterCount(hDS);
  }

  GIntBig nMinBufferSizeInBytes = ComputeDatasetRasterIOSize (
                         buf_xsize, buf_ysize, GDALGetDataTypeSize(buf_type) / 8,
                         band_list, pband_list, band_list,
                         nPixelSpace, nLineSpace, nBandSpace, sizeof_ctype > 1 );
  if (nMinBufferSizeInBytes > 0x7fffffff)
  {
     CPLError(CE_Failure, CPLE_IllegalArg, "Integer overflow");
     nMinBufferSizeInBytes = 0;
  }
  if (nMinBufferSizeInBytes == 0)
      return CE_Failure;
  if (nRegularArraySize < nMinBufferSizeInBytes)
  {
      CPLError(CE_Failure, CPLE_AppDefined,
              "Buffer is too small");
      return CE_Failure;
  }
  return  GDALDatasetRasterIO( hDS, eRWFlag, xoff, yoff, xsize, ysize,
                                regularArray, buf_xsize, buf_ysize,
                                buf_type, band_list, pband_list, nPixelSpace, nLineSpace, nBandSpace );

}




static
GIntBig ComputeBandRasterIOSize (int buf_xsize, int buf_ysize, int nPixelSize,
                                 GIntBig nPixelSpace, GIntBig nLineSpace,
                                 int bSpacingShouldBeMultipleOfPixelSize );

static CPLErr BandRasterIO( GDALRasterBandH hBand, GDALRWFlag eRWFlag,
                            int xoff, int yoff, int xsize, int ysize,
                            int buf_xsize, int buf_ysize,
                            GDALDataType buf_type,
                            void *regularArrayOut, long nRegularArraySizeOut,
                            int nPixelSpace, int nLineSpace,
                            GDALDataType gdal_type, size_t sizeof_ctype)
{
    if ((gdal_type == GDT_Int16 && buf_type != GDT_Int16 && buf_type != GDT_UInt16 && buf_type != GDT_CInt16) ||
        (gdal_type == GDT_Int32 && buf_type != GDT_Int32 && buf_type != GDT_UInt32 && buf_type != GDT_CInt32) ||
        (gdal_type == GDT_Float32 && buf_type != GDT_Float32 && buf_type != GDT_CFloat32) ||
        (gdal_type == GDT_Float64 && buf_type != GDT_Float64 && buf_type != GDT_CFloat64))
    {
        CPLError(CE_Failure, CPLE_AppDefined,
                "Java array type is not compatible with GDAL data type");
        return CE_Failure;
    }

    GIntBig nMinBufferSizeInBytes = ComputeBandRasterIOSize (
                            buf_xsize, buf_ysize, GDALGetDataTypeSize(buf_type) / 8,
                            nPixelSpace, nLineSpace, sizeof_ctype > 1 );
    if (nMinBufferSizeInBytes > 0x7fffffff)
    {
       CPLError(CE_Failure, CPLE_IllegalArg, "Integer overflow");
       nMinBufferSizeInBytes = 0;
    }
    if (nMinBufferSizeInBytes == 0)
        return CE_Failure;
    if (nRegularArraySizeOut < nMinBufferSizeInBytes)
    {
        CPLError(CE_Failure, CPLE_AppDefined,
                "Buffer is too small");
        return CE_Failure;
    }

    return GDALRasterIO( hBand, eRWFlag, xoff, yoff, xsize, ysize,
                                   regularArrayOut, buf_xsize, buf_ysize,
                                   buf_type, nPixelSpace, nLineSpace );
}



typedef struct {
    JNIEnv *jenv;
    jobject pJavaCallback;
} JavaProgressData;


class ProgressCallback
{
public:
        virtual ~ProgressCallback() {  }
        virtual int run(double dfComplete, const char* pszMessage)
        {
            return 1;
        }
};

class TermProgressCallback : public ProgressCallback
{
public:
    TermProgressCallback()
    {
    }

    virtual int run(double dfComplete, const char* pszMessage)
    {
        return GDALTermProgress(dfComplete, pszMessage, NULL);
    }
};


/************************************************************************/
/*                        JavaProgressProxy()                           */
/************************************************************************/

static int CPL_STDCALL
JavaProgressProxy( double dfComplete, const char *pszMessage, void *pData )
{
    JavaProgressData* psProgressInfo = (JavaProgressData*)pData;
    JNIEnv *jenv = psProgressInfo->jenv;
    int ret;
    const jclass progressCallbackClass = jenv->FindClass("org/gdal/gdal/ProgressCallback");
    const jmethodID runMethod = jenv->GetMethodID(progressCallbackClass, "run", "(DLjava/lang/String;)I");
    jstring temp_string = jenv->NewStringUTF(pszMessage);
    ret = jenv->CallIntMethod(psProgressInfo->pJavaCallback, runMethod, dfComplete, temp_string);
    jenv->DeleteLocalRef(temp_string);
    return ret;
}


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


typedef char retStringAndCPLFree;


  void Debug( const char *msg_class, const char *message ) {
    CPLDebug( msg_class, "%s", message );
  }

  CPLErr SetErrorHandler( char const * pszCallbackName = NULL )
  {
    CPLErrorHandler pfnHandler = NULL;
    if( pszCallbackName == NULL || EQUAL(pszCallbackName,"CPLQuietErrorHandler") )
      pfnHandler = CPLQuietErrorHandler;
    else if( EQUAL(pszCallbackName,"CPLDefaultErrorHandler") )
      pfnHandler = CPLDefaultErrorHandler;
    else if( EQUAL(pszCallbackName,"CPLLoggingErrorHandler") )
      pfnHandler = CPLLoggingErrorHandler;

    if ( pfnHandler == NULL )
      return CE_Fatal;

    CPLSetErrorHandler( pfnHandler );

    return CE_None;
  }


  CPLErr PushErrorHandler( char const * pszCallbackName = NULL ) {
    CPLErrorHandler pfnHandler = NULL;
    if( pszCallbackName == NULL || EQUAL(pszCallbackName,"CPLQuietErrorHandler") )
      pfnHandler = CPLQuietErrorHandler;
    else if( EQUAL(pszCallbackName,"CPLDefaultErrorHandler") )
      pfnHandler = CPLDefaultErrorHandler;
    else if( EQUAL(pszCallbackName,"CPLLoggingErrorHandler") )
      pfnHandler = CPLLoggingErrorHandler;

    if ( pfnHandler == NULL )
      return CE_Fatal;

    CPLPushErrorHandler( pfnHandler );

    return CE_None;
  }


  void Error( CPLErr msg_class, int err_code, const char* msg ) {
    CPLError( msg_class, err_code, "%s", msg );
  }


retStringAndCPLFree* EscapeString(int len, unsigned char *bin_string , int scheme) {
    return CPLEscapeString((const char*)bin_string, len, scheme);
}

retStringAndCPLFree* EscapeString(const char* str, int scheme) {
    return CPLEscapeString(str, (str) ? strlen(str) : 0, scheme);
}


char **wrapper_VSIReadDirEx( const char * utf8_path, int nMaxFiles = 0 )
{
    return VSIReadDirEx(utf8_path, nMaxFiles);
}


const char *wrapper_CPLGetConfigOption( const char * pszKey, const char * pszDefault = NULL )
{
    return CPLGetConfigOption( pszKey, pszDefault );
}


void wrapper_VSIFileFromMemBuffer( const char* utf8_path, int nBytes, const GByte *pabyData)
{
    GByte* pabyDataDup = (GByte*)VSIMalloc(nBytes);
    if (pabyDataDup == NULL)
            return;
    memcpy(pabyDataDup, pabyData, nBytes);
    VSIFCloseL(VSIFileFromMemBuffer(utf8_path, (GByte*) pabyDataDup, nBytes, TRUE));
}



int wrapper_HasThreadSupport()
{
    return strcmp(CPLGetThreadingModel(), "stub") != 0;
}


retStringAndCPLFree* wrapper_VSIGetSignedURL(const char * utf8_path, char** options = NULL )
{
    return VSIGetSignedURL( utf8_path, options );
}

SWIGINTERN CPLXMLNode *new_CPLXMLNode__SWIG_0(char const *pszString){
        return CPLParseXMLString( pszString );
    }
SWIGINTERN CPLXMLNode *new_CPLXMLNode__SWIG_1(CPLXMLNodeType eType,char const *pszText){
        return CPLCreateXMLNode(NULL, eType, pszText);
    }
SWIGINTERN void delete_CPLXMLNode(CPLXMLNode *self){
        CPLDestroyXMLNode( self );
    }
SWIGINTERN CPLXMLNode *CPLXMLNode_ParseXMLFile(char const *pszFilename){
        return CPLParseXMLFile(pszFilename);
    }
SWIGINTERN retStringAndCPLFree *CPLXMLNode_SerializeXMLTree(CPLXMLNode *self){
        return CPLSerializeXMLTree( self );
    }
SWIGINTERN retStringAndCPLFree *CPLXMLNode_toString(CPLXMLNode *self){
        return CPLSerializeXMLTree( self );
    }
SWIGINTERN CPLXMLNode *CPLXMLNode_SearchXMLNode(CPLXMLNode *self,char const *pszElement){
        return CPLSearchXMLNode(self, pszElement);
    }
SWIGINTERN CPLXMLNode *CPLXMLNode_GetXMLNode(CPLXMLNode *self,char const *pszPath){
        return CPLGetXMLNode( self, pszPath );
    }
SWIGINTERN char const *CPLXMLNode_GetXMLValue(CPLXMLNode *self,char const *pszPath,char const *pszDefault){
        return CPLGetXMLValue( self, pszPath, pszDefault );
    }
SWIGINTERN void CPLXMLNode_AddXMLChild(CPLXMLNode *self,CPLXMLNode *psChild){
        CPLAddXMLChild( self, CPLCloneXMLTree(psChild) );
    }
SWIGINTERN void CPLXMLNode_AddXMLSibling(CPLXMLNode *self,CPLXMLNode *psNewSibling){
        CPLAddXMLSibling( self, CPLCloneXMLTree(psNewSibling) );
    }
SWIGINTERN CPLXMLNode *CPLXMLNode_Clone(CPLXMLNode *self){
        return CPLCloneXMLTree( self );
    }
SWIGINTERN int CPLXMLNode_SetXMLValue(CPLXMLNode *self,char const *pszPath,char const *pszValue){
        return CPLSetXMLValue( self,  pszPath, pszValue );
    }
SWIGINTERN void CPLXMLNode_StripXMLNamespace(CPLXMLNode *self,char const *pszNamespace,int bRecurse){
        CPLStripXMLNamespace( self, pszNamespace, bRecurse );
    }
SWIGINTERN char const *GDALMajorObjectShadow_GetDescription(GDALMajorObjectShadow *self){
    return GDALGetDescription( self );
  }
SWIGINTERN void GDALMajorObjectShadow_SetDescription(GDALMajorObjectShadow *self,char const *pszNewDesc){
    GDALSetDescription( self, pszNewDesc );
  }
SWIGINTERN char **GDALMajorObjectShadow_GetMetadataDomainList(GDALMajorObjectShadow *self){
    return GDALGetMetadataDomainList( self );
  }
SWIGINTERN char **GDALMajorObjectShadow_GetMetadata_Dict__SWIG_0(GDALMajorObjectShadow *self,char const *pszDomain=""){
    return GDALGetMetadata( self, pszDomain );
  }
SWIGINTERN char **GDALMajorObjectShadow_GetMetadata_List__SWIG_0(GDALMajorObjectShadow *self,char const *pszDomain=""){
    return GDALGetMetadata( self, pszDomain );
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadata__SWIG_0(GDALMajorObjectShadow *self,char **papszMetadata,char const *pszDomain=""){
    return GDALSetMetadata( self, papszMetadata, pszDomain );
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadata__SWIG_2(GDALMajorObjectShadow *self,char *pszMetadataString,char const *pszDomain=""){
    char *tmpList[2];
    tmpList[0] = pszMetadataString;
    tmpList[1] = 0;
    return GDALSetMetadata( self, tmpList, pszDomain );
  }
SWIGINTERN char const *GDALMajorObjectShadow_GetMetadataItem__SWIG_0(GDALMajorObjectShadow *self,char const *pszName,char const *pszDomain=""){
    return GDALGetMetadataItem( self, pszName, pszDomain);
  }
SWIGINTERN CPLErr GDALMajorObjectShadow_SetMetadataItem__SWIG_0(GDALMajorObjectShadow *self,char const *pszName,char const *pszValue,char const *pszDomain=""){
    return GDALSetMetadataItem( self, pszName, pszValue, pszDomain);
  }
SWIGINTERN GDALDatasetShadow *GDALDriverShadow_Create__SWIG_0(GDALDriverShadow *self,char const *utf8_path,int xsize,int ysize,int bands=1,GDALDataType eType=GDT_Byte,char **options=0){

    GDALDatasetShadow* ds = (GDALDatasetShadow*) GDALCreate(    self,
                                                                utf8_path,
                                                                xsize,
                                                                ysize,
                                                                bands,
                                                                eType,
                                                                options );
    return ds;
  }
SWIGINTERN GDALDatasetShadow *GDALDriverShadow_CreateCopy__SWIG_0(GDALDriverShadow *self,char const *utf8_path,GDALDatasetShadow *src,int strict=1,char **options=0,GDALProgressFunc callback=NULL,void *callback_data=NULL){

    GDALDatasetShadow *ds = (GDALDatasetShadow*) GDALCreateCopy(    self,
                                                                    utf8_path,
                                                                    src,
                                                                    strict,
                                                                    options,
                                                                    callback,
                                                                    callback_data );
    return ds;
  }
SWIGINTERN CPLErr GDALDriverShadow_Delete(GDALDriverShadow *self,char const *utf8_path){
    return GDALDeleteDataset( self, utf8_path );
  }
SWIGINTERN CPLErr GDALDriverShadow_Rename(GDALDriverShadow *self,char const *newName,char const *oldName){
    return GDALRenameDataset( self, newName, oldName );
  }
SWIGINTERN CPLErr GDALDriverShadow_CopyFiles(GDALDriverShadow *self,char const *newName,char const *oldName){
    return GDALCopyDatasetFiles( self, newName, oldName );
  }
SWIGINTERN int GDALDriverShadow_Register(GDALDriverShadow *self){
    return GDALRegisterDriver( self );
  }
SWIGINTERN void GDALDriverShadow_Deregister(GDALDriverShadow *self){
    GDALDeregisterDriver( self );
  }

char const *GDALDriverShadow_ShortName_get( GDALDriverShadow *h ) {
  return GDALGetDriverShortName( h );
}
char const *GDALDriverShadow_LongName_get( GDALDriverShadow *h ) {
  return GDALGetDriverLongName( h );
}
char const *GDALDriverShadow_HelpTopic_get( GDALDriverShadow *h ) {
  return GDALGetDriverHelpTopic( h );
}

SWIGINTERN GDAL_GCP *new_GDAL_GCP(double x,double y,double z,double pixel,double line,char const *info,char const *id){





    GDAL_GCP *self = (GDAL_GCP*) CPLMalloc( sizeof( GDAL_GCP ) );
    self->dfGCPX = x;
    self->dfGCPY = y;
    self->dfGCPZ = z;
    self->dfGCPPixel = pixel;
    self->dfGCPLine = line;
    self->pszInfo =  CPLStrdup( (info == 0) ? "" : info );
    self->pszId = CPLStrdup( (id==0)? "" : id );
    return self;
  }
SWIGINTERN void delete_GDAL_GCP(GDAL_GCP *self){
    if ( self->pszInfo )
      CPLFree( self->pszInfo );
    if ( self->pszId )
      CPLFree( self->pszId );
    CPLFree( self );
  }


double GDAL_GCP_GCPX_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPX;
}
void GDAL_GCP_GCPX_set( GDAL_GCP *gcp, double dfGCPX ) {
  gcp->dfGCPX = dfGCPX;
}
double GDAL_GCP_GCPY_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPY;
}
void GDAL_GCP_GCPY_set( GDAL_GCP *gcp, double dfGCPY ) {
  gcp->dfGCPY = dfGCPY;
}
double GDAL_GCP_GCPZ_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPZ;
}
void GDAL_GCP_GCPZ_set( GDAL_GCP *gcp, double dfGCPZ ) {
  gcp->dfGCPZ = dfGCPZ;
}
double GDAL_GCP_GCPPixel_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPPixel;
}
void GDAL_GCP_GCPPixel_set( GDAL_GCP *gcp, double dfGCPPixel ) {
  gcp->dfGCPPixel = dfGCPPixel;
}
double GDAL_GCP_GCPLine_get( GDAL_GCP *gcp ) {
  return gcp->dfGCPLine;
}
void GDAL_GCP_GCPLine_set( GDAL_GCP *gcp, double dfGCPLine ) {
  gcp->dfGCPLine = dfGCPLine;
}
const char * GDAL_GCP_Info_get( GDAL_GCP *gcp ) {
  return gcp->pszInfo;
}
void GDAL_GCP_Info_set( GDAL_GCP *gcp, const char * pszInfo ) {
  if ( gcp->pszInfo )
    CPLFree( gcp->pszInfo );
  gcp->pszInfo = CPLStrdup(pszInfo);
}
const char * GDAL_GCP_Id_get( GDAL_GCP *gcp ) {
  return gcp->pszId;
}
void GDAL_GCP_Id_set( GDAL_GCP *gcp, const char * pszId ) {
  if ( gcp->pszId )
    CPLFree( gcp->pszId );
  gcp->pszId = CPLStrdup(pszId);
}


int wrapper_GDALGCPsToGeoTransform( int nGCPs, GDAL_GCP const * pGCPs,
    	                             double argout[6], int bApproxOK = 1 )
{
    return GDALGCPsToGeoTransform(nGCPs, pGCPs, argout, bApproxOK);
}


/* Returned size is in bytes or 0 if an error occurred. */
static
GIntBig ComputeDatasetRasterIOSize (int buf_xsize, int buf_ysize, int nPixelSize,
                                int nBands, int* bandMap, int nBandMapArrayLength,
                                GIntBig nPixelSpace, GIntBig nLineSpace, GIntBig nBandSpace,
                                int bSpacingShouldBeMultipleOfPixelSize )
{
    if (buf_xsize <= 0 || buf_ysize <= 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal values for buffer size");
        return 0;
    }

    if (nPixelSpace < 0 || nLineSpace < 0 || nBandSpace < 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal values for space arguments");
        return 0;
    }

    if (nPixelSize == 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal value for data type");
        return 0;
    }

    if( nPixelSpace == 0 )
        nPixelSpace = nPixelSize;
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nPixelSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nPixelSpace should be a multiple of nPixelSize");
        return 0;
    }

    if( nLineSpace == 0 )
    {
        nLineSpace = nPixelSpace * buf_xsize;
    }
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nLineSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nLineSpace should be a multiple of nPixelSize");
        return 0;
    }

    if( nBandSpace == 0 )
    {
        nBandSpace = nLineSpace * buf_ysize;
    }
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nBandSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nLineSpace should be a multiple of nPixelSize");
        return 0;
    }

    if (nBands <= 0 || (bandMap != NULL && nBands > nBandMapArrayLength))
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Invalid band count");
        return 0;
    }

    GIntBig nRet = (GIntBig)(buf_ysize - 1) * nLineSpace + (GIntBig)(buf_xsize - 1) * nPixelSpace + (GIntBig)(nBands - 1) * nBandSpace + nPixelSize;
#if SIZEOF_VOIDP == 4
    if (nRet > INT_MAX)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Integer overflow");
        return 0;
    }
#endif

    return nRet;
}

SWIGINTERN void delete_GDALDatasetShadow(GDALDatasetShadow *self){
    if ( GDALDereferenceDataset( self ) <= 0 ) {
      GDALClose(self);
    }
  }
SWIGINTERN GDALDriverShadow *GDALDatasetShadow_GetDriver(GDALDatasetShadow *self){
    return (GDALDriverShadow*) GDALGetDatasetDriver( self );
  }
SWIGINTERN GDALRasterBandShadow *GDALDatasetShadow_GetRasterBand(GDALDatasetShadow *self,int nBand){
    return (GDALRasterBandShadow*) GDALGetRasterBand( self, nBand );
  }
SWIGINTERN char const *GDALDatasetShadow_GetProjection(GDALDatasetShadow *self){
    return GDALGetProjectionRef( self );
  }
SWIGINTERN char const *GDALDatasetShadow_GetProjectionRef(GDALDatasetShadow *self){
    return GDALGetProjectionRef( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetProjection(GDALDatasetShadow *self,char const *prj){
    return GDALSetProjection( self, prj );
  }
SWIGINTERN void GDALDatasetShadow_GetGeoTransform(GDALDatasetShadow *self,double argout[6]){
    if ( GDALGetGeoTransform( self, argout ) != CE_None ) {
      argout[0] = 0.0;
      argout[1] = 1.0;
      argout[2] = 0.0;
      argout[3] = 0.0;
      argout[4] = 0.0;
      argout[5] = 1.0;
    }
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetGeoTransform(GDALDatasetShadow *self,double argin[6]){
    return GDALSetGeoTransform( self, argin );
  }
SWIGINTERN int GDALDatasetShadow_BuildOverviews__SWIG_0(GDALDatasetShadow *self,char const *resampling,int overviewlist,int *pOverviews,GDALProgressFunc callback=NULL,void *callback_data=NULL){






    return GDALBuildOverviews(  self,
                                resampling ? resampling : "NEAREST",
                                overviewlist,
                                pOverviews,
                                0,
                                0,
                                callback,
                                callback_data);
  }
SWIGINTERN int GDALDatasetShadow_GetGCPCount(GDALDatasetShadow *self){
    return GDALGetGCPCount( self );
  }
SWIGINTERN char const *GDALDatasetShadow_GetGCPProjection(GDALDatasetShadow *self){
    return GDALGetGCPProjection( self );
  }
SWIGINTERN void GDALDatasetShadow_GetGCPs(GDALDatasetShadow *self,int *nGCPs,GDAL_GCP const **pGCPs){
    *nGCPs = GDALGetGCPCount( self );
    *pGCPs = GDALGetGCPs( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_SetGCPs(GDALDatasetShadow *self,int nGCPs,GDAL_GCP const *pGCPs,char const *pszGCPProjection){
    return GDALSetGCPs( self, nGCPs, pGCPs, pszGCPProjection );
  }
SWIGINTERN void GDALDatasetShadow_FlushCache(GDALDatasetShadow *self){
    GDALFlushCache( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_AddBand__SWIG_0(GDALDatasetShadow *self,GDALDataType datatype=GDT_Byte,char **options=0){
    return GDALAddBand( self, datatype, options );
  }
SWIGINTERN CPLErr GDALDatasetShadow_CreateMaskBand(GDALDatasetShadow *self,int nFlags){
      return GDALCreateDatasetMaskBand( self, nFlags );
  }
SWIGINTERN char **GDALDatasetShadow_GetFileList(GDALDatasetShadow *self){
    return GDALGetFileList( self );
  }
SWIGINTERN CPLErr GDALDatasetShadow_AdviseRead__SWIG_0(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int *buf_xsize=0,int *buf_ysize=0,GDALDataType *buf_type=0,int band_list=0,int *pband_list=0,char **options=NULL){
    int nxsize = (buf_xsize==0) ? xsize : *buf_xsize;
    int nysize = (buf_ysize==0) ? ysize : *buf_ysize;
    GDALDataType ntype;
    if ( buf_type != 0 ) {
      ntype = (GDALDataType) *buf_type;
    } else {
      int lastband = GDALGetRasterCount( self );
      if (lastband <= 0)
        return CE_Failure;
      ntype = GDALGetRasterDataType( GDALGetRasterBand( self, lastband ) );
    }
    return GDALDatasetAdviseRead(self, xoff, yoff, xsize, ysize,
                                 nxsize, nysize, ntype,
                                 band_list, pband_list, options);
}
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_CreateLayer__SWIG_0(GDALDatasetShadow *self,char const *name,OSRSpatialReferenceShadow *srs=NULL,OGRwkbGeometryType geom_type=wkbUnknown,char **options=0){
    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetCreateLayer( self,
                                  name,
                                  srs,
                                  geom_type,
                                  options);
    return layer;
  }
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_CopyLayer__SWIG_0(GDALDatasetShadow *self,OGRLayerShadow *src_layer,char const *new_name,char **options=0){
    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetCopyLayer( self,
                                                      src_layer,
                                                      new_name,
                                                      options);
    return layer;
  }
SWIGINTERN OGRErr GDALDatasetShadow_DeleteLayer(GDALDatasetShadow *self,int index){
    return GDALDatasetDeleteLayer(self, index);
  }


#include "ogr_core.h"
static char const *
OGRErrMessages( int rc ) {
  switch( rc ) {
  case OGRERR_NONE:
    return "OGR Error: None";
  case OGRERR_NOT_ENOUGH_DATA:
    return "OGR Error: Not enough data to deserialize";
  case OGRERR_NOT_ENOUGH_MEMORY:
    return "OGR Error: Not enough memory";
  case OGRERR_UNSUPPORTED_GEOMETRY_TYPE:
    return "OGR Error: Unsupported geometry type";
  case OGRERR_UNSUPPORTED_OPERATION:
    return "OGR Error: Unsupported operation";
  case OGRERR_CORRUPT_DATA:
    return "OGR Error: Corrupt data";
  case OGRERR_FAILURE:
    return "OGR Error: General Error";
  case OGRERR_UNSUPPORTED_SRS:
    return "OGR Error: Unsupported SRS";
  case OGRERR_INVALID_HANDLE:
    return "OGR Error: Invalid handle";
  case OGRERR_NON_EXISTING_FEATURE:
    return "OGR Error: Non existing feature";
  default:
    return "OGR Error: Unknown";
  }
}

SWIGINTERN int GDALDatasetShadow_GetLayerCount(GDALDatasetShadow *self){
    return GDALDatasetGetLayerCount(self);
  }
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_GetLayerByIndex(GDALDatasetShadow *self,int index){



    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetGetLayer(self, index);
    return layer;
  }
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_GetLayerByName(GDALDatasetShadow *self,char const *layer_name){
    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetGetLayerByName(self, layer_name);
    return layer;
  }
SWIGINTERN void GDALDatasetShadow_ResetReading(GDALDatasetShadow *self){
    GDALDatasetResetReading( self );
  }
SWIGINTERN OGRFeatureShadow *GDALDatasetShadow_GetNextFeature(GDALDatasetShadow *self){
    return GDALDatasetGetNextFeature( self, NULL, NULL, NULL, NULL );
  }
SWIGINTERN bool GDALDatasetShadow_TestCapability(GDALDatasetShadow *self,char const *cap){
    return (GDALDatasetTestCapability(self, cap) > 0);
  }
SWIGINTERN OGRLayerShadow *GDALDatasetShadow_ExecuteSQL__SWIG_0(GDALDatasetShadow *self,char const *statement,OGRGeometryShadow *spatialFilter=NULL,char const *dialect=""){
    OGRLayerShadow* layer = (OGRLayerShadow*) GDALDatasetExecuteSQL(self,
                                                      statement,
                                                      spatialFilter,
                                                      dialect);
    return layer;
  }
SWIGINTERN void GDALDatasetShadow_ReleaseResultSet(GDALDatasetShadow *self,OGRLayerShadow *layer){
    GDALDatasetReleaseResultSet(self, layer);
  }
SWIGINTERN OGRStyleTableShadow *GDALDatasetShadow_GetStyleTable(GDALDatasetShadow *self){
    return (OGRStyleTableShadow*) GDALDatasetGetStyleTable(self);
  }
SWIGINTERN void GDALDatasetShadow_SetStyleTable(GDALDatasetShadow *self,OGRStyleTableShadow *table){
    if( table != NULL )
        GDALDatasetSetStyleTable(self, (OGRStyleTableH) table);
  }
SWIGINTERN OGRErr GDALDatasetShadow_StartTransaction__SWIG_0(GDALDatasetShadow *self,int force=FALSE){
    return GDALDatasetStartTransaction(self, force);
  }
SWIGINTERN OGRErr GDALDatasetShadow_CommitTransaction(GDALDatasetShadow *self){
    return GDALDatasetCommitTransaction(self);
  }
SWIGINTERN OGRErr GDALDatasetShadow_RollbackTransaction(GDALDatasetShadow *self){
    return GDALDatasetRollbackTransaction(self);
  }
SWIGINTERN CPLErr GDALDatasetShadow_ReadRaster_Direct__SWIG_0(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,void *nioBuffer,long nioBufferSize,int band_list,int *pband_list,int nPixelSpace=0,int nLineSpace=0,int nBandSpace=0){
    return DatasetRasterIO( (GDALDatasetH)self, GF_Read,
                              xoff, yoff, xsize, ysize,
                              buf_xsize, buf_ysize,
                              buf_type,
                              nioBuffer, nioBufferSize,
                              band_list, pband_list,
                              nPixelSpace, nLineSpace, nBandSpace,
                              GDT_Unknown, 0);
}
SWIGINTERN CPLErr GDALDatasetShadow_ReadRaster__SWIG_0(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,char *regularArrayOut,long nRegularArraySizeOut,int band_list,int *pband_list,int nPixelSpace=0,int nLineSpace=0,int nBandSpace=0){
    return DatasetRasterIO( (GDALDatasetH)self, GF_Read,
                              xoff, yoff, xsize, ysize,
                              buf_xsize, buf_ysize,
                              buf_type,
                              regularArrayOut, nRegularArraySizeOut,
                              band_list, pband_list,
                              nPixelSpace, nLineSpace, nBandSpace,
                              GDT_Byte, sizeof(char));
}
SWIGINTERN CPLErr GDALDatasetShadow_ReadRaster__SWIG_4(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,short *regularArrayOut,long nRegularArraySizeOut,int band_list,int *pband_list,int nPixelSpace=0,int nLineSpace=0,int nBandSpace=0){
    return DatasetRasterIO( (GDALDatasetH)self, GF_Read,
                              xoff, yoff, xsize, ysize,
                              buf_xsize, buf_ysize,
                              buf_type,
                              regularArrayOut, nRegularArraySizeOut,
                              band_list, pband_list,
                              nPixelSpace, nLineSpace, nBandSpace,
                              GDT_Int16, sizeof(short));
}
SWIGINTERN CPLErr GDALDatasetShadow_ReadRaster__SWIG_8(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,int *regularArrayOut,long nRegularArraySizeOut,int band_list,int *pband_list,int nPixelSpace=0,int nLineSpace=0,int nBandSpace=0){
    return DatasetRasterIO( (GDALDatasetH)self, GF_Read,
                              xoff, yoff, xsize, ysize,
                              buf_xsize, buf_ysize,
                              buf_type,
                              regularArrayOut, nRegularArraySizeOut,
                              band_list, pband_list,
                              nPixelSpace, nLineSpace, nBandSpace,
                              GDT_Int32, sizeof(int));
}
SWIGINTERN CPLErr GDALDatasetShadow_ReadRaster__SWIG_12(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,float *regularArrayOut,long nRegularArraySizeOut,int band_list,int *pband_list,int nPixelSpace=0,int nLineSpace=0,int nBandSpace=0){
    return DatasetRasterIO( (GDALDatasetH)self, GF_Read,
                              xoff, yoff, xsize, ysize,
                              buf_xsize, buf_ysize,
                              buf_type,
                              regularArrayOut, nRegularArraySizeOut,
                              band_list, pband_list,
                              nPixelSpace, nLineSpace, nBandSpace,
                              GDT_Float32, sizeof(float));
}
SWIGINTERN CPLErr GDALDatasetShadow_ReadRaster__SWIG_16(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,double *regularArrayOut,long nRegularArraySizeOut,int band_list,int *pband_list,int nPixelSpace=0,int nLineSpace=0,int nBandSpace=0){
    return DatasetRasterIO( (GDALDatasetH)self, GF_Read,
                              xoff, yoff, xsize, ysize,
                              buf_xsize, buf_ysize,
                              buf_type,
                              regularArrayOut, nRegularArraySizeOut,
                              band_list, pband_list,
                              nPixelSpace, nLineSpace, nBandSpace,
                              GDT_Float64, sizeof(double));
}
SWIGINTERN CPLErr GDALDatasetShadow_WriteRaster_Direct__SWIG_0(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,void *nioBuffer,long nioBufferSize,int band_list,int *pband_list,int nPixelSpace=0,int nLineSpace=0,int nBandSpace=0){
    return DatasetRasterIO( (GDALDatasetH)self, GF_Write,
                              xoff, yoff, xsize, ysize,
                              buf_xsize, buf_ysize,
                              buf_type,
                              nioBuffer, nioBufferSize,
                              band_list, pband_list,
                              nPixelSpace, nLineSpace, nBandSpace,
                              GDT_Unknown, 0);
}
SWIGINTERN CPLErr GDALDatasetShadow_WriteRaster__SWIG_0(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,char *regularArrayIn,long nRegularArraySizeIn,int band_list,int *pband_list,int nPixelSpace=0,int nLineSpace=0,int nBandSpace=0){
    return DatasetRasterIO( (GDALDatasetH)self, GF_Write,
                              xoff, yoff, xsize, ysize,
                              buf_xsize, buf_ysize,
                              buf_type,
                              regularArrayIn, nRegularArraySizeIn,
                              band_list, pband_list,
                              nPixelSpace, nLineSpace, nBandSpace,
                              GDT_Byte, sizeof(char));
}
SWIGINTERN CPLErr GDALDatasetShadow_WriteRaster__SWIG_4(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,short *regularArrayIn,long nRegularArraySizeIn,int band_list,int *pband_list,int nPixelSpace=0,int nLineSpace=0,int nBandSpace=0){
    return DatasetRasterIO( (GDALDatasetH)self, GF_Write,
                              xoff, yoff, xsize, ysize,
                              buf_xsize, buf_ysize,
                              buf_type,
                              regularArrayIn, nRegularArraySizeIn,
                              band_list, pband_list,
                              nPixelSpace, nLineSpace, nBandSpace,
                              GDT_Int16, sizeof(short));
}
SWIGINTERN CPLErr GDALDatasetShadow_WriteRaster__SWIG_8(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,int *regularArrayIn,long nRegularArraySizeIn,int band_list,int *pband_list,int nPixelSpace=0,int nLineSpace=0,int nBandSpace=0){
    return DatasetRasterIO( (GDALDatasetH)self, GF_Write,
                              xoff, yoff, xsize, ysize,
                              buf_xsize, buf_ysize,
                              buf_type,
                              regularArrayIn, nRegularArraySizeIn,
                              band_list, pband_list,
                              nPixelSpace, nLineSpace, nBandSpace,
                              GDT_Int32, sizeof(int));
}
SWIGINTERN CPLErr GDALDatasetShadow_WriteRaster__SWIG_12(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,float *regularArrayIn,long nRegularArraySizeIn,int band_list,int *pband_list,int nPixelSpace=0,int nLineSpace=0,int nBandSpace=0){
    return DatasetRasterIO( (GDALDatasetH)self, GF_Write,
                              xoff, yoff, xsize, ysize,
                              buf_xsize, buf_ysize,
                              buf_type,
                              regularArrayIn, nRegularArraySizeIn,
                              band_list, pband_list,
                              nPixelSpace, nLineSpace, nBandSpace,
                              GDT_Float32, sizeof(float));
}
SWIGINTERN CPLErr GDALDatasetShadow_WriteRaster__SWIG_16(GDALDatasetShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,double *regularArrayIn,long nRegularArraySizeIn,int band_list,int *pband_list,int nPixelSpace=0,int nLineSpace=0,int nBandSpace=0){
    return DatasetRasterIO( (GDALDatasetH)self, GF_Write,
                              xoff, yoff, xsize, ysize,
                              buf_xsize, buf_ysize,
                              buf_type,
                              regularArrayIn, nRegularArraySizeIn,
                              band_list, pband_list,
                              nPixelSpace, nLineSpace, nBandSpace,
                              GDT_Float64, sizeof(double));
}

int GDALDatasetShadow_RasterXSize_get( GDALDatasetShadow *h ) {
  return GDALGetRasterXSize( h );
}
int GDALDatasetShadow_RasterYSize_get( GDALDatasetShadow *h ) {
  return GDALGetRasterYSize( h );
}
int GDALDatasetShadow_RasterCount_get( GDALDatasetShadow *h ) {
  return GDALGetRasterCount( h );
}


/* Returned size is in bytes or 0 if an error occurred. */
static
GIntBig ComputeBandRasterIOSize (int buf_xsize, int buf_ysize, int nPixelSize,
                                 GIntBig nPixelSpace, GIntBig nLineSpace,
                                 int bSpacingShouldBeMultipleOfPixelSize )
{
    if (buf_xsize <= 0 || buf_ysize <= 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal values for buffer size");
        return 0;
    }

    if (nPixelSpace < 0 || nLineSpace < 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal values for space arguments");
        return 0;
    }

    if (nPixelSize == 0)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Illegal value for data type");
        return 0;
    }

    if( nPixelSpace == 0 )
        nPixelSpace = nPixelSize;
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nPixelSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nPixelSpace should be a multiple of nPixelSize");
        return 0;
    }

    if( nLineSpace == 0 )
    {
        nLineSpace = nPixelSpace * buf_xsize;
    }
    else if ( bSpacingShouldBeMultipleOfPixelSize && (nLineSpace % nPixelSize) != 0 )
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "nLineSpace should be a multiple of nPixelSize");
        return 0;
    }

    GIntBig nRet = (GIntBig)(buf_ysize - 1) * nLineSpace + (GIntBig)(buf_xsize - 1) * nPixelSpace + nPixelSize;
#if SIZEOF_VOIDP == 4
    if (nRet > INT_MAX)
    {
        CPLError(CE_Failure, CPLE_IllegalArg, "Integer overflow");
        return 0;
    }
#endif

    return nRet;
}

SWIGINTERN GDALDatasetShadow *GDALRasterBandShadow_GetDataset(GDALRasterBandShadow *self){
    return (GDALDatasetShadow*) GDALGetBandDataset(self);
  }
SWIGINTERN int GDALRasterBandShadow_GetBand(GDALRasterBandShadow *self){
    return GDALGetBandNumber(self);
  }
SWIGINTERN void GDALRasterBandShadow_GetBlockSize(GDALRasterBandShadow *self,int *pnBlockXSize,int *pnBlockYSize){
      GDALGetBlockSize(self, pnBlockXSize, pnBlockYSize);
  }
SWIGINTERN GDALColorInterp GDALRasterBandShadow_GetColorInterpretation(GDALRasterBandShadow *self){
    return GDALGetRasterColorInterpretation( self );
  }
SWIGINTERN GDALColorInterp GDALRasterBandShadow_GetRasterColorInterpretation(GDALRasterBandShadow *self){
    return GDALGetRasterColorInterpretation( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetColorInterpretation(GDALRasterBandShadow *self,GDALColorInterp val){
    return GDALSetRasterColorInterpretation( self, val );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetRasterColorInterpretation(GDALRasterBandShadow *self,GDALColorInterp val){
    return GDALSetRasterColorInterpretation( self, val );
  }
SWIGINTERN void GDALRasterBandShadow_GetNoDataValue(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterNoDataValue( self, hasval );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetNoDataValue(GDALRasterBandShadow *self,double d){
    return GDALSetRasterNoDataValue( self, d );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_DeleteNoDataValue(GDALRasterBandShadow *self){
    return GDALDeleteRasterNoDataValue( self );
  }
SWIGINTERN char const *GDALRasterBandShadow_GetUnitType(GDALRasterBandShadow *self){
      return GDALGetRasterUnitType( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetUnitType(GDALRasterBandShadow *self,char const *val){
    return GDALSetRasterUnitType( self, val );
  }
SWIGINTERN char **GDALRasterBandShadow_GetRasterCategoryNames(GDALRasterBandShadow *self){
    return GDALGetRasterCategoryNames( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetRasterCategoryNames(GDALRasterBandShadow *self,char **names){
    return GDALSetRasterCategoryNames( self, names );
  }
SWIGINTERN void GDALRasterBandShadow_GetMinimum(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterMinimum( self, hasval );
  }
SWIGINTERN void GDALRasterBandShadow_GetMaximum(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterMaximum( self, hasval );
  }
SWIGINTERN void GDALRasterBandShadow_GetOffset(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterOffset( self, hasval );
  }
SWIGINTERN void GDALRasterBandShadow_GetScale(GDALRasterBandShadow *self,double *val,int *hasval){
    *val = GDALGetRasterScale( self, hasval );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetOffset(GDALRasterBandShadow *self,double val){
    return GDALSetRasterOffset( self, val );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetScale(GDALRasterBandShadow *self,double val){
    return GDALSetRasterScale( self, val );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetStatistics(GDALRasterBandShadow *self,int approx_ok,int force,double *min,double *max,double *mean,double *stddev){
    if (min) *min = 0;
    if (max) *max = 0;
    if (mean) *mean = 0;
    if (stddev) *stddev = -1; /* This is the only way to recognize from Python if GetRasterStatistics() has updated the values */
    return GDALGetRasterStatistics( self, approx_ok, force,
				    min, max, mean, stddev );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_ComputeStatistics__SWIG_0(GDALRasterBandShadow *self,bool approx_ok,double *min=NULL,double *max=NULL,double *mean=NULL,double *stddev=NULL,GDALProgressFunc callback=NULL,void *callback_data=NULL){
    return GDALComputeRasterStatistics( self, approx_ok, min, max, mean, stddev, callback, callback_data );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetStatistics(GDALRasterBandShadow *self,double min,double max,double mean,double stddev){
    return GDALSetRasterStatistics( self, min, max, mean, stddev );
  }
SWIGINTERN int GDALRasterBandShadow_GetOverviewCount(GDALRasterBandShadow *self){
    return GDALGetOverviewCount( self );
  }
SWIGINTERN GDALRasterBandShadow *GDALRasterBandShadow_GetOverview(GDALRasterBandShadow *self,int i){
    return (GDALRasterBandShadow*) GDALGetOverview( self, i );
  }
SWIGINTERN int GDALRasterBandShadow_Checksum(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize){
    return GDALChecksumImage( self, xoff, yoff, xsize, ysize );
  }
SWIGINTERN void GDALRasterBandShadow_ComputeRasterMinMax__SWIG_0(GDALRasterBandShadow *self,double argout[2],int approx_ok=0){
    GDALComputeRasterMinMax( self, approx_ok, argout );
  }
SWIGINTERN void GDALRasterBandShadow_ComputeBandStats__SWIG_0(GDALRasterBandShadow *self,double argout[2],int samplestep=1){
    GDALComputeBandStats( self, samplestep, argout+0, argout+1,
                          NULL, NULL );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_Fill__SWIG_0(GDALRasterBandShadow *self,double real_fill,double imag_fill=0.0){
    return GDALFillRaster( self, real_fill, imag_fill );
  }
SWIGINTERN void GDALRasterBandShadow_FlushCache(GDALRasterBandShadow *self){
    GDALFlushRasterCache( self );
  }
SWIGINTERN GDALColorTableShadow *GDALRasterBandShadow_GetRasterColorTable(GDALRasterBandShadow *self){
    return (GDALColorTableShadow*) GDALGetRasterColorTable( self );
  }
SWIGINTERN GDALColorTableShadow *GDALRasterBandShadow_GetColorTable(GDALRasterBandShadow *self){
    return (GDALColorTableShadow*) GDALGetRasterColorTable( self );
  }
SWIGINTERN int GDALRasterBandShadow_SetRasterColorTable(GDALRasterBandShadow *self,GDALColorTableShadow *arg){
    return GDALSetRasterColorTable( self, arg );
  }
SWIGINTERN int GDALRasterBandShadow_SetColorTable(GDALRasterBandShadow *self,GDALColorTableShadow *arg){
    return GDALSetRasterColorTable( self, arg );
  }
SWIGINTERN GDALRasterAttributeTableShadow *GDALRasterBandShadow_GetDefaultRAT(GDALRasterBandShadow *self){
      return (GDALRasterAttributeTableShadow*) GDALGetDefaultRAT(self);
  }
SWIGINTERN int GDALRasterBandShadow_SetDefaultRAT(GDALRasterBandShadow *self,GDALRasterAttributeTableShadow *table){
      return GDALSetDefaultRAT(self, table);
  }
SWIGINTERN GDALRasterBandShadow *GDALRasterBandShadow_GetMaskBand(GDALRasterBandShadow *self){
      return (GDALRasterBandShadow *) GDALGetMaskBand( self );
  }
SWIGINTERN int GDALRasterBandShadow_GetMaskFlags(GDALRasterBandShadow *self){
      return GDALGetMaskFlags( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_CreateMaskBand(GDALRasterBandShadow *self,int nFlags){
      return GDALCreateMaskBand( self, nFlags );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetDefaultHistogram(GDALRasterBandShadow *self,double min,double max,int buckets_in,int *panHistogram_in){
    return GDALSetDefaultHistogram( self, min, max,
    	   			    buckets_in, panHistogram_in );
}
SWIGINTERN bool GDALRasterBandShadow_HasArbitraryOverviews(GDALRasterBandShadow *self){
      return (GDALHasArbitraryOverviews( self ) != 0) ? true : false;
  }
SWIGINTERN char **GDALRasterBandShadow_GetCategoryNames(GDALRasterBandShadow *self){
    return GDALGetRasterCategoryNames( self );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_SetCategoryNames(GDALRasterBandShadow *self,char **papszCategoryNames){
    return GDALSetRasterCategoryNames( self, papszCategoryNames );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_AdviseRead__SWIG_0(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int *buf_xsize=0,int *buf_ysize=0,GDALDataType *buf_type=0,char **options=NULL){
    int nxsize = (buf_xsize==0) ? xsize : *buf_xsize;
    int nysize = (buf_ysize==0) ? ysize : *buf_ysize;
    GDALDataType ntype;
    if ( buf_type != 0 ) {
      ntype = (GDALDataType) *buf_type;
    } else {
      ntype = GDALGetRasterDataType( self );
    }
    return GDALRasterAdviseRead(self, xoff, yoff, xsize, ysize,
                                nxsize, nysize, ntype, options);
}
SWIGINTERN CPLErr GDALRasterBandShadow_ReadRaster_Direct__SWIG_0(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,void *nioBuffer,long nioBufferSize,int nPixelSpace=0,int nLineSpace=0){
    return BandRasterIO( self, GF_Read,
                         xoff, yoff, xsize, ysize,
                         buf_xsize, buf_ysize,
                         buf_type,
                         nioBuffer, nioBufferSize,
                         nPixelSpace, nLineSpace,
                         GDT_Unknown, 0 );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_ReadRaster__SWIG_0(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,char *regularArrayOut,long nRegularArraySizeOut,int nPixelSpace=0,int nLineSpace=0){
    return BandRasterIO( self, GF_Read,
                         xoff, yoff, xsize, ysize,
                         buf_xsize, buf_ysize,
                         buf_type,
                         regularArrayOut, nRegularArraySizeOut,
                         nPixelSpace, nLineSpace,
                         GDT_Byte, sizeof(char) );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_ReadRaster__SWIG_3(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,short *regularArrayOut,long nRegularArraySizeOut,int nPixelSpace=0,int nLineSpace=0){
    return BandRasterIO( self, GF_Read,
                         xoff, yoff, xsize, ysize,
                         buf_xsize, buf_ysize,
                         buf_type,
                         regularArrayOut, nRegularArraySizeOut,
                         nPixelSpace, nLineSpace,
                         GDT_Int16, sizeof(short) );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_ReadRaster__SWIG_6(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,int *regularArrayOut,long nRegularArraySizeOut,int nPixelSpace=0,int nLineSpace=0){
    return BandRasterIO( self, GF_Read,
                         xoff, yoff, xsize, ysize,
                         buf_xsize, buf_ysize,
                         buf_type,
                         regularArrayOut, nRegularArraySizeOut,
                         nPixelSpace, nLineSpace,
                         GDT_Int32, sizeof(int) );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_ReadRaster__SWIG_9(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,float *regularArrayOut,long nRegularArraySizeOut,int nPixelSpace=0,int nLineSpace=0){
    return BandRasterIO( self, GF_Read,
                         xoff, yoff, xsize, ysize,
                         buf_xsize, buf_ysize,
                         buf_type,
                         regularArrayOut, nRegularArraySizeOut,
                         nPixelSpace, nLineSpace,
                         GDT_Float32, sizeof(float) );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_ReadRaster__SWIG_12(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,double *regularArrayOut,long nRegularArraySizeOut,int nPixelSpace=0,int nLineSpace=0){
    return BandRasterIO( self, GF_Read,
                         xoff, yoff, xsize, ysize,
                         buf_xsize, buf_ysize,
                         buf_type,
                         regularArrayOut, nRegularArraySizeOut,
                         nPixelSpace, nLineSpace,
                         GDT_Float64, sizeof(double) );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_WriteRaster_Direct__SWIG_0(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,void *nioBuffer,long nioBufferSize,int nPixelSpace=0,int nLineSpace=0){
    return BandRasterIO( self, GF_Write,
                         xoff, yoff, xsize, ysize,
                         buf_xsize, buf_ysize,
                         buf_type,
                         nioBuffer, nioBufferSize,
                         nPixelSpace, nLineSpace,
                         GDT_Unknown, 0 );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_WriteRaster__SWIG_0(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,char *regularArrayIn,long nRegularArraySizeIn,int nPixelSpace=0,int nLineSpace=0){
    return BandRasterIO( self, GF_Write,
                         xoff, yoff, xsize, ysize,
                         buf_xsize, buf_ysize,
                         buf_type,
                         regularArrayIn, nRegularArraySizeIn,
                         nPixelSpace, nLineSpace,
                         GDT_Byte, sizeof(char) );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_WriteRaster__SWIG_3(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,short *regularArrayIn,long nRegularArraySizeIn,int nPixelSpace=0,int nLineSpace=0){
    return BandRasterIO( self, GF_Write,
                         xoff, yoff, xsize, ysize,
                         buf_xsize, buf_ysize,
                         buf_type,
                         regularArrayIn, nRegularArraySizeIn,
                         nPixelSpace, nLineSpace,
                         GDT_Int16, sizeof(short) );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_WriteRaster__SWIG_6(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,int *regularArrayIn,long nRegularArraySizeIn,int nPixelSpace=0,int nLineSpace=0){
    return BandRasterIO( self, GF_Write,
                         xoff, yoff, xsize, ysize,
                         buf_xsize, buf_ysize,
                         buf_type,
                         regularArrayIn, nRegularArraySizeIn,
                         nPixelSpace, nLineSpace,
                         GDT_Int32, sizeof(int) );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_WriteRaster__SWIG_9(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,float *regularArrayIn,long nRegularArraySizeIn,int nPixelSpace=0,int nLineSpace=0){
    return BandRasterIO( self, GF_Write,
                         xoff, yoff, xsize, ysize,
                         buf_xsize, buf_ysize,
                         buf_type,
                         regularArrayIn, nRegularArraySizeIn,
                         nPixelSpace, nLineSpace,
                         GDT_Float32, sizeof(float) );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_WriteRaster__SWIG_12(GDALRasterBandShadow *self,int xoff,int yoff,int xsize,int ysize,int buf_xsize,int buf_ysize,GDALDataType buf_type,double *regularArrayIn,long nRegularArraySizeIn,int nPixelSpace=0,int nLineSpace=0){
    return BandRasterIO( self, GF_Write,
                         xoff, yoff, xsize, ysize,
                         buf_xsize, buf_ysize,
                         buf_type,
                         regularArrayIn, nRegularArraySizeIn,
                         nPixelSpace, nLineSpace,
                         GDT_Float64, sizeof(double) );
  }
SWIGINTERN CPLErr GDALRasterBandShadow_ReadBlock_Direct(GDALRasterBandShadow *self,int nXBlockOff,int nYBlockOff,void *nioBuffer,long nioBufferSize){
    if (BandBlockReadWrite_Validate((GDALRasterBandH)self, nioBuffer, nioBufferSize) != CE_None)
      return CE_Failure;

    return GDALReadBlock(self, nXBlockOff, nYBlockOff, nioBuffer);
  }
SWIGINTERN CPLErr GDALRasterBandShadow_WriteBlock_Direct(GDALRasterBandShadow *self,int nXBlockOff,int nYBlockOff,void *nioBuffer,long nioBufferSize){
    if (BandBlockReadWrite_Validate((GDALRasterBandH)self, nioBuffer, nioBufferSize) != CE_None)
      return CE_Failure;

    return GDALWriteBlock(self, nXBlockOff, nYBlockOff, nioBuffer);
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetHistogram__SWIG_0(GDALRasterBandShadow *self,double min,double max,int buckets,int *panHistogram,bool include_out_of_range,bool approx_ok,GDALProgressFunc callback,void *callback_data){
    CPLErrorReset();
    CPLErr err = GDALGetRasterHistogram( self, min, max, buckets, panHistogram,
                                         include_out_of_range, approx_ok,
                                         callback, callback_data );
    return err;
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetHistogram__SWIG_1(GDALRasterBandShadow *self,double min,double max,int buckets,int *panHistogram,bool include_out_of_range,bool approx_ok){
    CPLErrorReset();
    CPLErr err = GDALGetRasterHistogram( self, min, max, buckets, panHistogram,
                                         include_out_of_range, approx_ok,
                                         NULL, NULL);
    return err;
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetHistogram__SWIG_2(GDALRasterBandShadow *self,double min,double max,int buckets,int *panHistogram){
    CPLErrorReset();
    CPLErr err = GDALGetRasterHistogram( self, min, max, buckets, panHistogram,
                                         0, 1,
                                         NULL, NULL);
    return err;
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetHistogram__SWIG_3(GDALRasterBandShadow *self,int buckets,int *panHistogram){
    CPLErrorReset();
    CPLErr err = GDALGetRasterHistogram( self, -0.5, 255.5, buckets, panHistogram,
                                         0, 1,
                                         NULL, NULL);
    return err;
  }
SWIGINTERN CPLErr GDALRasterBandShadow_GetDefaultHistogram__SWIG_0(GDALRasterBandShadow *self,double *min_ret,double *max_ret,int *buckets_ret,int **ppanHistogram,bool force=1,GDALProgressFunc callback=NULL,void *callback_data=NULL){
      return GDALGetDefaultHistogram( self, min_ret, max_ret, buckets_ret,
                                      ppanHistogram, force,
                                      callback, callback_data );
  }

GDALDataType GDALRasterBandShadow_DataType_get( GDALRasterBandShadow *h ) {
  return GDALGetRasterDataType( h );
}
int GDALRasterBandShadow_XSize_get( GDALRasterBandShadow *h ) {
  return GDALGetRasterBandXSize( h );
}
int GDALRasterBandShadow_YSize_get( GDALRasterBandShadow *h ) {
  return GDALGetRasterBandYSize( h );
}

SWIGINTERN GDALColorTableShadow *new_GDALColorTableShadow__SWIG_0(GDALPaletteInterp palette=GPI_RGB){
        return (GDALColorTableShadow*) GDALCreateColorTable(palette);
    }
SWIGINTERN void delete_GDALColorTableShadow(GDALColorTableShadow *self){
        GDALDestroyColorTable(self);
    }
SWIGINTERN GDALColorTableShadow *GDALColorTableShadow_Clone(GDALColorTableShadow *self){
        return (GDALColorTableShadow*) GDALCloneColorTable (self);
    }
SWIGINTERN GDALPaletteInterp GDALColorTableShadow_GetPaletteInterpretation(GDALColorTableShadow *self){
        return GDALGetPaletteInterpretation(self);
    }
SWIGINTERN int GDALColorTableShadow_GetColorEntryCount(GDALColorTableShadow *self){
        return GDALGetColorEntryCount(self);
    }
SWIGINTERN GDALColorEntry *GDALColorTableShadow_GetColorEntry(GDALColorTableShadow *self,int entry){
        return (GDALColorEntry*) GDALGetColorEntry(self, entry);
    }
SWIGINTERN void GDALColorTableShadow_SetColorEntry(GDALColorTableShadow *self,int entry,GDALColorEntry const *centry){
        GDALSetColorEntry(self, entry, centry);
    }
SWIGINTERN void GDALColorTableShadow_CreateColorRamp(GDALColorTableShadow *self,int nStartIndex,GDALColorEntry const *startcolor,int nEndIndex,GDALColorEntry const *endcolor){
        GDALCreateColorRamp(self, nStartIndex, startcolor, nEndIndex, endcolor);
    }
SWIGINTERN GDALRasterAttributeTableShadow *new_GDALRasterAttributeTableShadow(){
        return (GDALRasterAttributeTableShadow*)
		GDALCreateRasterAttributeTable();
    }
SWIGINTERN void delete_GDALRasterAttributeTableShadow(GDALRasterAttributeTableShadow *self){
        GDALDestroyRasterAttributeTable(self);
    }
SWIGINTERN GDALRasterAttributeTableShadow *GDALRasterAttributeTableShadow_Clone(GDALRasterAttributeTableShadow *self){
        return (GDALRasterAttributeTableShadow*) GDALRATClone(self);
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetColumnCount(GDALRasterAttributeTableShadow *self){
        return GDALRATGetColumnCount( self );
    }
SWIGINTERN char const *GDALRasterAttributeTableShadow_GetNameOfCol(GDALRasterAttributeTableShadow *self,int iCol){
        return GDALRATGetNameOfCol( self, iCol );
    }
SWIGINTERN GDALRATFieldUsage GDALRasterAttributeTableShadow_GetUsageOfCol(GDALRasterAttributeTableShadow *self,int iCol){
        return GDALRATGetUsageOfCol( self, iCol );
    }
SWIGINTERN GDALRATFieldType GDALRasterAttributeTableShadow_GetTypeOfCol(GDALRasterAttributeTableShadow *self,int iCol){
        return GDALRATGetTypeOfCol( self, iCol );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetColOfUsage(GDALRasterAttributeTableShadow *self,GDALRATFieldUsage eUsage){
        return GDALRATGetColOfUsage( self, eUsage );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetRowCount(GDALRasterAttributeTableShadow *self){
        return GDALRATGetRowCount( self );
    }
SWIGINTERN char const *GDALRasterAttributeTableShadow_GetValueAsString(GDALRasterAttributeTableShadow *self,int iRow,int iCol){
        return GDALRATGetValueAsString( self, iRow, iCol );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetValueAsInt(GDALRasterAttributeTableShadow *self,int iRow,int iCol){
        return GDALRATGetValueAsInt( self, iRow, iCol );
    }
SWIGINTERN double GDALRasterAttributeTableShadow_GetValueAsDouble(GDALRasterAttributeTableShadow *self,int iRow,int iCol){
        return GDALRATGetValueAsDouble( self, iRow, iCol );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetValueAsString(GDALRasterAttributeTableShadow *self,int iRow,int iCol,char const *pszValue){
        GDALRATSetValueAsString( self, iRow, iCol, pszValue );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetValueAsInt(GDALRasterAttributeTableShadow *self,int iRow,int iCol,int nValue){
        GDALRATSetValueAsInt( self, iRow, iCol, nValue );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetValueAsDouble(GDALRasterAttributeTableShadow *self,int iRow,int iCol,double dfValue){
        GDALRATSetValueAsDouble( self, iRow, iCol, dfValue );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_SetRowCount(GDALRasterAttributeTableShadow *self,int nCount){
        GDALRATSetRowCount( self, nCount );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_CreateColumn(GDALRasterAttributeTableShadow *self,char const *pszName,GDALRATFieldType eType,GDALRATFieldUsage eUsage){
        return GDALRATCreateColumn( self, pszName, eType, eUsage );
    }
SWIGINTERN bool GDALRasterAttributeTableShadow_GetLinearBinning(GDALRasterAttributeTableShadow *self,double *pdfRow0Min,double *pdfBinSize){
        return (GDALRATGetLinearBinning(self, pdfRow0Min, pdfBinSize) != 0) ? true : false;
    }
SWIGINTERN int GDALRasterAttributeTableShadow_SetLinearBinning(GDALRasterAttributeTableShadow *self,double dfRow0Min,double dfBinSize){
        return GDALRATSetLinearBinning(self, dfRow0Min, dfBinSize);
    }
SWIGINTERN int GDALRasterAttributeTableShadow_GetRowOfValue(GDALRasterAttributeTableShadow *self,double dfValue){
        return GDALRATGetRowOfValue( self, dfValue );
    }
SWIGINTERN int GDALRasterAttributeTableShadow_ChangesAreWrittenToFile(GDALRasterAttributeTableShadow *self){
        return GDALRATChangesAreWrittenToFile( self );
    }
SWIGINTERN void GDALRasterAttributeTableShadow_DumpReadable(GDALRasterAttributeTableShadow *self){
        GDALRATDumpReadable( self, NULL );
    }

#include "gdalgrid.h"

#ifdef DEBUG
typedef struct OGRLayerHS OGRLayerShadow;
typedef struct OGRGeometryHS OGRGeometryShadow;
#else
typedef void OGRLayerShadow;
typedef void OGRGeometryShadow;
#endif


int  ComputeMedianCutPCT ( GDALRasterBandShadow *red,
                              GDALRasterBandShadow *green,
                              GDALRasterBandShadow *blue,
                              int num_colors,
                              GDALColorTableShadow* colors,
                              GDALProgressFunc callback = NULL,
                              void* callback_data=NULL) {

    CPLErrorReset();

    int err = GDALComputeMedianCutPCT( red,
                                          green,
                                          blue,
                                          NULL,
                                          num_colors,
                                          colors,
                                          callback,
                                          callback_data);

    return err;
}


int  DitherRGB2PCT ( GDALRasterBandShadow *red,
                     GDALRasterBandShadow *green,
                     GDALRasterBandShadow *blue,
                     GDALRasterBandShadow *target,
                     GDALColorTableShadow *colors,
                     GDALProgressFunc callback = NULL,
                     void* callback_data=NULL) {

    CPLErrorReset();
    int err;
    err = GDALDitherRGB2PCT(  red,
                                  green,
                                  blue,
                                  target,
                                  colors,
                                  callback,
                                  callback_data);

    return err;
}


CPLErr  ReprojectImage ( GDALDatasetShadow *src_ds,
                         GDALDatasetShadow *dst_ds,
                         const char *src_wkt=NULL,
                         const char *dst_wkt=NULL,
                         GDALResampleAlg eResampleAlg=GRA_NearestNeighbour,
                         double WarpMemoryLimit=0.0,
                         double maxerror = 0.0,
			 GDALProgressFunc callback = NULL,
                     	 void* callback_data=NULL,
                         char** options = NULL ) {

    CPLErrorReset();

    GDALWarpOptions* psOptions = NULL;
    if( options != NULL )
    {
        psOptions = GDALCreateWarpOptions();
        psOptions->papszWarpOptions = CSLDuplicate(options);
    }

    CPLErr err = GDALReprojectImage( src_ds,
                                     src_wkt,
                                     dst_ds,
                                     dst_wkt,
                                     eResampleAlg,
                                     WarpMemoryLimit,
                                     maxerror,
                                     callback,
                                     callback_data,
                                     psOptions);

    if( psOptions != NULL )
        GDALDestroyWarpOptions(psOptions);

    return err;
}


int  ComputeProximity( GDALRasterBandShadow *srcBand,
                       GDALRasterBandShadow *proximityBand,
                       char **options = NULL,
                       GDALProgressFunc callback=NULL,
                       void* callback_data=NULL) {

    CPLErrorReset();

    return GDALComputeProximity( srcBand, proximityBand, options,
                                 callback, callback_data );
}


int  RasterizeLayer( GDALDatasetShadow *dataset,
                 int bands, int *band_list,
                 OGRLayerShadow *layer,
		 int burn_values = 0, double *burn_values_list = NULL,
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErr eErr;

    CPLErrorReset();

    if( burn_values == 0 )
    {
        burn_values_list = (double *) CPLMalloc(sizeof(double)*bands);
        for( int i = 0; i < bands; i++ )
            burn_values_list[i] = 255.0;
    }
    else if( burn_values != bands )
    {
        CPLError( CE_Failure, CPLE_AppDefined,
                  "Did not get the expected number of burn values in RasterizeLayer()" );
        return CE_Failure;
    }

    eErr = GDALRasterizeLayers( dataset, bands, band_list,
                                1, &layer,
                                NULL, NULL,
                                burn_values_list, options,
                                callback, callback_data );

    if( burn_values == 0 )
        CPLFree( burn_values_list );

    return eErr;
}


int  Polygonize( GDALRasterBandShadow *srcBand,
     		 GDALRasterBandShadow *maskBand,
  	         OGRLayerShadow *outLayer,
                 int iPixValField,
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErrorReset();

    return GDALPolygonize( srcBand, maskBand, outLayer, iPixValField,
                           options, callback, callback_data );
}


int  FPolygonize( GDALRasterBandShadow *srcBand,
                 GDALRasterBandShadow *maskBand,
                 OGRLayerShadow *outLayer,
                 int iPixValField,
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErrorReset();

    return GDALFPolygonize( srcBand, maskBand, outLayer, iPixValField,
                           options, callback, callback_data );
}


int  FillNodata( GDALRasterBandShadow *targetBand,
     		 GDALRasterBandShadow *maskBand,
                 double maxSearchDist,
                 int smoothingIterations,
                 char **options = NULL,
                 GDALProgressFunc callback=NULL,
                 void* callback_data=NULL) {

    CPLErrorReset();

    return GDALFillNodata( targetBand, maskBand, maxSearchDist,
    	   		   0, smoothingIterations, options,
			   callback, callback_data );
}


int  SieveFilter( GDALRasterBandShadow *srcBand,
     		  GDALRasterBandShadow *maskBand,
  	          GDALRasterBandShadow *dstBand,
                  int threshold, int connectedness=4,
                  char **options = NULL,
                  GDALProgressFunc callback=NULL,
                  void* callback_data=NULL) {

    CPLErrorReset();

    return GDALSieveFilter( srcBand, maskBand, dstBand,
                            threshold, connectedness,
                            options, callback, callback_data );
}


int  RegenerateOverviews( GDALRasterBandShadow *srcBand,
     			  int overviewBandCount,
                          GDALRasterBandShadow **overviewBands,
                          const char *resampling = "average",
                          GDALProgressFunc callback=NULL,
                          void* callback_data=NULL) {

    CPLErrorReset();

    return GDALRegenerateOverviews( srcBand, overviewBandCount, overviewBands,
    	   			    resampling ? resampling : "average", callback, callback_data );
}


int  RegenerateOverview( GDALRasterBandShadow *srcBand,
                          GDALRasterBandShadow *overviewBand,
                          const char *resampling = "average",
                          GDALProgressFunc callback=NULL,
                          void* callback_data=NULL) {

    CPLErrorReset();

    return GDALRegenerateOverviews( srcBand, 1, &overviewBand,
    	   			    resampling ? resampling : "average", callback, callback_data );
}


int wrapper_GridCreate( char* algorithmOptions,
                        int points, double *x, double *y, double *z,
                        double xMin, double xMax, double yMin, double yMax,
                        int xSize, int ySize, GDALDataType dataType,
                        void* nioBuffer, long nioBufferSize,
                        GDALProgressFunc callback = NULL,
                        void* callback_data = NULL)
{
    GDALGridAlgorithm eAlgorithm = GGA_InverseDistanceToAPower;
    void* pOptions = NULL;

    CPLErr eErr = CE_Failure;

    CPLErrorReset();

    if (xSize * ySize * (GDALGetDataTypeSize(dataType) / 8) > nioBufferSize)
    {
        CPLError( eErr, CPLE_AppDefined, "Buffer too small" );
        return eErr;
    }

    if ( algorithmOptions )
    {
        eErr = ParseAlgorithmAndOptions( algorithmOptions, &eAlgorithm, &pOptions );
    }
    else
    {
        eErr = ParseAlgorithmAndOptions( szAlgNameInvDist, &eAlgorithm, &pOptions );
    }

    if ( eErr != CE_None )
    {
        CPLError( eErr, CPLE_AppDefined, "Failed to process algorithm name and parameters.\n" );
        return eErr;
    }

    eErr = GDALGridCreate( eAlgorithm, pOptions, points, x, y, z,
                           xMin, xMax, yMin, yMax, xSize, ySize, dataType, nioBuffer,
                           callback, callback_data );

    CPLFree(pOptions);

    return eErr;
}


int ContourGenerate( GDALRasterBandShadow *srcBand,
                     double contourInterval,
                     double contourBase,
                     int fixedLevelCount,
                     double *fixedLevels,
                     int useNoData,
                     double noDataValue,
                     OGRLayerShadow* dstLayer,
                     int idField,
                     int elevField,
                     GDALProgressFunc callback = NULL,
                     void* callback_data = NULL)
{
    CPLErr eErr;

    CPLErrorReset();

    eErr =  GDALContourGenerate( srcBand,
                                 contourInterval,
                                 contourBase,
                                 fixedLevelCount,
                                 fixedLevels,
                                 useNoData,
                                 noDataValue,
                                 dstLayer,
                                 idField,
                                 elevField,
                                 callback,
                                 callback_data);

    return eErr;
}


GDALDatasetShadow *AutoCreateWarpedVRT( GDALDatasetShadow *src_ds,
                                        const char *src_wkt = 0,
                                        const char *dst_wkt = 0,
                                        GDALResampleAlg eResampleAlg = GRA_NearestNeighbour,
                                        double maxerror = 0.0 ) {
  GDALDatasetShadow *ds = GDALAutoCreateWarpedVRT( src_ds, src_wkt,
                                                   dst_wkt,
                                                   eResampleAlg,
                                                   maxerror,
                                                   0 );
  if (ds == 0) {
    /*throw CPLGetLastErrorMsg(); causes a SWIG_exception later*/
  }
  return ds;

}


GDALDatasetShadow*  CreatePansharpenedVRT( const char* pszXML,
                            GDALRasterBandShadow* panchroBand,
                            int nInputSpectralBands,
                            GDALRasterBandShadow** ahInputSpectralBands )
{
    CPLErrorReset();

    return (GDALDatasetShadow*)GDALCreatePansharpenedVRT( pszXML, panchroBand,
                                      nInputSpectralBands, ahInputSpectralBands );
}

SWIGINTERN GDALTransformerInfoShadow *new_GDALTransformerInfoShadow(GDALDatasetShadow *src,GDALDatasetShadow *dst,char **options){
    GDALTransformerInfoShadow *obj = (GDALTransformerInfoShadow*)
       GDALCreateGenImgProjTransformer2( (GDALDatasetH)src, (GDALDatasetH)dst,
                                         options );
    return obj;
  }
SWIGINTERN void delete_GDALTransformerInfoShadow(GDALTransformerInfoShadow *self){
    GDALDestroyTransformer( self );
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformPoint__SWIG_0(GDALTransformerInfoShadow *self,int bDstToSrc,double inout[3]){
    int nRet, nSuccess = TRUE;

    nRet = GDALUseTransformer( self, bDstToSrc,
                               1, &inout[0], &inout[1], &inout[2],
                               &nSuccess );

    return nRet && nSuccess;
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformPoint__SWIG_1(GDALTransformerInfoShadow *self,double argout[3],int bDstToSrc,double x,double y,double z=0.0){
    int nRet, nSuccess = TRUE;

    argout[0] = x;
    argout[1] = y;
    argout[2] = z;
    nRet = GDALUseTransformer( self, bDstToSrc,
                               1, &argout[0], &argout[1], &argout[2],
                               &nSuccess );

    return nRet && nSuccess;
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformPoints(GDALTransformerInfoShadow *self,int bDstToSrc,int nCount,double *x,double *y,double *z,int *panSuccess){
    int nRet;

    nRet = GDALUseTransformer( self, bDstToSrc, nCount, x, y, z, panSuccess );

    return nRet;
  }
SWIGINTERN int GDALTransformerInfoShadow_TransformGeolocations__SWIG_0(GDALTransformerInfoShadow *self,GDALRasterBandShadow *xBand,GDALRasterBandShadow *yBand,GDALRasterBandShadow *zBand,GDALProgressFunc callback=NULL,void *callback_data=NULL,char **options=NULL){

    CPLErrorReset();

    return GDALTransformGeolocations( xBand, yBand, zBand,
                                      GDALUseTransformer, self,
                            	      callback, callback_data, options );
  }

GDALDatasetShadow* ApplyVerticalShiftGrid( GDALDatasetShadow *src_ds,
                                           GDALDatasetShadow *grid_ds,
                                           bool inverse = false,
                                           double srcUnitToMeter = 1.0,
                                           double dstUnitToMeter = 1.0,
                                           char** options = NULL ) {
  GDALDatasetShadow *ds = GDALApplyVerticalShiftGrid( src_ds, grid_ds,
                                                      inverse,
                                                      srcUnitToMeter,
                                                      dstUnitToMeter,
                                                      options );
  return ds;

}


const char *wrapper_GDALVersionInfo( const char *request = "VERSION_NUM" )
{
    return GDALVersionInfo(request ? request : "VERSION_NUM");
}


int wrapper_GDALGetCacheMax()
{
    return GDALGetCacheMax();
}


int wrapper_GDALGetCacheUsed()
{
    return GDALGetCacheUsed();
}


void wrapper_GDALSetCacheMax(int nBytes)
{
    return GDALSetCacheMax(nBytes);
}


const char *wrapper_GDALDecToDMS( double dfAngle, const char * pszAxis,
                                  int nPrecision = 2 )
{
    return GDALDecToDMS(dfAngle, pszAxis, nPrecision);
}


retStringAndCPLFree *GetJPEG2000StructureAsString( const char* pszFilename, char** options = NULL )
{
    CPLXMLNode* psNode = GDALGetJPEG2000Structure(pszFilename, options);
    if( psNode == NULL )
        return NULL;
    char* pszXML = CPLSerializeXMLTree(psNode);
    CPLDestroyXMLNode(psNode);
    return pszXML;
}


int GetDriverCount() {
  return GDALGetDriverCount();
}


static
GDALDriverShadow* GetDriverByName( char const *name ) {
  return (GDALDriverShadow*) GDALGetDriverByName( name );
}


GDALDriverShadow* GetDriver( int i ) {
  return (GDALDriverShadow*) GDALGetDriver( i );
}


static
GDALDatasetShadow* Open( char const* utf8_path, GDALAccess eAccess) {
  CPLErrorReset();
  GDALDatasetShadow *ds = GDALOpen( utf8_path, eAccess );
  if( ds != NULL && CPLGetLastErrorType() == CE_Failure )
  {
      if ( GDALDereferenceDataset( ds ) <= 0 )
          GDALClose(ds);
      ds = NULL;
  }
  return (GDALDatasetShadow*) ds;
}


GDALDatasetShadow* Open( char const* name ) {
  return Open( name, GA_ReadOnly );
}


GDALDatasetShadow* OpenEx( char const* utf8_path, unsigned int nOpenFlags = 0,
                           char** allowed_drivers = NULL, char** open_options = NULL,
                           char** sibling_files = NULL ) {
  CPLErrorReset();
#ifdef SWIGPYTHON
  if( GetUseExceptions() )
      nOpenFlags |= GDAL_OF_VERBOSE_ERROR;
#endif
  GDALDatasetShadow *ds = GDALOpenEx( utf8_path, nOpenFlags, allowed_drivers,
                                      open_options, sibling_files );
#ifndef SWIGPYTHON
  if( ds != NULL && CPLGetLastErrorType() == CE_Failure )
  {
      if ( GDALDereferenceDataset( ds ) <= 0 )
          GDALClose(ds);
      ds = NULL;
  }
#endif
  return (GDALDatasetShadow*) ds;
}


GDALDatasetShadow* OpenShared( char const* utf8_path, GDALAccess eAccess = GA_ReadOnly ) {
  CPLErrorReset();
  GDALDatasetShadow *ds = GDALOpenShared( utf8_path, eAccess );
#ifndef SWIGPYTHON
  if( ds != NULL && CPLGetLastErrorType() == CE_Failure )
  {
      if ( GDALDereferenceDataset( ds ) <= 0 )
          GDALClose(ds);
      ds = NULL;
  }
#endif
  return (GDALDatasetShadow*) ds;
}


GDALDriverShadow *IdentifyDriver( const char *utf8_path,
                                  char **papszSiblings = NULL ) {
    return (GDALDriverShadow *) GDALIdentifyDriver( utf8_path,
	                                            papszSiblings );
}


GDALDriverShadow *IdentifyDriverEx( const char* utf8_path,
                                    unsigned int nIdentifyFlags = 0,
                                    char** allowed_drivers = NULL,
                                    char** sibling_files = NULL )
{
    return  (GDALDriverShadow *) GDALIdentifyDriverEx( utf8_path,
                                                nIdentifyFlags,
                                                allowed_drivers,
                                                sibling_files );
}


  static
  char **GeneralCmdLineProcessor( char **papszArgv, int nOptions = 0 ) {
    int nResArgCount;

    /* We must add a 'dummy' element in front of the real argument list */
    /* as Java doesn't include the binary name as the first */
    /* argument, as C does... */
    char** papszArgvModBefore = CSLInsertString(CSLDuplicate(papszArgv), 0, "dummy");
    char** papszArgvModAfter = papszArgvModBefore;

    nResArgCount =
      GDALGeneralCmdLineProcessor( CSLCount(papszArgvModBefore), &papszArgvModAfter, nOptions );

    CSLDestroy(papszArgvModBefore);

    if( nResArgCount <= 0 )
    {
        return NULL;
    }
    else
    {
        /* Now, remove the first dummy element */
        char** papszRet = CSLDuplicate(papszArgvModAfter + 1);
        CSLDestroy(papszArgvModAfter);
        return papszRet;
    }
  }


#include "gdal_utils.h"

SWIGINTERN GDALInfoOptions *new_GDALInfoOptions(char **options){
        return GDALInfoOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALInfoOptions(GDALInfoOptions *self){
        GDALInfoOptionsFree( self );
    }
SWIGINTERN GDALTranslateOptions *new_GDALTranslateOptions(char **options){
        return GDALTranslateOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALTranslateOptions(GDALTranslateOptions *self){
        GDALTranslateOptionsFree( self );
    }

GDALDatasetShadow* wrapper_GDALTranslate( const char* dest,
                                      GDALDatasetShadow* dataset,
                                      GDALTranslateOptions* translateOptions,
                                      GDALProgressFunc callback=NULL,
                                      void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( translateOptions == NULL )
        {
            bFreeOptions = true;
            translateOptions = GDALTranslateOptionsNew(NULL, NULL);
        }
        GDALTranslateOptionsSetProgress(translateOptions, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALTranslate(dest, dataset, translateOptions, &usageError);
    if( bFreeOptions )
        GDALTranslateOptionsFree(translateOptions);
    return hDSRet;
}

SWIGINTERN GDALWarpAppOptions *new_GDALWarpAppOptions(char **options){
        return GDALWarpAppOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALWarpAppOptions(GDALWarpAppOptions *self){
        GDALWarpAppOptionsFree( self );
    }

int wrapper_GDALWarpDestDS( GDALDatasetShadow* dstDS,
                            int object_list_count, GDALDatasetShadow** poObjects,
                            GDALWarpAppOptions* warpAppOptions,
                            GDALProgressFunc callback=NULL,
                            void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( warpAppOptions == NULL )
        {
            bFreeOptions = true;
            warpAppOptions = GDALWarpAppOptionsNew(NULL, NULL);
        }
        GDALWarpAppOptionsSetProgress(warpAppOptions, callback, callback_data);
    }
    int bRet = (GDALWarp(NULL, dstDS, object_list_count, poObjects, warpAppOptions, &usageError) != NULL);
    if( bFreeOptions )
        GDALWarpAppOptionsFree(warpAppOptions);
    return bRet;
}


GDALDatasetShadow* wrapper_GDALWarpDestName( const char* dest,
                                             int object_list_count, GDALDatasetShadow** poObjects,
                                             GDALWarpAppOptions* warpAppOptions,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( warpAppOptions == NULL )
        {
            bFreeOptions = true;
            warpAppOptions = GDALWarpAppOptionsNew(NULL, NULL);
        }
        GDALWarpAppOptionsSetProgress(warpAppOptions, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALWarp(dest, NULL, object_list_count, poObjects, warpAppOptions, &usageError);
    if( bFreeOptions )
        GDALWarpAppOptionsFree(warpAppOptions);
    return hDSRet;
}

SWIGINTERN GDALVectorTranslateOptions *new_GDALVectorTranslateOptions(char **options){
        return GDALVectorTranslateOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALVectorTranslateOptions(GDALVectorTranslateOptions *self){
        GDALVectorTranslateOptionsFree( self );
    }

int wrapper_GDALVectorTranslateDestDS( GDALDatasetShadow* dstDS,
                                       GDALDatasetShadow* srcDS,
                            GDALVectorTranslateOptions* options,
                            GDALProgressFunc callback=NULL,
                            void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALVectorTranslateOptionsNew(NULL, NULL);
        }
        GDALVectorTranslateOptionsSetProgress(options, callback, callback_data);
    }
    int bRet = (GDALVectorTranslate(NULL, dstDS, 1, &srcDS, options, &usageError) != NULL);
    if( bFreeOptions )
        GDALVectorTranslateOptionsFree(options);
    return bRet;
}


GDALDatasetShadow* wrapper_GDALVectorTranslateDestName( const char* dest,
                                             GDALDatasetShadow* srcDS,
                                             GDALVectorTranslateOptions* options,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALVectorTranslateOptionsNew(NULL, NULL);
        }
        GDALVectorTranslateOptionsSetProgress(options, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALVectorTranslate(dest, NULL, 1, &srcDS, options, &usageError);
    if( bFreeOptions )
        GDALVectorTranslateOptionsFree(options);
    return hDSRet;
}

SWIGINTERN GDALDEMProcessingOptions *new_GDALDEMProcessingOptions(char **options){
        return GDALDEMProcessingOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALDEMProcessingOptions(GDALDEMProcessingOptions *self){
        GDALDEMProcessingOptionsFree( self );
    }

GDALDatasetShadow* wrapper_GDALDEMProcessing( const char* dest,
                                      GDALDatasetShadow* dataset,
                                      const char* pszProcessing,
                                      const char* pszColorFilename,
                                      GDALDEMProcessingOptions* options,
                                      GDALProgressFunc callback=NULL,
                                      void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALDEMProcessingOptionsNew(NULL, NULL);
        }
        GDALDEMProcessingOptionsSetProgress(options, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALDEMProcessing(dest, dataset, pszProcessing, pszColorFilename, options, &usageError);
    if( bFreeOptions )
        GDALDEMProcessingOptionsFree(options);
    return hDSRet;
}

SWIGINTERN GDALNearblackOptions *new_GDALNearblackOptions(char **options){
        return GDALNearblackOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALNearblackOptions(GDALNearblackOptions *self){
        GDALNearblackOptionsFree( self );
    }

int wrapper_GDALNearblackDestDS( GDALDatasetShadow* dstDS,
                            GDALDatasetShadow* srcDS,
                            GDALNearblackOptions* options,
                            GDALProgressFunc callback=NULL,
                            void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALNearblackOptionsNew(NULL, NULL);
        }
        GDALNearblackOptionsSetProgress(options, callback, callback_data);
    }
    int bRet = (GDALNearblack(NULL, dstDS, srcDS, options, &usageError) != NULL);
    if( bFreeOptions )
        GDALNearblackOptionsFree(options);
    return bRet;
}


GDALDatasetShadow* wrapper_GDALNearblackDestName( const char* dest,
                                             GDALDatasetShadow* srcDS,
                                             GDALNearblackOptions* options,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALNearblackOptionsNew(NULL, NULL);
        }
        GDALNearblackOptionsSetProgress(options, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALNearblack(dest, NULL, srcDS, options, &usageError);
    if( bFreeOptions )
        GDALNearblackOptionsFree(options);
    return hDSRet;
}

SWIGINTERN GDALGridOptions *new_GDALGridOptions(char **options){
        return GDALGridOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALGridOptions(GDALGridOptions *self){
        GDALGridOptionsFree( self );
    }

GDALDatasetShadow* wrapper_GDALGrid( const char* dest,
                                      GDALDatasetShadow* dataset,
                                      GDALGridOptions* options,
                                      GDALProgressFunc callback=NULL,
                                      void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALGridOptionsNew(NULL, NULL);
        }
        GDALGridOptionsSetProgress(options, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALGrid(dest, dataset, options, &usageError);
    if( bFreeOptions )
        GDALGridOptionsFree(options);
    return hDSRet;
}

SWIGINTERN GDALRasterizeOptions *new_GDALRasterizeOptions(char **options){
        return GDALRasterizeOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALRasterizeOptions(GDALRasterizeOptions *self){
        GDALRasterizeOptionsFree( self );
    }

int wrapper_GDALRasterizeDestDS( GDALDatasetShadow* dstDS,
                            GDALDatasetShadow* srcDS,
                            GDALRasterizeOptions* options,
                            GDALProgressFunc callback=NULL,
                            void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALRasterizeOptionsNew(NULL, NULL);
        }
        GDALRasterizeOptionsSetProgress(options, callback, callback_data);
    }
    int bRet = (GDALRasterize(NULL, dstDS, srcDS, options, &usageError) != NULL);
    if( bFreeOptions )
        GDALRasterizeOptionsFree(options);
    return bRet;
}


GDALDatasetShadow* wrapper_GDALRasterizeDestName( const char* dest,
                                             GDALDatasetShadow* srcDS,
                                             GDALRasterizeOptions* options,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALRasterizeOptionsNew(NULL, NULL);
        }
        GDALRasterizeOptionsSetProgress(options, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALRasterize(dest, NULL, srcDS, options, &usageError);
    if( bFreeOptions )
        GDALRasterizeOptionsFree(options);
    return hDSRet;
}

SWIGINTERN GDALBuildVRTOptions *new_GDALBuildVRTOptions(char **options){
        return GDALBuildVRTOptionsNew(options, NULL);
    }
SWIGINTERN void delete_GDALBuildVRTOptions(GDALBuildVRTOptions *self){
        GDALBuildVRTOptionsFree( self );
    }

GDALDatasetShadow* wrapper_GDALBuildVRT_objects( const char* dest,
                                             int object_list_count, GDALDatasetShadow** poObjects,
                                             GDALBuildVRTOptions* options,
                                             GDALProgressFunc callback=NULL,
                                             void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALBuildVRTOptionsNew(NULL, NULL);
        }
        GDALBuildVRTOptionsSetProgress(options, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALBuildVRT(dest, object_list_count, poObjects, NULL, options, &usageError);
    if( bFreeOptions )
        GDALBuildVRTOptionsFree(options);
    return hDSRet;
}


GDALDatasetShadow* wrapper_GDALBuildVRT_names( const char* dest,
                                         char ** source_filenames,
                                         GDALBuildVRTOptions* options,
                                         GDALProgressFunc callback=NULL,
                                         void* callback_data=NULL)
{
    int usageError; /* ignored */
    bool bFreeOptions = false;
    if( callback )
    {
        if( options == NULL )
        {
            bFreeOptions = true;
            options = GDALBuildVRTOptionsNew(NULL, NULL);
        }
        GDALBuildVRTOptionsSetProgress(options, callback, callback_data);
    }
    GDALDatasetH hDSRet = GDALBuildVRT(dest, CSLCount(source_filenames), NULL, source_filenames, options, &usageError);
    if( bFreeOptions )
        GDALBuildVRTOptionsFree(options);
    return hDSRet;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_UseExceptions(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  UseExceptions();
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_DontUseExceptions(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DontUseExceptions();
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1ProgressCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ProgressCallback *arg1 = (ProgressCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ProgressCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ProgressCallback_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jstring jarg3) {
  jint jresult = 0 ;
  ProgressCallback *arg1 = (ProgressCallback *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ProgressCallback **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->run(arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1ProgressCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ProgressCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ProgressCallback *)new ProgressCallback();
  *(ProgressCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1TermProgressCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TermProgressCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TermProgressCallback *)new TermProgressCallback();
  *(TermProgressCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_TermProgressCallback_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jstring jarg3) {
  jint jresult = 0 ;
  TermProgressCallback *arg1 = (TermProgressCallback *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TermProgressCallback **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->run(arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1TermProgressCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TermProgressCallback *arg1 = (TermProgressCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TermProgressCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Debug(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  Debug((char const *)arg1,(char const *)arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_SetErrorHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (CPLErr)SetErrorHandler((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_SetErrorHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  result = (CPLErr)SetErrorHandler();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_PushErrorHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (CPLErr)PushErrorHandler((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_PushErrorHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  result = (CPLErr)PushErrorHandler();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Error(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3) {
  CPLErr arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (CPLErr)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  Error(arg1,arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GOA2GetAuthorizationURL(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (retStringAndCPLFree *)GOA2GetAuthorizationURL((char const *)arg1);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GOA2GetRefreshToken(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (retStringAndCPLFree *)GOA2GetRefreshToken((char const *)arg1,(char const *)arg2);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GOA2GetAccessToken(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (retStringAndCPLFree *)GOA2GetAccessToken((char const *)arg1,(char const *)arg2);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_PopErrorHandler(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  CPLPopErrorHandler();
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_ErrorReset(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  CPLErrorReset();
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_EscapeString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jbyteArray jarg1, jint jarg3) {
  jstring jresult = 0 ;
  int arg1 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) (int nLen, unsigned char *pBuf ) */
    arg1 = 0;
    arg2 = NULL;
    if (jarg1)
    {
      arg1 = jenv->GetArrayLength(jarg1);
      arg2 = (unsigned char *)jenv->GetByteArrayElements(jarg1, NULL);
    }
  }
  arg3 = (int)jarg3; 
  result = (retStringAndCPLFree *)EscapeString(arg1,arg2,arg3);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  {
    /* %typemap(argout) (int nLen, unsigned char *pBuf ) */
  }
  {
    /* %typemap(freearg) (int nLen, unsigned char *pBuf ) */
    /* This calls JNI_ABORT, so any modifications will not be passed back
          into the Java caller
       */
    if(arg2) {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_EscapeString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (retStringAndCPLFree *)EscapeString((char const *)arg1,arg2);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_GetLastErrorNo(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)CPLGetLastErrorNo();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_GetLastErrorType(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  result = (CPLErr)CPLGetLastErrorType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GetLastErrorMsg(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)CPLGetLastErrorMsg();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_GetErrorCounter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  result = (unsigned int)CPLGetErrorCounter();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_VSIGetLastErrorNo(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)VSIGetLastErrorNo();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_VSIGetLastErrorMsg(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)VSIGetLastErrorMsg();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_PushFinderLocation(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return ; 
      };
    }
  }
  CPLPushFinderLocation((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_PopFinderLocation(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  CPLPopFinderLocation();
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_FinderClean(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  CPLFinderClean();
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_FindFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (char *)CPLFindFile((char const *)arg1,(char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_ReadDir_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jobject jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (char **)wrapper_VSIReadDirEx((char const *)arg1,arg2);
  {
    /* %typemap(out) char **CSL -> vector of strings */
    char **stringarray = result;
    const jclass vector = jenv->FindClass("java/util/Vector");
    const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
    const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
    
    jresult = jenv->NewObject(vector, constructor);
    if ( stringarray != NULL ) {
      while(*stringarray != NULL) {
        /*printf("working on string %s\n", *stringarray);*/
        jstring value = (jstring)jenv->NewStringUTF(*stringarray);
        jenv->CallBooleanMethod(jresult, add, value);
        jenv->DeleteLocalRef(value);
        stringarray++;
      }
    }
    CSLDestroy(result);
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_ReadDir_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jobject jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (char **)wrapper_VSIReadDirEx((char const *)arg1);
  {
    /* %typemap(out) char **CSL -> vector of strings */
    char **stringarray = result;
    const jclass vector = jenv->FindClass("java/util/Vector");
    const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
    const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
    
    jresult = jenv->NewObject(vector, constructor);
    if ( stringarray != NULL ) {
      while(*stringarray != NULL) {
        /*printf("working on string %s\n", *stringarray);*/
        jstring value = (jstring)jenv->NewStringUTF(*stringarray);
        jenv->CallBooleanMethod(jresult, add, value);
        jenv->DeleteLocalRef(value);
        stringarray++;
      }
    }
    CSLDestroy(result);
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_ReadDirRecursive(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jobject jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (char **)VSIReadDirRecursive((char const *)arg1);
  {
    /* %typemap(out) char **CSL -> vector of strings */
    char **stringarray = result;
    const jclass vector = jenv->FindClass("java/util/Vector");
    const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
    const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
    
    jresult = jenv->NewObject(vector, constructor);
    if ( stringarray != NULL ) {
      while(*stringarray != NULL) {
        /*printf("working on string %s\n", *stringarray);*/
        jstring value = (jstring)jenv->NewStringUTF(*stringarray);
        jenv->CallBooleanMethod(jresult, add, value);
        jenv->DeleteLocalRef(value);
        stringarray++;
      }
    }
    CSLDestroy(result);
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_SetConfigOption(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return ; 
      };
    }
  }
  CPLSetConfigOption((char const *)arg1,(char const *)arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GetConfigOption_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (char *)wrapper_CPLGetConfigOption((char const *)arg1,(char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GetConfigOption_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (char *)wrapper_CPLGetConfigOption((char const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_CPLBinaryToHex(JNIEnv *jenv, jclass jcls, jbyteArray jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  GByte *arg2 = (GByte *) 0 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) (int nLen, unsigned char *pBuf ) */
    arg1 = 0;
    arg2 = NULL;
    if (jarg1)
    {
      arg1 = jenv->GetArrayLength(jarg1);
      arg2 = (unsigned char *)jenv->GetByteArrayElements(jarg1, NULL);
    }
  }
  result = (retStringAndCPLFree *)CPLBinaryToHex(arg1,(GByte const *)arg2);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  {
    /* %typemap(argout) (int nLen, unsigned char *pBuf ) */
  }
  {
    /* %typemap(freearg) (int nLen, unsigned char *pBuf ) */
    /* This calls JNI_ABORT, so any modifications will not be passed back
          into the Java caller
       */
    if(arg2) {
      jenv->ReleaseByteArrayElements(jarg1, (jbyte *)arg2, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_org_gdal_gdal_gdalJNI_CPLHexToBinary(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jbyteArray jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int nBytes1 ;
  GByte *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) (const char *pszHex, int *pnBytes) (int nBytes1) */
    if (jarg1)
    {
      arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    }
    else
    {
      SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0;
    }
    arg2 = &nBytes1;
  }
  result = (GByte *)CPLHexToBinary((char const *)arg1,arg2);
  {
    /* %typemap(out) (GByte* outBytes ) */
  }
  {
    /* %typemap(argout) (const char *pszHex, int *pnBytes) */
    if (jarg1)
    {
      jenv->ReleaseStringUTFChars(jarg1, (char*)arg1);
    }
    jresult = jenv->NewByteArray(nBytes1);
    jenv->SetByteArrayRegion(jresult, (jsize)0, (jsize)nBytes1, (jbyte*)result);
    CPLFree(result);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_FileFromMemBuffer(JNIEnv *jenv, jclass jcls, jstring jarg1, jbyteArray jarg2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  GByte *arg3 = (GByte *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  {
    /* %typemap(in) (int nLen, unsigned char *pBuf ) */
    arg2 = 0;
    arg3 = NULL;
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      arg3 = (unsigned char *)jenv->GetByteArrayElements(jarg2, NULL);
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return ; 
      };
    }
  }
  wrapper_VSIFileFromMemBuffer((char const *)arg1,arg2,(GByte const *)arg3);
  {
    /* %typemap(argout) (int nLen, unsigned char *pBuf ) */
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) (int nLen, unsigned char *pBuf ) */
    /* This calls JNI_ABORT, so any modifications will not be passed back
          into the Java caller
       */
    if(arg3) {
      jenv->ReleaseByteArrayElements(jarg2, (jbyte *)arg3, JNI_ABORT);
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Unlink(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  VSI_RETVAL result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = VSIUnlink((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_HasThreadSupport(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)wrapper_HasThreadSupport();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Mkdir(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  VSI_RETVAL result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = VSIMkdir((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Rmdir(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  VSI_RETVAL result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = VSIRmdir((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_MkdirRecursive(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  VSI_RETVAL result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = VSIMkdirRecursive((char const *)arg1,arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RmdirRecursive(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  VSI_RETVAL result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = VSIRmdirRecursive((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Rename(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  VSI_RETVAL result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = VSIRename((char const *)arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GetActualURL(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (char *)VSIGetActualURL((char const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GetSignedURL_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jobject jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    /* %typemap(in) char **options */
    arg2 = NULL;
    if(jarg2 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg2, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg2);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg2 = CSLAddString(arg2,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (retStringAndCPLFree *)wrapper_VSIGetSignedURL((char const *)arg1,arg2);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg2 );
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GetSignedURL_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (retStringAndCPLFree *)wrapper_VSIGetSignedURL((char const *)arg1);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_GetFileSystemsPrefixes(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char **)VSIGetFileSystemsPrefixes();
  {
    /* %typemap(out) char **CSL -> vector of strings */
    char **stringarray = result;
    const jclass vector = jenv->FindClass("java/util/Vector");
    const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
    const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
    
    jresult = jenv->NewObject(vector, constructor);
    if ( stringarray != NULL ) {
      while(*stringarray != NULL) {
        /*printf("working on string %s\n", *stringarray);*/
        jstring value = (jstring)jenv->NewStringUTF(*stringarray);
        jenv->CallBooleanMethod(jresult, add, value);
        jenv->DeleteLocalRef(value);
        stringarray++;
      }
    }
    CSLDestroy(result);
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GetFileSystemOptions(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (char *)VSIGetFileSystemOptions((char const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_ParseCommandLine(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jobject jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (char **)CSLParseCommandLine((char const *)arg1);
  {
    /* %typemap(out) char **CSL -> vector of strings */
    char **stringarray = result;
    const jclass vector = jenv->FindClass("java/util/Vector");
    const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
    const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
    
    jresult = jenv->NewObject(vector, constructor);
    if ( stringarray != NULL ) {
      while(*stringarray != NULL) {
        /*printf("working on string %s\n", *stringarray);*/
        jstring value = (jstring)jenv->NewStringUTF(*stringarray);
        jenv->CallBooleanMethod(jresult, add, value);
        jenv->DeleteLocalRef(value);
        stringarray++;
      }
    }
    CSLDestroy(result);
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_CXT_1Element_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CPLXMLNodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (CPLXMLNodeType)CXT_Element;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_CXT_1Text_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CPLXMLNodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (CPLXMLNodeType)CXT_Text;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_CXT_1Attribute_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CPLXMLNodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (CPLXMLNodeType)CXT_Attribute;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_CXT_1Comment_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CPLXMLNodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (CPLXMLNodeType)CXT_Comment;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_CXT_1Literal_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CPLXMLNodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (CPLXMLNodeType)CXT_Literal;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  CPLXMLNodeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  result = (CPLXMLNodeType) ((arg1)->eType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1Value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  result = (char *) ((arg1)->pszValue);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1Next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  CPLXMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  result = (CPLXMLNode *) ((arg1)->psNext);
  *(CPLXMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1Child_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  CPLXMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  result = (CPLXMLNode *) ((arg1)->psChild);
  *(CPLXMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1XMLNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  CPLXMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (CPLXMLNode *)new_CPLXMLNode__SWIG_0((char const *)arg1);
  *(CPLXMLNode **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1XMLNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  CPLXMLNodeType arg1 ;
  char *arg2 = (char *) 0 ;
  CPLXMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (CPLXMLNodeType)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (CPLXMLNode *)new_CPLXMLNode__SWIG_1(arg1,(char const *)arg2);
  *(CPLXMLNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1XMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CPLXMLNode **)&jarg1; 
  delete_CPLXMLNode(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1ParseXMLFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  CPLXMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLXMLNode *)CPLXMLNode_ParseXMLFile((char const *)arg1);
  *(CPLXMLNode **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1SerializeXMLTree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  result = (retStringAndCPLFree *)CPLXMLNode_SerializeXMLTree(arg1);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  result = (retStringAndCPLFree *)CPLXMLNode_toString(arg1);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1SearchXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  CPLXMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (CPLXMLNode *)CPLXMLNode_SearchXMLNode(arg1,(char const *)arg2);
  *(CPLXMLNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1GetXMLNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  CPLXMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (CPLXMLNode *)CPLXMLNode_GetXMLNode(arg1,(char const *)arg2);
  *(CPLXMLNode **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1GetXMLValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (char *)CPLXMLNode_GetXMLValue(arg1,(char const *)arg2,(char const *)arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1AddXMLChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  CPLXMLNode *arg2 = (CPLXMLNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  arg2 = *(CPLXMLNode **)&jarg2; 
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return ; 
      };
    }
  }
  CPLXMLNode_AddXMLChild(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1AddXMLSibling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  CPLXMLNode *arg2 = (CPLXMLNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  arg2 = *(CPLXMLNode **)&jarg2; 
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return ; 
      };
    }
  }
  CPLXMLNode_AddXMLSibling(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  CPLXMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  result = (CPLXMLNode *)CPLXMLNode_Clone(arg1);
  *(CPLXMLNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1SetXMLValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)CPLXMLNode_SetXMLValue(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_XMLNode_1StripXMLNamespace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  CPLXMLNode_StripXMLNamespace(arg1,(char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1GetDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  result = (char *)GDALMajorObjectShadow_GetDescription(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1SetDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return ; 
      };
    }
  }
  GDALMajorObjectShadow_SetDescription(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1GetMetadataDomainList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  result = (char **)GDALMajorObjectShadow_GetMetadataDomainList(arg1);
  {
    /* %typemap(out) char **CSL -> vector of strings */
    char **stringarray = result;
    const jclass vector = jenv->FindClass("java/util/Vector");
    const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
    const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
    
    jresult = jenv->NewObject(vector, constructor);
    if ( stringarray != NULL ) {
      while(*stringarray != NULL) {
        /*printf("working on string %s\n", *stringarray);*/
        jstring value = (jstring)jenv->NewStringUTF(*stringarray);
        jenv->CallBooleanMethod(jresult, add, value);
        jenv->DeleteLocalRef(value);
        stringarray++;
      }
    }
    CSLDestroy(result);
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1GetMetadata_1Dict_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jobject jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char **)GDALMajorObjectShadow_GetMetadata_Dict__SWIG_0(arg1,(char const *)arg2);
  {
    /* %typemap(out) char ** -> to hash */
    /* Convert a char array to a Hashtable */
    char **stringarray = result;
    const jclass hashtable = jenv->FindClass("java/util/Hashtable");
    const jmethodID constructor = jenv->GetMethodID(hashtable, "<init>", "()V");
    const jmethodID put = jenv->GetMethodID(hashtable, "put",
      "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    jresult = jenv->NewObject(hashtable, constructor);
    if ( stringarray != NULL ) {
      while (*stringarray != NULL ) {
        char const *valptr;
        char *keyptr;
        const char* pszSep = strchr( *stringarray, '=' );
        if ( pszSep != NULL) {
          keyptr = CPLStrdup(*stringarray);
          keyptr[pszSep - *stringarray] = '\0';
          valptr = pszSep + 1;
          jstring name = jenv->NewStringUTF(keyptr);
          jstring value = jenv->NewStringUTF(valptr);
          jenv->CallObjectMethod(jresult, put, name, value);
          jenv->DeleteLocalRef(name);
          jenv->DeleteLocalRef(value);
          CPLFree( keyptr );
        }
        stringarray++;
      }
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1GetMetadata_1Dict_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  result = (char **)GDALMajorObjectShadow_GetMetadata_Dict__SWIG_0(arg1);
  {
    /* %typemap(out) char ** -> to hash */
    /* Convert a char array to a Hashtable */
    char **stringarray = result;
    const jclass hashtable = jenv->FindClass("java/util/Hashtable");
    const jmethodID constructor = jenv->GetMethodID(hashtable, "<init>", "()V");
    const jmethodID put = jenv->GetMethodID(hashtable, "put",
      "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
    jresult = jenv->NewObject(hashtable, constructor);
    if ( stringarray != NULL ) {
      while (*stringarray != NULL ) {
        char const *valptr;
        char *keyptr;
        const char* pszSep = strchr( *stringarray, '=' );
        if ( pszSep != NULL) {
          keyptr = CPLStrdup(*stringarray);
          keyptr[pszSep - *stringarray] = '\0';
          valptr = pszSep + 1;
          jstring name = jenv->NewStringUTF(keyptr);
          jstring value = jenv->NewStringUTF(valptr);
          jenv->CallObjectMethod(jresult, put, name, value);
          jenv->DeleteLocalRef(name);
          jenv->DeleteLocalRef(value);
          CPLFree( keyptr );
        }
        stringarray++;
      }
    }
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1GetMetadata_1List_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jobject jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char **)GDALMajorObjectShadow_GetMetadata_List__SWIG_0(arg1,(char const *)arg2);
  {
    /* %typemap(out) char ** -> Vector */
    char **stringarray = result;
    const jclass vector = jenv->FindClass("java/util/Vector");
    const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
    const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
    
    jresult = jenv->NewObject(vector, constructor);
    if ( stringarray != NULL ) {
      while(*stringarray != NULL) {
        /*printf("working on string %s\n", *stringarray);*/
        jstring value = (jstring)jenv->NewStringUTF(*stringarray);
        jenv->CallBooleanMethod(jresult, add, value);
        jenv->DeleteLocalRef(value);
        stringarray++;
      }
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1GetMetadata_1List_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  result = (char **)GDALMajorObjectShadow_GetMetadata_List__SWIG_0(arg1);
  {
    /* %typemap(out) char ** -> Vector */
    char **stringarray = result;
    const jclass vector = jenv->FindClass("java/util/Vector");
    const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
    const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
    
    jresult = jenv->NewObject(vector, constructor);
    if ( stringarray != NULL ) {
      while(*stringarray != NULL) {
        /*printf("working on string %s\n", *stringarray);*/
        jstring value = (jstring)jenv->NewStringUTF(*stringarray);
        jenv->CallBooleanMethod(jresult, add, value);
        jenv->DeleteLocalRef(value);
        stringarray++;
      }
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1SetMetadata_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jstring jarg3) {
  jint jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char **arg2 = (char **) 0 ;
  char *arg3 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  {
    /* %typemap(in) char **options */
    arg2 = NULL;
    if(jarg2 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg2, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg2);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg2 = CSLAddString(arg2,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (CPLErr)GDALMajorObjectShadow_SetMetadata__SWIG_0(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg2 );
  }
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1SetMetadata_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char **arg2 = (char **) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  {
    /* %typemap(in) char **options */
    arg2 = NULL;
    if(jarg2 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg2, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg2);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg2 = CSLAddString(arg2,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (CPLErr)GDALMajorObjectShadow_SetMetadata__SWIG_0(arg1,arg2);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg2 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1SetMetadata_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (CPLErr)GDALMajorObjectShadow_SetMetadata__SWIG_2(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1SetMetadata_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (CPLErr)GDALMajorObjectShadow_SetMetadata__SWIG_2(arg1,arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1GetMetadataItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (char *)GDALMajorObjectShadow_GetMetadataItem__SWIG_0(arg1,(char const *)arg2,(char const *)arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1GetMetadataItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (char *)GDALMajorObjectShadow_GetMetadataItem__SWIG_0(arg1,(char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1SetMetadataItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)GDALMajorObjectShadow_SetMetadataItem__SWIG_0(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_MajorObject_1SetMetadataItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  GDALMajorObjectShadow *arg1 = (GDALMajorObjectShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALMajorObjectShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)GDALMajorObjectShadow_SetMetadataItem__SWIG_0(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1ShortName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  result = (char *)GDALDriverShadow_ShortName_get(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1LongName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  result = (char *)GDALDriverShadow_LongName_get(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1HelpTopic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  result = (char *)GDALDriverShadow_HelpTopic_get(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1Create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jobject jarg7) {
  jlong jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  GDALDataType arg6 ;
  char **arg7 = (char **) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (GDALDataType)jarg6; 
  {
    /* %typemap(in) char **options */
    arg7 = NULL;
    if(jarg7 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg7, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg7);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg7 = CSLAddString(arg7,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)GDALDriverShadow_Create__SWIG_0(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg7 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1Create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  GDALDataType arg6 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (GDALDataType)jarg6; 
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)GDALDriverShadow_Create__SWIG_0(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1Create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)GDALDriverShadow_Create__SWIG_0(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1Create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)GDALDriverShadow_Create__SWIG_0(arg1,(char const *)arg2,arg3,arg4);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1CreateCopy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jobject jarg5, jobject jarg6) {
  jlong jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  GDALDatasetShadow *arg3 = (GDALDatasetShadow *) 0 ;
  int arg4 ;
  char **arg5 = (char **) 0 ;
  GDALProgressFunc arg6 ;
  void *arg7 = (void *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(GDALDatasetShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  {
    /* %typemap(in) char **options */
    arg5 = NULL;
    if(jarg5 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg5, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg5);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg5 = CSLAddString(arg5,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if ( jarg6 != 0 ) {
      sProgressInfo.pJavaCallback = jarg6;
      arg6 = JavaProgressProxy;
      arg7 = &sProgressInfo;
    }
    else
    {
      arg6 = NULL;
      arg7 = NULL;
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)GDALDriverShadow_CreateCopy__SWIG_0(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1CreateCopy_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jobject jarg5) {
  jlong jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  GDALDatasetShadow *arg3 = (GDALDatasetShadow *) 0 ;
  int arg4 ;
  char **arg5 = (char **) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(GDALDatasetShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  {
    /* %typemap(in) char **options */
    arg5 = NULL;
    if(jarg5 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg5, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg5);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg5 = CSLAddString(arg5,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)GDALDriverShadow_CreateCopy__SWIG_0(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1CreateCopy_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  GDALDatasetShadow *arg3 = (GDALDatasetShadow *) 0 ;
  int arg4 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(GDALDatasetShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)GDALDriverShadow_CreateCopy__SWIG_0(arg1,(char const *)arg2,arg3,arg4);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1CreateCopy_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  GDALDatasetShadow *arg3 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(GDALDatasetShadow **)&jarg3; 
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)GDALDriverShadow_CreateCopy__SWIG_0(arg1,(char const *)arg2,arg3);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1Delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)GDALDriverShadow_Delete(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1Rename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)GDALDriverShadow_Rename(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1CopyFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)GDALDriverShadow_CopyFiles(arg1,(char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1Register(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  result = (int)GDALDriverShadow_Register(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1Deregister(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GDALDriverShadow *arg1 = (GDALDriverShadow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDriverShadow **)&jarg1; 
  GDALDriverShadow_Deregister(arg1);
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1GCPX_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = (double)jarg2; 
  GDAL_GCP_GCPX_set(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1GCPX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  result = (double)GDAL_GCP_GCPX_get(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1GCPY_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = (double)jarg2; 
  GDAL_GCP_GCPY_set(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1GCPY_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  result = (double)GDAL_GCP_GCPY_get(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1GCPZ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = (double)jarg2; 
  GDAL_GCP_GCPZ_set(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1GCPZ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  result = (double)GDAL_GCP_GCPZ_get(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1GCPPixel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = (double)jarg2; 
  GDAL_GCP_GCPPixel_set(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1GCPPixel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  result = (double)GDAL_GCP_GCPPixel_get(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1GCPLine_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = (double)jarg2; 
  GDAL_GCP_GCPLine_set(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1GCPLine_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  result = (double)GDAL_GCP_GCPLine_get(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1Info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  GDAL_GCP_Info_set(arg1,arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1Info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  result = (char *)GDAL_GCP_Info_get(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1Id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  GDAL_GCP_Id_set(arg1,arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GCP_1Id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  result = (char *)GDAL_GCP_Id_get(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1GCP(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jstring jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  GDAL_GCP *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (GDAL_GCP *)new_GDAL_GCP(arg1,arg2,arg3,arg4,arg5,(char const *)arg6,(char const *)arg7);
  *(GDAL_GCP **)&jresult = result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1GCP(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDAL_GCP **)&jarg1; 
  delete_GDAL_GCP(arg1);
}


SWIGEXPORT jdouble JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1GCPX_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (double)GDAL_GCP_GCPX_get(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1GCPX_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return ; 
      };
    }
  }
  GDAL_GCP_GCPX_set(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1GCPY_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (double)GDAL_GCP_GCPY_get(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1GCPY_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return ; 
      };
    }
  }
  GDAL_GCP_GCPY_set(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1GCPZ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (double)GDAL_GCP_GCPZ_get(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1GCPZ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return ; 
      };
    }
  }
  GDAL_GCP_GCPZ_set(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1GCPPixel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (double)GDAL_GCP_GCPPixel_get(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1GCPPixel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return ; 
      };
    }
  }
  GDAL_GCP_GCPPixel_set(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1GCPLine_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (double)GDAL_GCP_GCPLine_get(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1GCPLine_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return ; 
      };
    }
  }
  GDAL_GCP_GCPLine_set(arg1,arg2);
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1Info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (char *)GDAL_GCP_Info_get(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1Info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return ; 
      };
    }
  }
  GDAL_GCP_Info_set(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1Id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (char *)GDAL_GCP_Id_get(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GDAL_1GCP_1Id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  GDAL_GCP *arg1 = (GDAL_GCP *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDAL_GCP **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return ; 
      };
    }
  }
  GDAL_GCP_Id_set(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_GCPsToGeoTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jdoubleArray jarg3, jint jarg4) {
  jint jresult = 0 ;
  int arg1 ;
  GDAL_GCP *arg2 = (GDAL_GCP *) 0 ;
  double *arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in, numinputs=1) (int nGCPs, GDAL_GCP const * pGCPs) */
    if (jarg1)
    {
      arg1 = jenv->GetArrayLength(jarg1);
      if (arg1 == 0)
      arg2 = NULL;
      else
      {
        arg2 = (GDAL_GCP*) malloc(sizeof(GDAL_GCP) * arg1);
        int i;
        for (i = 0; i<arg1; i++) {
          jobject obj = (jobject)jenv->GetObjectArrayElement(jarg1, i);
          if (obj == NULL)
          {
            free (arg2 );
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
            return 0;
          }
          const jclass klass = jenv->FindClass("org/gdal/gdal/GCP");
          const jmethodID getCPtr = jenv->GetStaticMethodID(klass, "getCPtr", "(Lorg/gdal/gdal/GCP;)J");
          arg2[i] = *(GDAL_GCP*) jenv->CallStaticLongMethod(klass, getCPtr, obj);
        }
      }
    }
    else
    {
      arg1 = 0;
      arg2 = NULL;
    }
  }
  {
    /* %typemap(in) (double argout[ANY]) */
    if(jarg3 == NULL || jenv->GetArrayLength(jarg3) != 6) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 6);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return 0;
    }
    arg3 = (double *)jenv->GetDoubleArrayElements(jarg3, NULL);
  }
  arg4 = (int)jarg4; 
  result = (int)wrapper_GDALGCPsToGeoTransform(arg1,(GDAL_GCP const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (double argout[ANY]) */
  }
  {
    /* %typemap(freearg) (int nGCPs, GDAL_GCP const * pGCPs) */
    if (arg2) {
      free((void*) arg2);
    }
  }
  {
    /* %typemap(freearg) (double argout[ANY]) */
    jenv->ReleaseDoubleArrayElements(jarg3, (jdouble *)arg3, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_GCPsToGeoTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobjectArray jarg1, jdoubleArray jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  GDAL_GCP *arg2 = (GDAL_GCP *) 0 ;
  double *arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in, numinputs=1) (int nGCPs, GDAL_GCP const * pGCPs) */
    if (jarg1)
    {
      arg1 = jenv->GetArrayLength(jarg1);
      if (arg1 == 0)
      arg2 = NULL;
      else
      {
        arg2 = (GDAL_GCP*) malloc(sizeof(GDAL_GCP) * arg1);
        int i;
        for (i = 0; i<arg1; i++) {
          jobject obj = (jobject)jenv->GetObjectArrayElement(jarg1, i);
          if (obj == NULL)
          {
            free (arg2 );
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
            return 0;
          }
          const jclass klass = jenv->FindClass("org/gdal/gdal/GCP");
          const jmethodID getCPtr = jenv->GetStaticMethodID(klass, "getCPtr", "(Lorg/gdal/gdal/GCP;)J");
          arg2[i] = *(GDAL_GCP*) jenv->CallStaticLongMethod(klass, getCPtr, obj);
        }
      }
    }
    else
    {
      arg1 = 0;
      arg2 = NULL;
    }
  }
  {
    /* %typemap(in) (double argout[ANY]) */
    if(jarg3 == NULL || jenv->GetArrayLength(jarg3) != 6) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 6);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return 0;
    }
    arg3 = (double *)jenv->GetDoubleArrayElements(jarg3, NULL);
  }
  result = (int)wrapper_GDALGCPsToGeoTransform(arg1,(GDAL_GCP const *)arg2,arg3);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (double argout[ANY]) */
  }
  {
    /* %typemap(freearg) (int nGCPs, GDAL_GCP const * pGCPs) */
    if (arg2) {
      free((void*) arg2);
    }
  }
  {
    /* %typemap(freearg) (double argout[ANY]) */
    jenv->ReleaseDoubleArrayElements(jarg3, (jdouble *)arg3, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1RasterXSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (int)GDALDatasetShadow_RasterXSize_get(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1RasterYSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (int)GDALDatasetShadow_RasterYSize_get(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1RasterCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (int)GDALDatasetShadow_RasterCount_get(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1Dataset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  delete_GDALDatasetShadow(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetDriver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDriverShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (GDALDriverShadow *)GDALDatasetShadow_GetDriver(arg1);
  *(GDALDriverShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetRasterBand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  GDALRasterBandShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (GDALRasterBandShadow *)GDALDatasetShadow_GetRasterBand(arg1,arg2);
  *(GDALRasterBandShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetProjection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (char *)GDALDatasetShadow_GetProjection(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetProjectionRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (char *)GDALDatasetShadow_GetProjectionRef(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1SetProjection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)GDALDatasetShadow_SetProjection(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetGeoTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  {
    /* %typemap(in) (double argout[ANY]) */
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) != 6) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 6);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return ;
    }
    arg2 = (double *)jenv->GetDoubleArrayElements(jarg2, NULL);
  }
  GDALDatasetShadow_GetGeoTransform(arg1,arg2);
  {
    /* %typemap(argout) (double argout[ANY]) */
  }
  {
    /* %typemap(freearg) (double argout[ANY]) */
    jenv->ReleaseDoubleArrayElements(jarg2, (jdouble *)arg2, 0);
  }
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1SetGeoTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  double *arg2 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  {
    /* %typemap(in) (double argin[ANY]) */
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) != 6) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 6);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return 0;
    }
    arg2 = (double *)jenv->GetDoubleArrayElements(jarg2, NULL);
  }
  result = (CPLErr)GDALDatasetShadow_SetGeoTransform(arg1,arg2);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (double argin[ANY]) */
  }
  {
    /* %typemap(in) (double argin[ANY]) */
    if(arg2) {
      jenv->ReleaseDoubleArrayElements(jarg2, (jdouble *)arg2, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1BuildOverviews_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jintArray jarg3, jobject jarg5) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  GDALProgressFunc arg5 ;
  void *arg6 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  {
    /* %typemap(in) (const char* stringWithDefaultValue) */
    if (jarg2)
    {
      arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg3)
    {
      arg3 = jenv->GetArrayLength(jarg3);
      if (arg3 == 0)
      arg4 = NULL;
      else
      arg4 = (int *)jenv->GetIntArrayElements(jarg3, NULL);
    }
    else
    {
      arg3 = 0;
      arg4 = NULL;
    }
  }
  {
    if ( jarg5 != 0 ) {
      sProgressInfo.pJavaCallback = jarg5;
      arg5 = JavaProgressProxy;
      arg6 = &sProgressInfo;
    }
    else
    {
      arg5 = NULL;
      arg6 = NULL;
    }
  }
  result = (int)GDALDatasetShadow_BuildOverviews__SWIG_0(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (const char* stringWithDefaultValue) */
    if (jarg2)
    {
      jenv->ReleaseStringUTFChars(jarg2, (char*)arg2);
    }
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg4) {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg4, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1BuildOverviews_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jintArray jarg3) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  {
    /* %typemap(in) (const char* stringWithDefaultValue) */
    if (jarg2)
    {
      arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg3)
    {
      arg3 = jenv->GetArrayLength(jarg3);
      if (arg3 == 0)
      arg4 = NULL;
      else
      arg4 = (int *)jenv->GetIntArrayElements(jarg3, NULL);
    }
    else
    {
      arg3 = 0;
      arg4 = NULL;
    }
  }
  result = (int)GDALDatasetShadow_BuildOverviews__SWIG_0(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (const char* stringWithDefaultValue) */
    if (jarg2)
    {
      jenv->ReleaseStringUTFChars(jarg2, (char*)arg2);
    }
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg4) {
      jenv->ReleaseIntArrayElements(jarg3, (jint*)arg4, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetGCPCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (int)GDALDatasetShadow_GetGCPCount(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetGCPProjection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (char *)GDALDatasetShadow_GetGCPProjection(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetGCPs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int *arg2 = (int *) 0 ;
  GDAL_GCP **arg3 = (GDAL_GCP **) 0 ;
  int nGCPs2 = 0 ;
  GDAL_GCP *pGCPs2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  {
    /* %typemap(in,numinputs=1) (int *nGCPs2, GDAL_GCP const **pGCPs2 ) */
    arg2 = &nGCPs2;
    arg3 = &pGCPs2;
  }
  GDALDatasetShadow_GetGCPs(arg1,arg2,(GDAL_GCP const **)arg3);
  {
    /* %typemap(argout) (int *nGCPs, GDAL_GCP const **pGCPs ) */
    const jclass GCPClass = jenv->FindClass("org/gdal/gdal/GCP");
    const jclass vectorClass = jenv->FindClass("java/util/Vector");
    const jmethodID add = jenv->GetMethodID(vectorClass, "add", "(Ljava/lang/Object;)Z");
    const jmethodID GCPcon = jenv->GetMethodID(GCPClass, "<init>",
      "(DDDDDLjava/lang/String;Ljava/lang/String;)V");
    
    for( int i = 0; i < *arg2; i++ ) {
      jstring stringInfo = jenv->NewStringUTF((*arg3)[i].pszInfo);
      jstring stringId = jenv->NewStringUTF((*arg3)[i].pszId);
      jobject GCPobj = jenv->NewObject(GCPClass, GCPcon,
        (*arg3)[i].dfGCPX,
        (*arg3)[i].dfGCPY,
        (*arg3)[i].dfGCPZ,
        (*arg3)[i].dfGCPPixel,
        (*arg3)[i].dfGCPLine,
        stringInfo,
        stringId);
      jenv->DeleteLocalRef(stringInfo);
      jenv->DeleteLocalRef(stringId);
      jenv->CallBooleanMethod(jarg2, add, GCPobj);
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1SetGCPs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jstring jarg4) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  GDAL_GCP *arg3 = (GDAL_GCP *) 0 ;
  char *arg4 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  {
    /* %typemap(in, numinputs=1) (int nGCPs, GDAL_GCP const * pGCPs) */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      {
        arg3 = (GDAL_GCP*) malloc(sizeof(GDAL_GCP) * arg2);
        int i;
        for (i = 0; i<arg2; i++) {
          jobject obj = (jobject)jenv->GetObjectArrayElement(jarg2, i);
          if (obj == NULL)
          {
            free (arg3 );
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
            return 0;
          }
          const jclass klass = jenv->FindClass("org/gdal/gdal/GCP");
          const jmethodID getCPtr = jenv->GetStaticMethodID(klass, "getCPtr", "(Lorg/gdal/gdal/GCP;)J");
          arg3[i] = *(GDAL_GCP*) jenv->CallStaticLongMethod(klass, getCPtr, obj);
        }
      }
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (CPLErr)GDALDatasetShadow_SetGCPs(arg1,arg2,(GDAL_GCP const *)arg3,(char const *)arg4);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (int nGCPs, GDAL_GCP const * pGCPs) */
    if (arg3) {
      free((void*) arg3);
    }
  }
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1FlushCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  GDALDatasetShadow_FlushCache(arg1);
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1AddBand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDataType arg2 ;
  char **arg3 = (char **) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (GDALDataType)jarg2; 
  {
    /* %typemap(in) char **options */
    arg3 = NULL;
    if(jarg3 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg3, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg3);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg3 = CSLAddString(arg3,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (CPLErr)GDALDatasetShadow_AddBand__SWIG_0(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1AddBand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDataType arg2 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (GDALDataType)jarg2; 
  result = (CPLErr)GDALDatasetShadow_AddBand__SWIG_0(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1AddBand_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (CPLErr)GDALDatasetShadow_AddBand__SWIG_0(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1CreateMaskBand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (CPLErr)GDALDatasetShadow_CreateMaskBand(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetFileList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (char **)GDALDatasetShadow_GetFileList(arg1);
  {
    /* %typemap(out) char **CSL -> vector of strings */
    char **stringarray = result;
    const jclass vector = jenv->FindClass("java/util/Vector");
    const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
    const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
    
    jresult = jenv->NewObject(vector, constructor);
    if ( stringarray != NULL ) {
      while(*stringarray != NULL) {
        /*printf("working on string %s\n", *stringarray);*/
        jstring value = (jstring)jenv->NewStringUTF(*stringarray);
        jenv->CallBooleanMethod(jresult, add, value);
        jenv->DeleteLocalRef(value);
        stringarray++;
      }
    }
    CSLDestroy(result);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1AdviseRead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jintArray jarg9, jobject jarg11) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  GDALDataType *arg8 = (GDALDataType *) 0 ;
  int arg9 ;
  int *arg10 = (int *) 0 ;
  char **arg11 = (char **) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = *(GDALDataType **)&jarg8; 
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg9)
    {
      arg9 = jenv->GetArrayLength(jarg9);
      if (arg9 == 0)
      arg10 = NULL;
      else
      arg10 = (int *)jenv->GetIntArrayElements(jarg9, NULL);
    }
    else
    {
      arg9 = 0;
      arg10 = NULL;
    }
  }
  {
    /* %typemap(in) char **options */
    arg11 = NULL;
    if(jarg11 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg11, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg11);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg11 = CSLAddString(arg11,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (CPLErr)GDALDatasetShadow_AdviseRead__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg10) {
      jenv->ReleaseIntArrayElements(jarg9, (jint*)arg10, JNI_ABORT);
    }
  }
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg11 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1AdviseRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jintArray jarg9) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  GDALDataType *arg8 = (GDALDataType *) 0 ;
  int arg9 ;
  int *arg10 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = *(GDALDataType **)&jarg8; 
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg9)
    {
      arg9 = jenv->GetArrayLength(jarg9);
      if (arg9 == 0)
      arg10 = NULL;
      else
      arg10 = (int *)jenv->GetIntArrayElements(jarg9, NULL);
    }
    else
    {
      arg9 = 0;
      arg10 = NULL;
    }
  }
  result = (CPLErr)GDALDatasetShadow_AdviseRead__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg10) {
      jenv->ReleaseIntArrayElements(jarg9, (jint*)arg10, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1AdviseRead_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  GDALDataType *arg8 = (GDALDataType *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = *(GDALDataType **)&jarg8; 
  result = (CPLErr)GDALDatasetShadow_AdviseRead__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1AdviseRead_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(int **)&jarg7; 
  result = (CPLErr)GDALDatasetShadow_AdviseRead__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1AdviseRead_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(int **)&jarg6; 
  result = (CPLErr)GDALDatasetShadow_AdviseRead__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1AdviseRead_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (CPLErr)GDALDatasetShadow_AdviseRead__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1CreateLayer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4, jobject jarg5) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OSRSpatialReferenceShadow *arg3 = (OSRSpatialReferenceShadow *) 0 ;
  OGRwkbGeometryType arg4 ;
  char **arg5 = (char **) 0 ;
  OGRLayerShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(OSRSpatialReferenceShadow **)&jarg3; 
  arg4 = (OGRwkbGeometryType)jarg4; 
  {
    /* %typemap(in) char **options */
    arg5 = NULL;
    if(jarg5 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg5, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg5);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg5 = CSLAddString(arg5,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (OGRLayerShadow *)GDALDatasetShadow_CreateLayer__SWIG_0(arg1,(char const *)arg2,arg3,arg4,arg5);
  *(OGRLayerShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1CreateLayer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OSRSpatialReferenceShadow *arg3 = (OSRSpatialReferenceShadow *) 0 ;
  OGRwkbGeometryType arg4 ;
  OGRLayerShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(OSRSpatialReferenceShadow **)&jarg3; 
  arg4 = (OGRwkbGeometryType)jarg4; 
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (OGRLayerShadow *)GDALDatasetShadow_CreateLayer__SWIG_0(arg1,(char const *)arg2,arg3,arg4);
  *(OGRLayerShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1CreateLayer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OSRSpatialReferenceShadow *arg3 = (OSRSpatialReferenceShadow *) 0 ;
  OGRLayerShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(OSRSpatialReferenceShadow **)&jarg3; 
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (OGRLayerShadow *)GDALDatasetShadow_CreateLayer__SWIG_0(arg1,(char const *)arg2,arg3);
  *(OGRLayerShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1CreateLayer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRLayerShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (OGRLayerShadow *)GDALDatasetShadow_CreateLayer__SWIG_0(arg1,(char const *)arg2);
  *(OGRLayerShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1CopyLayer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jobject jarg4) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  char **arg4 = (char **) 0 ;
  OGRLayerShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(OGRLayerShadow **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    /* %typemap(in) char **options */
    arg4 = NULL;
    if(jarg4 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg4, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg4);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg4 = CSLAddString(arg4,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (OGRLayerShadow *)GDALDatasetShadow_CopyLayer__SWIG_0(arg1,arg2,(char const *)arg3,arg4);
  *(OGRLayerShadow **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg4 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1CopyLayer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  OGRLayerShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(OGRLayerShadow **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (OGRLayerShadow *)GDALDatasetShadow_CopyLayer__SWIG_0(arg1,arg2,(char const *)arg3);
  *(OGRLayerShadow **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1DeleteLayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  OGRErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OGRErr)GDALDatasetShadow_DeleteLayer(arg1,arg2);
  {
    /* %typemap(out) OGRErr */
    if (result != 0 && bUseExceptions) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        OGRErrMessages(result));
      return 0;
    }
    jresult = (jint)result;
  }
  {
    /* %typemap(ret) OGRErr */
    
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetLayerCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (int)GDALDatasetShadow_GetLayerCount(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetLayerByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  OGRLayerShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OGRLayerShadow *)GDALDatasetShadow_GetLayerByIndex(arg1,arg2);
  *(OGRLayerShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetLayerByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRLayerShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (OGRLayerShadow *)GDALDatasetShadow_GetLayerByName(arg1,(char const *)arg2);
  *(OGRLayerShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ResetReading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  GDALDatasetShadow_ResetReading(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetNextFeature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRFeatureShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (OGRFeatureShadow *)GDALDatasetShadow_GetNextFeature(arg1);
  *(OGRFeatureShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1TestCapability(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)GDALDatasetShadow_TestCapability(arg1,(char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ExecuteSQL_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRGeometryShadow *arg3 = (OGRGeometryShadow *) 0 ;
  char *arg4 = (char *) 0 ;
  OGRLayerShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(OGRGeometryShadow **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (OGRLayerShadow *)GDALDatasetShadow_ExecuteSQL__SWIG_0(arg1,(char const *)arg2,arg3,(char const *)arg4);
  *(OGRLayerShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ExecuteSQL_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRGeometryShadow *arg3 = (OGRGeometryShadow *) 0 ;
  OGRLayerShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(OGRGeometryShadow **)&jarg3; 
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (OGRLayerShadow *)GDALDatasetShadow_ExecuteSQL__SWIG_0(arg1,(char const *)arg2,arg3);
  *(OGRLayerShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ExecuteSQL_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  OGRLayerShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (OGRLayerShadow *)GDALDatasetShadow_ExecuteSQL__SWIG_0(arg1,(char const *)arg2);
  *(OGRLayerShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReleaseResultSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRLayerShadow *arg2 = (OGRLayerShadow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(OGRLayerShadow **)&jarg2; 
  GDALDatasetShadow_ReleaseResultSet(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1GetStyleTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRStyleTableShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (OGRStyleTableShadow *)GDALDatasetShadow_GetStyleTable(arg1);
  *(OGRStyleTableShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1SetStyleTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRStyleTableShadow *arg2 = (OGRStyleTableShadow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(OGRStyleTableShadow **)&jarg2; 
  GDALDatasetShadow_SetStyleTable(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1StartTransaction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  OGRErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (OGRErr)GDALDatasetShadow_StartTransaction__SWIG_0(arg1,arg2);
  {
    /* %typemap(out) OGRErr */
    if (result != 0 && bUseExceptions) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        OGRErrMessages(result));
      return 0;
    }
    jresult = (jint)result;
  }
  {
    /* %typemap(ret) OGRErr */
    
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1StartTransaction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (OGRErr)GDALDatasetShadow_StartTransaction__SWIG_0(arg1);
  {
    /* %typemap(out) OGRErr */
    if (result != 0 && bUseExceptions) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        OGRErrMessages(result));
      return 0;
    }
    jresult = (jint)result;
  }
  {
    /* %typemap(ret) OGRErr */
    
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1CommitTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (OGRErr)GDALDatasetShadow_CommitTransaction(arg1);
  {
    /* %typemap(out) OGRErr */
    if (result != 0 && bUseExceptions) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        OGRErrMessages(result));
      return 0;
    }
    jresult = (jint)result;
  }
  {
    /* %typemap(ret) OGRErr */
    
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1RollbackTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  OGRErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  result = (OGRErr)GDALDatasetShadow_RollbackTransaction(arg1);
  {
    /* %typemap(out) OGRErr */
    if (result != 0 && bUseExceptions) {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        OGRErrMessages(result));
      return 0;
    }
    jresult = (jint)result;
  }
  {
    /* %typemap(ret) OGRErr */
    
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1Direct_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9, jintArray jarg11, jint jarg13, jint jarg14, jint jarg15) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1Direct_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9, jintArray jarg11, jint jarg13, jint jarg14) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1Direct_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9, jintArray jarg11, jint jarg13) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1Direct_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9, jintArray jarg11) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  result = (CPLErr)GDALDatasetShadow_ReadRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9, jintArray jarg11, jint jarg13, jint jarg14, jint jarg15) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) malloc(arg10);
    //arg9 = (char*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (char *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetByteArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jbyte*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9, jintArray jarg11, jint jarg13, jint jarg14) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) malloc(arg10);
    //arg9 = (char*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (char *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetByteArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jbyte*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9, jintArray jarg11, jint jarg13) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) malloc(arg10);
    //arg9 = (char*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (char *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetByteArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jbyte*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9, jintArray jarg11) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) malloc(arg10);
    //arg9 = (char*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (char *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetByteArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jbyte*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9, jintArray jarg11, jint jarg13, jint jarg14, jint jarg15) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) malloc(arg10);
    //arg9 = (short*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (short *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetShortArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jshort*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9, jintArray jarg11, jint jarg13, jint jarg14) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) malloc(arg10);
    //arg9 = (short*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (short *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetShortArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jshort*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9, jintArray jarg11, jint jarg13) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) malloc(arg10);
    //arg9 = (short*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (short *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetShortArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jshort*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9, jintArray jarg11) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) malloc(arg10);
    //arg9 = (short*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (short *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetShortArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jshort*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9, jintArray jarg11, jint jarg13, jint jarg14, jint jarg15) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) malloc(arg10);
    //arg9 = (int*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_8(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetIntArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jint*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9, jintArray jarg11, jint jarg13, jint jarg14) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) malloc(arg10);
    //arg9 = (int*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_8(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetIntArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jint*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9, jintArray jarg11, jint jarg13) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) malloc(arg10);
    //arg9 = (int*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_8(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetIntArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jint*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9, jintArray jarg11) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) malloc(arg10);
    //arg9 = (int*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_8(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetIntArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jint*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9, jintArray jarg11, jint jarg13, jint jarg14, jint jarg15) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) malloc(arg10);
    //arg9 = (float*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (float *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetFloatArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jfloat*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9, jintArray jarg11, jint jarg13, jint jarg14) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) malloc(arg10);
    //arg9 = (float*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (float *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetFloatArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jfloat*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9, jintArray jarg11, jint jarg13) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) malloc(arg10);
    //arg9 = (float*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (float *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetFloatArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jfloat*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9, jintArray jarg11) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) malloc(arg10);
    //arg9 = (float*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (float *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetFloatArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jfloat*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9, jintArray jarg11, jint jarg13, jint jarg14, jint jarg15) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) malloc(arg10);
    //arg9 = (double*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_16(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (double *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetDoubleArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jdouble*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9, jintArray jarg11, jint jarg13, jint jarg14) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) malloc(arg10);
    //arg9 = (double*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_16(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (double *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetDoubleArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jdouble*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9, jintArray jarg11, jint jarg13) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) malloc(arg10);
    //arg9 = (double*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_16(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (double *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetDoubleArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jdouble*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1ReadRaster_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9, jintArray jarg11) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) malloc(arg10);
    //arg9 = (double*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  result = (CPLErr)GDALDatasetShadow_ReadRaster__SWIG_16(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (double *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetDoubleArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jdouble*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1Direct_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9, jintArray jarg11, jint jarg13, jint jarg14, jint jarg15) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1Direct_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9, jintArray jarg11, jint jarg13, jint jarg14) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1Direct_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9, jintArray jarg11, jint jarg13) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1Direct_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9, jintArray jarg11) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  result = (CPLErr)GDALDatasetShadow_WriteRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9, jintArray jarg11, jint jarg13, jint jarg14, jint jarg15) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) jenv->GetByteArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (char *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseByteArrayElements(jarg9, (jbyte*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9, jintArray jarg11, jint jarg13, jint jarg14) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) jenv->GetByteArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (char *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseByteArrayElements(jarg9, (jbyte*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9, jintArray jarg11, jint jarg13) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) jenv->GetByteArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (char *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseByteArrayElements(jarg9, (jbyte*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9, jintArray jarg11) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) jenv->GetByteArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (char *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseByteArrayElements(jarg9, (jbyte*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9, jintArray jarg11, jint jarg13, jint jarg14, jint jarg15) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) jenv->GetShortArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (short *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseShortArrayElements(jarg9, (jshort*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9, jintArray jarg11, jint jarg13, jint jarg14) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) jenv->GetShortArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (short *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseShortArrayElements(jarg9, (jshort*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9, jintArray jarg11, jint jarg13) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) jenv->GetShortArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (short *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseShortArrayElements(jarg9, (jshort*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9, jintArray jarg11) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) jenv->GetShortArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (short *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseShortArrayElements(jarg9, (jshort*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9, jintArray jarg11, jint jarg13, jint jarg14, jint jarg15) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) jenv->GetIntArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_8(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseIntArrayElements(jarg9, (jint*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9, jintArray jarg11, jint jarg13, jint jarg14) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) jenv->GetIntArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_8(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseIntArrayElements(jarg9, (jint*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9, jintArray jarg11, jint jarg13) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) jenv->GetIntArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_8(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseIntArrayElements(jarg9, (jint*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9, jintArray jarg11) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) jenv->GetIntArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_8(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseIntArrayElements(jarg9, (jint*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9, jintArray jarg11, jint jarg13, jint jarg14, jint jarg15) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) jenv->GetFloatArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (float *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseFloatArrayElements(jarg9, (jfloat*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9, jintArray jarg11, jint jarg13, jint jarg14) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) jenv->GetFloatArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (float *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseFloatArrayElements(jarg9, (jfloat*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9, jintArray jarg11, jint jarg13) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) jenv->GetFloatArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (float *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseFloatArrayElements(jarg9, (jfloat*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_115(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9, jintArray jarg11) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) jenv->GetFloatArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (float *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseFloatArrayElements(jarg9, (jfloat*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_116(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9, jintArray jarg11, jint jarg13, jint jarg14, jint jarg15) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) jenv->GetDoubleArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_16(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (double *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_117(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9, jintArray jarg11, jint jarg13, jint jarg14) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  int arg14 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) jenv->GetDoubleArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_16(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (double *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_118(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9, jintArray jarg11, jint jarg13) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  int arg13 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) jenv->GetDoubleArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  arg13 = (int)jarg13; 
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_16(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (double *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1WriteRaster_1_1SWIG_119(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9, jintArray jarg11) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  int arg11 ;
  int *arg12 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) jenv->GetDoubleArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg11)
    {
      arg11 = jenv->GetArrayLength(jarg11);
      if (arg11 == 0)
      arg12 = NULL;
      else
      arg12 = (int *)jenv->GetIntArrayElements(jarg11, NULL);
    }
    else
    {
      arg11 = 0;
      arg12 = NULL;
    }
  }
  result = (CPLErr)GDALDatasetShadow_WriteRaster__SWIG_16(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (double *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, JNI_ABORT);
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg12) {
      jenv->ReleaseIntArrayElements(jarg11, (jint*)arg12, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1XSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (int)GDALRasterBandShadow_XSize_get(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1YSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (int)GDALRasterBandShadow_YSize_get(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1DataType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALDataType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (GDALDataType)GDALRasterBandShadow_DataType_get(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (GDALDatasetShadow *)GDALRasterBandShadow_GetDataset(arg1);
  *(GDALDatasetShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetBand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (int)GDALRasterBandShadow_GetBand(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetBlockSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int temp2 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (int)0;
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp3 = (int)0;
    arg3 = &temp3; 
  }
  GDALRasterBandShadow_GetBlockSize(arg1,arg2,arg3);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetColorInterpretation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorInterp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (GDALColorInterp)GDALRasterBandShadow_GetColorInterpretation(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetRasterColorInterpretation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorInterp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (GDALColorInterp)GDALRasterBandShadow_GetRasterColorInterpretation(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SetColorInterpretation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorInterp arg2 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (GDALColorInterp)jarg2; 
  result = (CPLErr)GDALRasterBandShadow_SetColorInterpretation(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SetRasterColorInterpretation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorInterp arg2 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (GDALColorInterp)jarg2; 
  result = (CPLErr)GDALRasterBandShadow_SetRasterColorInterpretation(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetNoDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  double tmpval2 ;
  int tmphasval2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in,numinputs=0) (double *val, int*hasval) */
    arg2 = &tmpval2;
    arg3 = &tmphasval2;
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) < 1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array or empty array");
      return ;
    }
  }
  GDALRasterBandShadow_GetNoDataValue(arg1,arg2,arg3);
  {
    /* %typemap(argout) (double *val, int*hasval) */
    const jclass Double = jenv->FindClass("java/lang/Double");
    const jmethodID ctor = jenv->GetMethodID(Double, "<init>",
      "(D)V");
    if(*arg3) {
      jobject dbl = jenv->NewObject(Double, ctor, tmpval2);
      jenv->SetObjectArrayElement(jarg2, (jsize)0, dbl);
    } else {
      jenv->SetObjectArrayElement(jarg2, (jsize)0, 0);
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SetNoDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (CPLErr)GDALRasterBandShadow_SetNoDataValue(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1DeleteNoDataValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (CPLErr)GDALRasterBandShadow_DeleteNoDataValue(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetUnitType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (char *)GDALRasterBandShadow_GetUnitType(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SetUnitType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (CPLErr)GDALRasterBandShadow_SetUnitType(arg1,(char const *)arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetRasterCategoryNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (char **)GDALRasterBandShadow_GetRasterCategoryNames(arg1);
  {
    /* %typemap(out) char ** -> Vector */
    char **stringarray = result;
    const jclass vector = jenv->FindClass("java/util/Vector");
    const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
    const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
    
    jresult = jenv->NewObject(vector, constructor);
    if ( stringarray != NULL ) {
      while(*stringarray != NULL) {
        /*printf("working on string %s\n", *stringarray);*/
        jstring value = (jstring)jenv->NewStringUTF(*stringarray);
        jenv->CallBooleanMethod(jresult, add, value);
        jenv->DeleteLocalRef(value);
        stringarray++;
      }
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SetRasterCategoryNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  char **arg2 = (char **) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in) char **options */
    arg2 = NULL;
    if(jarg2 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg2, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg2);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg2 = CSLAddString(arg2,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (CPLErr)GDALRasterBandShadow_SetRasterCategoryNames(arg1,arg2);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg2 );
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetMinimum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  double tmpval2 ;
  int tmphasval2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in,numinputs=0) (double *val, int*hasval) */
    arg2 = &tmpval2;
    arg3 = &tmphasval2;
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) < 1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array or empty array");
      return ;
    }
  }
  GDALRasterBandShadow_GetMinimum(arg1,arg2,arg3);
  {
    /* %typemap(argout) (double *val, int*hasval) */
    const jclass Double = jenv->FindClass("java/lang/Double");
    const jmethodID ctor = jenv->GetMethodID(Double, "<init>",
      "(D)V");
    if(*arg3) {
      jobject dbl = jenv->NewObject(Double, ctor, tmpval2);
      jenv->SetObjectArrayElement(jarg2, (jsize)0, dbl);
    } else {
      jenv->SetObjectArrayElement(jarg2, (jsize)0, 0);
    }
  }
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetMaximum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  double tmpval2 ;
  int tmphasval2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in,numinputs=0) (double *val, int*hasval) */
    arg2 = &tmpval2;
    arg3 = &tmphasval2;
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) < 1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array or empty array");
      return ;
    }
  }
  GDALRasterBandShadow_GetMaximum(arg1,arg2,arg3);
  {
    /* %typemap(argout) (double *val, int*hasval) */
    const jclass Double = jenv->FindClass("java/lang/Double");
    const jmethodID ctor = jenv->GetMethodID(Double, "<init>",
      "(D)V");
    if(*arg3) {
      jobject dbl = jenv->NewObject(Double, ctor, tmpval2);
      jenv->SetObjectArrayElement(jarg2, (jsize)0, dbl);
    } else {
      jenv->SetObjectArrayElement(jarg2, (jsize)0, 0);
    }
  }
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  double tmpval2 ;
  int tmphasval2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in,numinputs=0) (double *val, int*hasval) */
    arg2 = &tmpval2;
    arg3 = &tmphasval2;
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) < 1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array or empty array");
      return ;
    }
  }
  GDALRasterBandShadow_GetOffset(arg1,arg2,arg3);
  {
    /* %typemap(argout) (double *val, int*hasval) */
    const jclass Double = jenv->FindClass("java/lang/Double");
    const jmethodID ctor = jenv->GetMethodID(Double, "<init>",
      "(D)V");
    if(*arg3) {
      jobject dbl = jenv->NewObject(Double, ctor, tmpval2);
      jenv->SetObjectArrayElement(jarg2, (jsize)0, dbl);
    } else {
      jenv->SetObjectArrayElement(jarg2, (jsize)0, 0);
    }
  }
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  int *arg3 = (int *) 0 ;
  double tmpval2 ;
  int tmphasval2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in,numinputs=0) (double *val, int*hasval) */
    arg2 = &tmpval2;
    arg3 = &tmphasval2;
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) < 1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array or empty array");
      return ;
    }
  }
  GDALRasterBandShadow_GetScale(arg1,arg2,arg3);
  {
    /* %typemap(argout) (double *val, int*hasval) */
    const jclass Double = jenv->FindClass("java/lang/Double");
    const jmethodID ctor = jenv->GetMethodID(Double, "<init>",
      "(D)V");
    if(*arg3) {
      jobject dbl = jenv->NewObject(Double, ctor, tmpval2);
      jenv->SetObjectArrayElement(jarg2, (jsize)0, dbl);
    } else {
      jenv->SetObjectArrayElement(jarg2, (jsize)0, 0);
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SetOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (CPLErr)GDALRasterBandShadow_SetOffset(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SetScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (CPLErr)GDALRasterBandShadow_SetScale(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetStatistics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jdoubleArray jarg7) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double temp4 ;
  double temp5 ;
  double temp6 ;
  double temp7 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp4 = (double)0;
    arg4 = &temp4; 
  }
  {
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg5) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp5 = (double)0;
    arg5 = &temp5; 
  }
  {
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg6) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp6 = (double)0;
    arg6 = &temp6; 
  }
  {
    if (!jarg7) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg7) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp7 = (double)0;
    arg7 = &temp7; 
  }
  result = (CPLErr)GDALRasterBandShadow_GetStatistics(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp4;
    jenv->SetDoubleArrayRegion(jarg4, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp5;
    jenv->SetDoubleArrayRegion(jarg5, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp6;
    jenv->SetDoubleArrayRegion(jarg6, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp7;
    jenv->SetDoubleArrayRegion(jarg7, 0, 1, &jvalue);
  }
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ComputeStatistics_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6, jobject jarg7) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  bool arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  GDALProgressFunc arg7 ;
  void *arg8 = (void *) 0 ;
  double temp3 ;
  double temp4 ;
  double temp5 ;
  double temp6 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (double)0;
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp4 = (double)0;
    arg4 = &temp4; 
  }
  {
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg5) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp5 = (double)0;
    arg5 = &temp5; 
  }
  {
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg6) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp6 = (double)0;
    arg6 = &temp6; 
  }
  {
    if ( jarg7 != 0 ) {
      sProgressInfo.pJavaCallback = jarg7;
      arg7 = JavaProgressProxy;
      arg8 = &sProgressInfo;
    }
    else
    {
      arg7 = NULL;
      arg8 = NULL;
    }
  }
  result = (CPLErr)GDALRasterBandShadow_ComputeStatistics__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp4;
    jenv->SetDoubleArrayRegion(jarg4, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp5;
    jenv->SetDoubleArrayRegion(jarg5, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp6;
    jenv->SetDoubleArrayRegion(jarg6, 0, 1, &jvalue);
  }
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ComputeStatistics_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5, jdoubleArray jarg6) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  bool arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double temp3 ;
  double temp4 ;
  double temp5 ;
  double temp6 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (double)0;
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp4 = (double)0;
    arg4 = &temp4; 
  }
  {
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg5) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp5 = (double)0;
    arg5 = &temp5; 
  }
  {
    if (!jarg6) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg6) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp6 = (double)0;
    arg6 = &temp6; 
  }
  result = (CPLErr)GDALRasterBandShadow_ComputeStatistics__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp4;
    jenv->SetDoubleArrayRegion(jarg4, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp5;
    jenv->SetDoubleArrayRegion(jarg5, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp6;
    jenv->SetDoubleArrayRegion(jarg6, 0, 1, &jvalue);
  }
  
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ComputeStatistics_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jdoubleArray jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  bool arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double temp3 ;
  double temp4 ;
  double temp5 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (double)0;
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp4 = (double)0;
    arg4 = &temp4; 
  }
  {
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg5) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp5 = (double)0;
    arg5 = &temp5; 
  }
  result = (CPLErr)GDALRasterBandShadow_ComputeStatistics__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp4;
    jenv->SetDoubleArrayRegion(jarg4, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp5;
    jenv->SetDoubleArrayRegion(jarg5, 0, 1, &jvalue);
  }
  
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ComputeStatistics_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jdoubleArray jarg3, jdoubleArray jarg4) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  bool arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double temp3 ;
  double temp4 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (double)0;
    arg3 = &temp3; 
  }
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp4 = (double)0;
    arg4 = &temp4; 
  }
  result = (CPLErr)GDALRasterBandShadow_ComputeStatistics__SWIG_0(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp4;
    jenv->SetDoubleArrayRegion(jarg4, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ComputeStatistics_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jdoubleArray jarg3) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  bool arg2 ;
  double *arg3 = (double *) 0 ;
  double temp3 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (double)0;
    arg3 = &temp3; 
  }
  result = (CPLErr)GDALRasterBandShadow_ComputeStatistics__SWIG_0(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ComputeStatistics_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  bool arg2 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (CPLErr)GDALRasterBandShadow_ComputeStatistics__SWIG_0(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SetStatistics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (CPLErr)GDALRasterBandShadow_SetStatistics(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetOverviewCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (int)GDALRasterBandShadow_GetOverviewCount(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetOverview(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  GDALRasterBandShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (GDALRasterBandShadow *)GDALRasterBandShadow_GetOverview(arg1,arg2);
  *(GDALRasterBandShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1Checksum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)GDALRasterBandShadow_Checksum(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ComputeRasterMinMax_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jint jarg3) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in) (double argout[ANY]) */
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) != 2) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 2);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return ;
    }
    arg2 = (double *)jenv->GetDoubleArrayElements(jarg2, NULL);
  }
  arg3 = (int)jarg3; 
  GDALRasterBandShadow_ComputeRasterMinMax__SWIG_0(arg1,arg2,arg3);
  {
    /* %typemap(argout) (double argout[ANY]) */
  }
  {
    /* %typemap(freearg) (double argout[ANY]) */
    jenv->ReleaseDoubleArrayElements(jarg2, (jdouble *)arg2, 0);
  }
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ComputeRasterMinMax_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in) (double argout[ANY]) */
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) != 2) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 2);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return ;
    }
    arg2 = (double *)jenv->GetDoubleArrayElements(jarg2, NULL);
  }
  GDALRasterBandShadow_ComputeRasterMinMax__SWIG_0(arg1,arg2);
  {
    /* %typemap(argout) (double argout[ANY]) */
  }
  {
    /* %typemap(freearg) (double argout[ANY]) */
    jenv->ReleaseDoubleArrayElements(jarg2, (jdouble *)arg2, 0);
  }
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ComputeBandStats_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jint jarg3) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in) (double argout[ANY]) */
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) != 2) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 2);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return ;
    }
    arg2 = (double *)jenv->GetDoubleArrayElements(jarg2, NULL);
  }
  arg3 = (int)jarg3; 
  GDALRasterBandShadow_ComputeBandStats__SWIG_0(arg1,arg2,arg3);
  {
    /* %typemap(argout) (double argout[ANY]) */
  }
  {
    /* %typemap(freearg) (double argout[ANY]) */
    jenv->ReleaseDoubleArrayElements(jarg2, (jdouble *)arg2, 0);
  }
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ComputeBandStats_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in) (double argout[ANY]) */
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) != 2) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 2);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return ;
    }
    arg2 = (double *)jenv->GetDoubleArrayElements(jarg2, NULL);
  }
  GDALRasterBandShadow_ComputeBandStats__SWIG_0(arg1,arg2);
  {
    /* %typemap(argout) (double argout[ANY]) */
  }
  {
    /* %typemap(freearg) (double argout[ANY]) */
    jenv->ReleaseDoubleArrayElements(jarg2, (jdouble *)arg2, 0);
  }
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1Fill_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (CPLErr)GDALRasterBandShadow_Fill__SWIG_0(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1Fill_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (CPLErr)GDALRasterBandShadow_Fill__SWIG_0(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_Band_1FlushCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  GDALRasterBandShadow_FlushCache(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetRasterColorTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (GDALColorTableShadow *)GDALRasterBandShadow_GetRasterColorTable(arg1);
  *(GDALColorTableShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetColorTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (GDALColorTableShadow *)GDALRasterBandShadow_GetColorTable(arg1);
  *(GDALColorTableShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SetRasterColorTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *arg2 = (GDALColorTableShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALColorTableShadow **)&jarg2; 
  result = (int)GDALRasterBandShadow_SetRasterColorTable(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SetColorTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *arg2 = (GDALColorTableShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALColorTableShadow **)&jarg2; 
  result = (int)GDALRasterBandShadow_SetColorTable(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetDefaultRAT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterAttributeTableShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (GDALRasterAttributeTableShadow *)GDALRasterBandShadow_GetDefaultRAT(arg1);
  *(GDALRasterAttributeTableShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SetDefaultRAT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterAttributeTableShadow *arg2 = (GDALRasterAttributeTableShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterAttributeTableShadow **)&jarg2; 
  result = (int)GDALRasterBandShadow_SetDefaultRAT(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetMaskBand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (GDALRasterBandShadow *)GDALRasterBandShadow_GetMaskBand(arg1);
  *(GDALRasterBandShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetMaskFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (int)GDALRasterBandShadow_GetMaskFlags(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1CreateMaskBand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (CPLErr)GDALRasterBandShadow_CreateMaskBand(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SetDefaultHistogram(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg4)
    {
      arg4 = jenv->GetArrayLength(jarg4);
      if (arg4 == 0)
      arg5 = NULL;
      else
      arg5 = (int *)jenv->GetIntArrayElements(jarg4, NULL);
    }
    else
    {
      arg4 = 0;
      arg5 = NULL;
    }
  }
  result = (CPLErr)GDALRasterBandShadow_SetDefaultHistogram(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg5) {
      jenv->ReleaseIntArrayElements(jarg4, (jint*)arg5, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_gdal_gdal_gdalJNI_Band_1HasArbitraryOverviews(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (bool)GDALRasterBandShadow_HasArbitraryOverviews(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetCategoryNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  result = (char **)GDALRasterBandShadow_GetCategoryNames(arg1);
  {
    /* %typemap(out) char ** -> Vector */
    char **stringarray = result;
    const jclass vector = jenv->FindClass("java/util/Vector");
    const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
    const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
    
    jresult = jenv->NewObject(vector, constructor);
    if ( stringarray != NULL ) {
      while(*stringarray != NULL) {
        /*printf("working on string %s\n", *stringarray);*/
        jstring value = (jstring)jenv->NewStringUTF(*stringarray);
        jenv->CallBooleanMethod(jresult, add, value);
        jenv->DeleteLocalRef(value);
        stringarray++;
      }
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SetCategoryNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  char **arg2 = (char **) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in) char **options */
    arg2 = NULL;
    if(jarg2 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg2, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg2);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg2 = CSLAddString(arg2,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (CPLErr)GDALRasterBandShadow_SetCategoryNames(arg1,arg2);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg2 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1AdviseRead_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jobject jarg9) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  GDALDataType *arg8 = (GDALDataType *) 0 ;
  char **arg9 = (char **) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = *(GDALDataType **)&jarg8; 
  {
    /* %typemap(in) char **options */
    arg9 = NULL;
    if(jarg9 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg9, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg9);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg9 = CSLAddString(arg9,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (CPLErr)GDALRasterBandShadow_AdviseRead__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg9 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1AdviseRead_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jlong jarg7, jlong jarg8) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  GDALDataType *arg8 = (GDALDataType *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = *(GDALDataType **)&jarg8; 
  result = (CPLErr)GDALRasterBandShadow_AdviseRead__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1AdviseRead_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jlong jarg7) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(int **)&jarg7; 
  result = (CPLErr)GDALRasterBandShadow_AdviseRead__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1AdviseRead_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(int **)&jarg6; 
  result = (CPLErr)GDALRasterBandShadow_AdviseRead__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1AdviseRead_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (CPLErr)GDALRasterBandShadow_AdviseRead__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1Direct_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9, jint jarg11, jint jarg12) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  int arg11 ;
  int arg12 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (CPLErr)GDALRasterBandShadow_ReadRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1Direct_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9, jint jarg11) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  int arg11 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  arg11 = (int)jarg11; 
  result = (CPLErr)GDALRasterBandShadow_ReadRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1Direct_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  result = (CPLErr)GDALRasterBandShadow_ReadRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9, jint jarg11, jint jarg12) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  int arg11 ;
  int arg12 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) malloc(arg10);
    //arg9 = (char*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (char *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetByteArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jbyte*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9, jint jarg11) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  int arg11 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) malloc(arg10);
    //arg9 = (char*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (char *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetByteArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jbyte*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) malloc(arg10);
    //arg9 = (char*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (char *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetByteArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jbyte*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9, jint jarg11, jint jarg12) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  int arg11 ;
  int arg12 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) malloc(arg10);
    //arg9 = (short*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (short *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetShortArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jshort*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9, jint jarg11) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  int arg11 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) malloc(arg10);
    //arg9 = (short*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (short *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetShortArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jshort*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) malloc(arg10);
    //arg9 = (short*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (short *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetShortArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jshort*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9, jint jarg11, jint jarg12) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  int arg11 ;
  int arg12 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) malloc(arg10);
    //arg9 = (int*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_6(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (int *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetIntArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jint*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9, jint jarg11) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  int arg11 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) malloc(arg10);
    //arg9 = (int*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_6(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (int *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetIntArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jint*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) malloc(arg10);
    //arg9 = (int*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_6(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (int *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetIntArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jint*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9, jint jarg11, jint jarg12) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  int arg11 ;
  int arg12 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) malloc(arg10);
    //arg9 = (float*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_9(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (float *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetFloatArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jfloat*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9, jint jarg11) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  int arg11 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) malloc(arg10);
    //arg9 = (float*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_9(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (float *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetFloatArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jfloat*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) malloc(arg10);
    //arg9 = (float*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_9(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (float *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetFloatArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jfloat*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9, jint jarg11, jint jarg12) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  int arg11 ;
  int arg12 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) malloc(arg10);
    //arg9 = (double*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (double *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetDoubleArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jdouble*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9, jint jarg11) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  int arg11 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) malloc(arg10);
    //arg9 = (double*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (double *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetDoubleArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jdouble*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadRaster_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayOut, long nRegularArraySizeOut)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) malloc(arg10);
    //arg9 = (double*) jenv->GetPrimitiveArrayCritical(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to allocate temporary buffer.");
      return 0;
    }
  }
  result = (CPLErr)GDALRasterBandShadow_ReadRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (double *regularArrayOut, long nRegularArraySizeOut) */
    if (result == CE_None)
    jenv->SetDoubleArrayRegion(jarg9, (jsize)0, jenv->GetArrayLength(jarg9), (jdouble*)arg9);
    free(arg9);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, JNI_COMMIT);
    //jenv->ReleasePrimitiveArrayCritical(jarg9, arg9, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1Direct_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9, jint jarg11, jint jarg12) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  int arg11 ;
  int arg12 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (CPLErr)GDALRasterBandShadow_WriteRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1Direct_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9, jint jarg11) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  int arg11 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  arg11 = (int)jarg11; 
  result = (CPLErr)GDALRasterBandShadow_WriteRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1Direct_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jobject jarg9) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  void *arg9 = (void *) 0 ;
  long arg10 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg9 = jenv->GetDirectBufferAddress(jarg9);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg10 = (long) ((jenv->GetDirectBufferCapacity(jarg9) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg9));
  }
  result = (CPLErr)GDALRasterBandShadow_WriteRaster_Direct__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9, jint jarg11, jint jarg12) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  int arg11 ;
  int arg12 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) jenv->GetByteArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (char *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseByteArrayElements(jarg9, (jbyte*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9, jint jarg11) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  int arg11 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) jenv->GetByteArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (char *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseByteArrayElements(jarg9, (jbyte*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jbyteArray jarg9) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  char *arg9 = (char *) 0 ;
  long arg10 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (char *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(char) * jenv->GetArrayLength(jarg9);
    arg9 = (char*) jenv->GetByteArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (char *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseByteArrayElements(jarg9, (jbyte*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9, jint jarg11, jint jarg12) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  int arg11 ;
  int arg12 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) jenv->GetShortArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (short *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseShortArrayElements(jarg9, (jshort*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9, jint jarg11) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  int arg11 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) jenv->GetShortArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (short *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseShortArrayElements(jarg9, (jshort*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jshortArray jarg9) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  short *arg9 = (short *) 0 ;
  long arg10 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (short *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(short) * jenv->GetArrayLength(jarg9);
    arg9 = (short*) jenv->GetShortArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (short *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseShortArrayElements(jarg9, (jshort*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9, jint jarg11, jint jarg12) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  int arg11 ;
  int arg12 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) jenv->GetIntArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_6(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (int *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseIntArrayElements(jarg9, (jint*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9, jint jarg11) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  int arg11 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) jenv->GetIntArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_6(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (int *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseIntArrayElements(jarg9, (jint*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jintArray jarg9) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  int *arg9 = (int *) 0 ;
  long arg10 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (int *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(int) * jenv->GetArrayLength(jarg9);
    arg9 = (int*) jenv->GetIntArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_6(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (int *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseIntArrayElements(jarg9, (jint*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9, jint jarg11, jint jarg12) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  int arg11 ;
  int arg12 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) jenv->GetFloatArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_9(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (float *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseFloatArrayElements(jarg9, (jfloat*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9, jint jarg11) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  int arg11 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) jenv->GetFloatArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_9(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (float *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseFloatArrayElements(jarg9, (jfloat*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jfloatArray jarg9) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  float *arg9 = (float *) 0 ;
  long arg10 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (float *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(float) * jenv->GetArrayLength(jarg9);
    arg9 = (float*) jenv->GetFloatArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_9(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (float *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseFloatArrayElements(jarg9, (jfloat*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9, jint jarg11, jint jarg12) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  int arg11 ;
  int arg12 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) jenv->GetDoubleArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (double *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9, jint jarg11) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  int arg11 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) jenv->GetDoubleArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  arg11 = (int)jarg11; 
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (double *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteRaster_1_1SWIG_114(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jint jarg8, jdoubleArray jarg9) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  GDALDataType arg8 ;
  double *arg9 = (double *) 0 ;
  long arg10 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (GDALDataType)jarg8; 
  {
    /* %typemap(in, numinputs=1) (double *regularArrayIn, long nRegularArraySizeIn)  */
    if (jarg9 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    
    arg10 = sizeof(double) * jenv->GetArrayLength(jarg9);
    arg9 = (double*) jenv->GetDoubleArrayElements(jarg9, 0);
    if (arg9 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get buffer.");
      return 0;
    }
  }
  result = (CPLErr)GDALRasterBandShadow_WriteRaster__SWIG_12(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) (double *regularArrayIn, long nRegularArraySizeIn) */
    jenv->ReleaseDoubleArrayElements(jarg9, (jdouble*) arg9, JNI_ABORT);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1ReadBlock_1Direct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jobject jarg4) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  long arg5 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg4 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg4 = jenv->GetDirectBufferAddress(jarg4);
    if (arg4 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg5 = (long) ((jenv->GetDirectBufferCapacity(jarg4) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg4));
  }
  result = (CPLErr)GDALRasterBandShadow_ReadBlock_Direct(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1WriteBlock_1Direct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jobject jarg4) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  long arg5 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg4 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg4 = jenv->GetDirectBufferAddress(jarg4);
    if (arg4 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg5 = (long) ((jenv->GetDirectBufferCapacity(jarg4) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg4));
  }
  result = (CPLErr)GDALRasterBandShadow_WriteBlock_Direct(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetHistogram_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jintArray jarg4, jboolean jarg6, jboolean jarg7, jobject jarg8) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  bool arg6 ;
  bool arg7 ;
  GDALProgressFunc arg8 ;
  void *arg9 = (void *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    /* %typemap(in) (int nList, int* pListOut) */
    /* check if is List */
    if (jarg4)
    {
      arg4 = jenv->GetArrayLength(jarg4);
      arg5 = (int*) malloc(arg4 * sizeof(int));
    }
    else
    {
      arg4 = 0;
      arg5 = NULL;
    }
  }
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  {
    if ( jarg8 != 0 ) {
      sProgressInfo.pJavaCallback = jarg8;
      arg8 = JavaProgressProxy;
      arg9 = &sProgressInfo;
    }
    else
    {
      arg8 = NULL;
      arg9 = NULL;
    }
  }
  {
    if (!arg5) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)GDALRasterBandShadow_GetHistogram__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pListOut) */
  }
  {
    /* %typemap(freearg) (int nList, int* pListOut) */
    if (arg5) {
      jenv->SetIntArrayRegion(jarg4, 0, arg4, (jint*)arg5);
      free((void*) arg5);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetHistogram_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jintArray jarg4, jboolean jarg6, jboolean jarg7) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  bool arg6 ;
  bool arg7 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    /* %typemap(in) (int nList, int* pListOut) */
    /* check if is List */
    if (jarg4)
    {
      arg4 = jenv->GetArrayLength(jarg4);
      arg5 = (int*) malloc(arg4 * sizeof(int));
    }
    else
    {
      arg4 = 0;
      arg5 = NULL;
    }
  }
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  {
    if (!arg5) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)GDALRasterBandShadow_GetHistogram__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pListOut) */
  }
  {
    /* %typemap(freearg) (int nList, int* pListOut) */
    if (arg5) {
      jenv->SetIntArrayRegion(jarg4, 0, arg4, (jint*)arg5);
      free((void*) arg5);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetHistogram_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jintArray jarg4) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    /* %typemap(in) (int nList, int* pListOut) */
    /* check if is List */
    if (jarg4)
    {
      arg4 = jenv->GetArrayLength(jarg4);
      arg5 = (int*) malloc(arg4 * sizeof(int));
    }
    else
    {
      arg4 = 0;
      arg5 = NULL;
    }
  }
  {
    if (!arg5) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)GDALRasterBandShadow_GetHistogram__SWIG_2(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pListOut) */
  }
  {
    /* %typemap(freearg) (int nList, int* pListOut) */
    if (arg5) {
      jenv->SetIntArrayRegion(jarg4, 0, arg4, (jint*)arg5);
      free((void*) arg5);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetHistogram_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in) (int nList, int* pListOut) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      arg3 = (int*) malloc(arg2 * sizeof(int));
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)GDALRasterBandShadow_GetHistogram__SWIG_3(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pListOut) */
  }
  {
    /* %typemap(freearg) (int nList, int* pListOut) */
    if (arg3) {
      jenv->SetIntArrayRegion(jarg2, 0, arg2, (jint*)arg3);
      free((void*) arg3);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetDefaultHistogram_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jobjectArray jarg4, jboolean jarg6, jobject jarg7) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int *arg4 = (int *) 0 ;
  int **arg5 = (int **) 0 ;
  bool arg6 ;
  GDALProgressFunc arg7 ;
  void *arg8 = (void *) 0 ;
  double temp2 ;
  double temp3 ;
  int nLen4 = 0 ;
  int *pBuf4 = NULL ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (double)0;
    arg3 = &temp3; 
  }
  {
    /* %typemap(in) (int* pnList, int** ppListOut) */
    arg4 = &nLen4;
    arg5 = &pBuf4;
  }
  arg6 = jarg6 ? true : false; 
  {
    if ( jarg7 != 0 ) {
      sProgressInfo.pJavaCallback = jarg7;
      arg7 = JavaProgressProxy;
      arg8 = &sProgressInfo;
    }
    else
    {
      arg7 = NULL;
      arg8 = NULL;
    }
  }
  result = (CPLErr)GDALRasterBandShadow_GetDefaultHistogram__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    /* %typemap(argout) (int* pnList, int** ppListOut) */
    if(jarg4 && jenv->GetArrayLength(jarg4) >= 1)
    {
      jintArray intArray = jenv->NewIntArray(nLen4);
      jenv->SetIntArrayRegion(intArray, (jsize)0, (jsize)nLen4, (jint*)pBuf4);
      jenv->SetObjectArrayElement(jarg4,0,intArray);
      jenv->DeleteLocalRef(intArray);
    }
    CPLFree(pBuf4);
  }
  
  
  {
    /* %typemap(freearg) (int* pnList, int** ppListOut) */
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetDefaultHistogram_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jobjectArray jarg4, jboolean jarg6) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int *arg4 = (int *) 0 ;
  int **arg5 = (int **) 0 ;
  bool arg6 ;
  double temp2 ;
  double temp3 ;
  int nLen4 = 0 ;
  int *pBuf4 = NULL ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (double)0;
    arg3 = &temp3; 
  }
  {
    /* %typemap(in) (int* pnList, int** ppListOut) */
    arg4 = &nLen4;
    arg5 = &pBuf4;
  }
  arg6 = jarg6 ? true : false; 
  result = (CPLErr)GDALRasterBandShadow_GetDefaultHistogram__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    /* %typemap(argout) (int* pnList, int** ppListOut) */
    if(jarg4 && jenv->GetArrayLength(jarg4) >= 1)
    {
      jintArray intArray = jenv->NewIntArray(nLen4);
      jenv->SetIntArrayRegion(intArray, (jsize)0, (jsize)nLen4, (jint*)pBuf4);
      jenv->SetObjectArrayElement(jarg4,0,intArray);
      jenv->DeleteLocalRef(intArray);
    }
    CPLFree(pBuf4);
  }
  
  
  {
    /* %typemap(freearg) (int* pnList, int** ppListOut) */
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Band_1GetDefaultHistogram_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jobjectArray jarg4) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int *arg4 = (int *) 0 ;
  int **arg5 = (int **) 0 ;
  double temp2 ;
  double temp3 ;
  int nLen4 = 0 ;
  int *pBuf4 = NULL ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (double)0;
    arg3 = &temp3; 
  }
  {
    /* %typemap(in) (int* pnList, int** ppListOut) */
    arg4 = &nLen4;
    arg5 = &pBuf4;
  }
  result = (CPLErr)GDALRasterBandShadow_GetDefaultHistogram__SWIG_0(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  {
    /* %typemap(argout) (int* pnList, int** ppListOut) */
    if(jarg4 && jenv->GetArrayLength(jarg4) >= 1)
    {
      jintArray intArray = jenv->NewIntArray(nLen4);
      jenv->SetIntArrayRegion(intArray, (jsize)0, (jsize)nLen4, (jint*)pBuf4);
      jenv->SetObjectArrayElement(jarg4,0,intArray);
      jenv->DeleteLocalRef(intArray);
    }
    CPLFree(pBuf4);
  }
  
  
  {
    /* %typemap(freearg) (int* pnList, int** ppListOut) */
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1ColorTable_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  GDALPaletteInterp arg1 ;
  GDALColorTableShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (GDALPaletteInterp)jarg1; 
  result = (GDALColorTableShadow *)new_GDALColorTableShadow__SWIG_0(arg1);
  *(GDALColorTableShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1ColorTable_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GDALColorTableShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GDALColorTableShadow *)new_GDALColorTableShadow__SWIG_0();
  *(GDALColorTableShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1ColorTable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDALColorTableShadow **)&jarg1; 
  delete_GDALColorTableShadow(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_ColorTable_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  GDALColorTableShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALColorTableShadow **)&jarg1; 
  result = (GDALColorTableShadow *)GDALColorTableShadow_Clone(arg1);
  *(GDALColorTableShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ColorTable_1GetPaletteInterpretation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  GDALPaletteInterp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALColorTableShadow **)&jarg1; 
  result = (GDALPaletteInterp)GDALColorTableShadow_GetPaletteInterpretation(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ColorTable_1GetCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALColorTableShadow **)&jarg1; 
  result = (int)GDALColorTableShadow_GetColorEntryCount(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_ColorTable_1GetColorEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jobject jresult = 0 ;
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  int arg2 ;
  GDALColorEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALColorTableShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (GDALColorEntry *)GDALColorTableShadow_GetColorEntry(arg1,arg2);
  {
    /* %typemap(out) (GDALColorEntry *) */
    const jclass Color = jenv->FindClass("java/awt/Color");
    const jmethodID ccon = jenv->GetMethodID(Color, "<init>",
      "(IIII)V");
    jresult = jenv->NewObject(Color, ccon, result->c1, result->c2, result->c3, result->c4);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_ColorTable_1SetColorEntry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  int arg2 ;
  GDALColorEntry *arg3 = (GDALColorEntry *) 0 ;
  GDALColorEntry tmp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALColorTableShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    /* %typemap(in) (GDALColorEntry *) (GDALColorEntry tmp3) */
    arg3 = NULL;
    if (jarg3 == NULL)
    {
      SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer.");
      return ;
    }
    float *colorptr = 0;
    const jclass Color = jenv->FindClass("java/awt/Color");
    const jmethodID colors = jenv->GetMethodID(Color, "getRGBComponents",
      "([F)[F");
    
    jfloatArray colorArr = jenv->NewFloatArray(4);
    colorArr = (jfloatArray)jenv->CallObjectMethod(jarg3, colors, colorArr);
    
    colorptr = (float *)jenv->GetFloatArrayElements(colorArr, 0);
    tmp3.c1 = (short)(colorptr[0] * 255);
    tmp3.c2 = (short)(colorptr[1] * 255);
    tmp3.c3 = (short)(colorptr[2] * 255);
    tmp3.c4 = (short)(colorptr[3] * 255);
    /*printf( "  %d, %d, %d, %d\n",
                        tmp3.c1, tmp3.c2, tmp3.c3, tmp3.c4 );*/
    arg3 = &tmp3;
  }
  GDALColorTableShadow_SetColorEntry(arg1,arg2,(GDALColorEntry const *)arg3);
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_ColorTable_1CreateColorRamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3, jint jarg4, jobject jarg5) {
  GDALColorTableShadow *arg1 = (GDALColorTableShadow *) 0 ;
  int arg2 ;
  GDALColorEntry *arg3 = (GDALColorEntry *) 0 ;
  int arg4 ;
  GDALColorEntry *arg5 = (GDALColorEntry *) 0 ;
  GDALColorEntry tmp3 ;
  GDALColorEntry tmp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALColorTableShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    /* %typemap(in) (GDALColorEntry *) (GDALColorEntry tmp3) */
    arg3 = NULL;
    if (jarg3 == NULL)
    {
      SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer.");
      return ;
    }
    float *colorptr = 0;
    const jclass Color = jenv->FindClass("java/awt/Color");
    const jmethodID colors = jenv->GetMethodID(Color, "getRGBComponents",
      "([F)[F");
    
    jfloatArray colorArr = jenv->NewFloatArray(4);
    colorArr = (jfloatArray)jenv->CallObjectMethod(jarg3, colors, colorArr);
    
    colorptr = (float *)jenv->GetFloatArrayElements(colorArr, 0);
    tmp3.c1 = (short)(colorptr[0] * 255);
    tmp3.c2 = (short)(colorptr[1] * 255);
    tmp3.c3 = (short)(colorptr[2] * 255);
    tmp3.c4 = (short)(colorptr[3] * 255);
    /*printf( "  %d, %d, %d, %d\n",
                        tmp3.c1, tmp3.c2, tmp3.c3, tmp3.c4 );*/
    arg3 = &tmp3;
  }
  arg4 = (int)jarg4; 
  {
    /* %typemap(in) (GDALColorEntry *) (GDALColorEntry tmp5) */
    arg5 = NULL;
    if (jarg5 == NULL)
    {
      SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer.");
      return ;
    }
    float *colorptr = 0;
    const jclass Color = jenv->FindClass("java/awt/Color");
    const jmethodID colors = jenv->GetMethodID(Color, "getRGBComponents",
      "([F)[F");
    
    jfloatArray colorArr = jenv->NewFloatArray(4);
    colorArr = (jfloatArray)jenv->CallObjectMethod(jarg5, colors, colorArr);
    
    colorptr = (float *)jenv->GetFloatArrayElements(colorArr, 0);
    tmp5.c1 = (short)(colorptr[0] * 255);
    tmp5.c2 = (short)(colorptr[1] * 255);
    tmp5.c3 = (short)(colorptr[2] * 255);
    tmp5.c4 = (short)(colorptr[3] * 255);
    /*printf( "  %d, %d, %d, %d\n",
                        tmp5.c1, tmp5.c2, tmp5.c3, tmp5.c4 );*/
    arg5 = &tmp5;
  }
  GDALColorTableShadow_CreateColorRamp(arg1,arg2,(GDALColorEntry const *)arg3,arg4,(GDALColorEntry const *)arg5);
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1RasterAttributeTable(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GDALRasterAttributeTableShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GDALRasterAttributeTableShadow *)new_GDALRasterAttributeTableShadow();
  *(GDALRasterAttributeTableShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1RasterAttributeTable(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  delete_GDALRasterAttributeTableShadow(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  GDALRasterAttributeTableShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  result = (GDALRasterAttributeTableShadow *)GDALRasterAttributeTableShadow_Clone(arg1);
  *(GDALRasterAttributeTableShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1GetColumnCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  result = (int)GDALRasterAttributeTableShadow_GetColumnCount(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1GetNameOfCol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)GDALRasterAttributeTableShadow_GetNameOfCol(arg1,arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1GetUsageOfCol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  GDALRATFieldUsage result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (GDALRATFieldUsage)GDALRasterAttributeTableShadow_GetUsageOfCol(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1GetTypeOfCol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  GDALRATFieldType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (GDALRATFieldType)GDALRasterAttributeTableShadow_GetTypeOfCol(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1GetColOfUsage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  GDALRATFieldUsage arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = (GDALRATFieldUsage)jarg2; 
  result = (int)GDALRasterAttributeTableShadow_GetColOfUsage(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1GetRowCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  result = (int)GDALRasterAttributeTableShadow_GetRowCount(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1GetValueAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jstring jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (char *)GDALRasterAttributeTableShadow_GetValueAsString(arg1,arg2,arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1GetValueAsInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)GDALRasterAttributeTableShadow_GetValueAsInt(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1GetValueAsDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (double)GDALRasterAttributeTableShadow_GetValueAsDouble(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1SetValueAsString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    /* %typemap(in) (tostring argin) */
    if (jarg4)
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
  }
  GDALRasterAttributeTableShadow_SetValueAsString(arg1,arg2,arg3,(char const *)arg4);
  {
    /* %typemap(in) (tostring argin) */
    if (jarg4)
    jenv->ReleaseStringUTFChars(jarg4, (char*)arg4);
  }
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1SetValueAsInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  GDALRasterAttributeTableShadow_SetValueAsInt(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1SetValueAsDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jdouble jarg4) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  GDALRasterAttributeTableShadow_SetValueAsDouble(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1SetRowCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  GDALRasterAttributeTableShadow_SetRowCount(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1CreateColumn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  GDALRATFieldType arg3 ;
  GDALRATFieldUsage arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (GDALRATFieldType)jarg3; 
  arg4 = (GDALRATFieldUsage)jarg4; 
  result = (int)GDALRasterAttributeTableShadow_CreateColumn(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1GetLinearBinning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3) {
  jboolean jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double temp2 ;
  double temp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (double)0;
    arg3 = &temp3; 
  }
  result = (bool)GDALRasterAttributeTableShadow_GetLinearBinning(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp3;
    jenv->SetDoubleArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1SetLinearBinning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (int)GDALRasterAttributeTableShadow_SetLinearBinning(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1GetRowOfValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jint jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  double arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (int)GDALRasterAttributeTableShadow_GetRowOfValue(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1ChangesAreWrittenToFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  result = (int)GDALRasterAttributeTableShadow_ChangesAreWrittenToFile(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_RasterAttributeTable_1DumpReadable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GDALRasterAttributeTableShadow *arg1 = (GDALRasterAttributeTableShadow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterAttributeTableShadow **)&jarg1; 
  GDALRasterAttributeTableShadow_DumpReadable(arg1);
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ComputeMedianCutPCT_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_, jobject jarg6) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  int arg4 ;
  GDALColorTableShadow *arg5 = (GDALColorTableShadow *) 0 ;
  GDALProgressFunc arg6 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(GDALRasterBandShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(GDALColorTableShadow **)&jarg5; 
  {
    if ( jarg6 != 0 ) {
      sProgressInfo.pJavaCallback = jarg6;
      arg6 = JavaProgressProxy;
      arg7 = &sProgressInfo;
    }
    else
    {
      arg6 = NULL;
      arg7 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg5) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)ComputeMedianCutPCT(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ComputeMedianCutPCT_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  int arg4 ;
  GDALColorTableShadow *arg5 = (GDALColorTableShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(GDALRasterBandShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(GDALColorTableShadow **)&jarg5; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg5) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)ComputeMedianCutPCT(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_DitherRGB2PCT_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jobject jarg6) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg4 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *arg5 = (GDALColorTableShadow *) 0 ;
  GDALProgressFunc arg6 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(GDALRasterBandShadow **)&jarg3; 
  arg4 = *(GDALRasterBandShadow **)&jarg4; 
  arg5 = *(GDALColorTableShadow **)&jarg5; 
  {
    if ( jarg6 != 0 ) {
      sProgressInfo.pJavaCallback = jarg6;
      arg6 = JavaProgressProxy;
      arg7 = &sProgressInfo;
    }
    else
    {
      arg6 = NULL;
      arg7 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg4) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg5) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)DitherRGB2PCT(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_DitherRGB2PCT_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg4 = (GDALRasterBandShadow *) 0 ;
  GDALColorTableShadow *arg5 = (GDALColorTableShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(GDALRasterBandShadow **)&jarg3; 
  arg4 = *(GDALRasterBandShadow **)&jarg4; 
  arg5 = *(GDALColorTableShadow **)&jarg5; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg4) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg5) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)DitherRGB2PCT(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ReprojectImage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6, jdouble jarg7, jobject jarg8, jobject jarg10) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  GDALResampleAlg arg5 ;
  double arg6 ;
  double arg7 ;
  GDALProgressFunc arg8 ;
  void *arg9 = (void *) 0 ;
  char **arg10 = (char **) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (GDALResampleAlg)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    if ( jarg8 != 0 ) {
      sProgressInfo.pJavaCallback = jarg8;
      arg8 = JavaProgressProxy;
      arg9 = &sProgressInfo;
    }
    else
    {
      arg8 = NULL;
      arg9 = NULL;
    }
  }
  {
    /* %typemap(in) char **options */
    arg10 = NULL;
    if(jarg10 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg10, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg10);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg10 = CSLAddString(arg10,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)ReprojectImage(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg10 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ReprojectImage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6, jdouble jarg7, jobject jarg8) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  GDALResampleAlg arg5 ;
  double arg6 ;
  double arg7 ;
  GDALProgressFunc arg8 ;
  void *arg9 = (void *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (GDALResampleAlg)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    if ( jarg8 != 0 ) {
      sProgressInfo.pJavaCallback = jarg8;
      arg8 = JavaProgressProxy;
      arg9 = &sProgressInfo;
    }
    else
    {
      arg8 = NULL;
      arg9 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)ReprojectImage(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ReprojectImage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6, jdouble jarg7) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  GDALResampleAlg arg5 ;
  double arg6 ;
  double arg7 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (GDALResampleAlg)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)ReprojectImage(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ReprojectImage_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5, jdouble jarg6) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  GDALResampleAlg arg5 ;
  double arg6 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (GDALResampleAlg)jarg5; 
  arg6 = (double)jarg6; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)ReprojectImage(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ReprojectImage_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jint jarg5) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  GDALResampleAlg arg5 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (GDALResampleAlg)jarg5; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)ReprojectImage(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ReprojectImage_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)ReprojectImage(arg1,arg2,(char const *)arg3,(char const *)arg4);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ReprojectImage_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)ReprojectImage(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ReprojectImage_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  CPLErr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (CPLErr)ReprojectImage(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ComputeProximity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3, jobject jarg4) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  char **arg3 = (char **) 0 ;
  GDALProgressFunc arg4 ;
  void *arg5 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  {
    /* %typemap(in) char **options */
    arg3 = NULL;
    if(jarg3 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg3, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg3);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg3 = CSLAddString(arg3,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if ( jarg4 != 0 ) {
      sProgressInfo.pJavaCallback = jarg4;
      arg4 = JavaProgressProxy;
      arg5 = &sProgressInfo;
    }
    else
    {
      arg4 = NULL;
      arg5 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)ComputeProximity(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ComputeProximity_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  char **arg3 = (char **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  {
    /* %typemap(in) char **options */
    arg3 = NULL;
    if(jarg3 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg3, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg3);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg3 = CSLAddString(arg3,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)ComputeProximity(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ComputeProximity_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)ComputeProximity(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterizeLayer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jlong jarg4, jobject jarg4_, jdoubleArray jarg5, jobject jarg7, jobject jarg8) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  OGRLayerShadow *arg4 = (OGRLayerShadow *) 0 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  char **arg7 = (char **) 0 ;
  GDALProgressFunc arg8 ;
  void *arg9 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      arg3 = (int *)jenv->GetIntArrayElements(jarg2, NULL);
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  arg4 = *(OGRLayerShadow **)&jarg4; 
  {
    /* %typemap(in) (int nList, double* pList) */
    /* check if is List */
    if (jarg5)
    {
      arg5 = jenv->GetArrayLength(jarg5);
      if (arg5 == 0)
      arg6 = NULL;
      else
      arg6 = (double *)jenv->GetDoubleArrayElements(jarg5, NULL);
    }
    else
    {
      arg5 = 0;
      arg6 = NULL;
    }
  }
  {
    /* %typemap(in) char **options */
    arg7 = NULL;
    if(jarg7 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg7, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg7);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg7 = CSLAddString(arg7,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if ( jarg8 != 0 ) {
      sProgressInfo.pJavaCallback = jarg8;
      arg8 = JavaProgressProxy;
      arg9 = &sProgressInfo;
    }
    else
    {
      arg8 = NULL;
      arg9 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg4) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)RasterizeLayer(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(argout) (int nList, double* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg3) {
      jenv->ReleaseIntArrayElements(jarg2, (jint*)arg3, JNI_ABORT);
    }
  }
  {
    /* %typemap(freearg) (int nList, double* pList) */
    if (arg6) {
      jenv->ReleaseDoubleArrayElements(jarg5, arg6, JNI_ABORT);
    }
  }
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg7 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterizeLayer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jlong jarg4, jobject jarg4_, jdoubleArray jarg5, jobject jarg7) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  OGRLayerShadow *arg4 = (OGRLayerShadow *) 0 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  char **arg7 = (char **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      arg3 = (int *)jenv->GetIntArrayElements(jarg2, NULL);
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  arg4 = *(OGRLayerShadow **)&jarg4; 
  {
    /* %typemap(in) (int nList, double* pList) */
    /* check if is List */
    if (jarg5)
    {
      arg5 = jenv->GetArrayLength(jarg5);
      if (arg5 == 0)
      arg6 = NULL;
      else
      arg6 = (double *)jenv->GetDoubleArrayElements(jarg5, NULL);
    }
    else
    {
      arg5 = 0;
      arg6 = NULL;
    }
  }
  {
    /* %typemap(in) char **options */
    arg7 = NULL;
    if(jarg7 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg7, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg7);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg7 = CSLAddString(arg7,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg4) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)RasterizeLayer(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(argout) (int nList, double* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg3) {
      jenv->ReleaseIntArrayElements(jarg2, (jint*)arg3, JNI_ABORT);
    }
  }
  {
    /* %typemap(freearg) (int nList, double* pList) */
    if (arg6) {
      jenv->ReleaseDoubleArrayElements(jarg5, arg6, JNI_ABORT);
    }
  }
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg7 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterizeLayer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jlong jarg4, jobject jarg4_, jdoubleArray jarg5) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  OGRLayerShadow *arg4 = (OGRLayerShadow *) 0 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      arg3 = (int *)jenv->GetIntArrayElements(jarg2, NULL);
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  arg4 = *(OGRLayerShadow **)&jarg4; 
  {
    /* %typemap(in) (int nList, double* pList) */
    /* check if is List */
    if (jarg5)
    {
      arg5 = jenv->GetArrayLength(jarg5);
      if (arg5 == 0)
      arg6 = NULL;
      else
      arg6 = (double *)jenv->GetDoubleArrayElements(jarg5, NULL);
    }
    else
    {
      arg5 = 0;
      arg6 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg4) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)RasterizeLayer(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(argout) (int nList, double* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg3) {
      jenv->ReleaseIntArrayElements(jarg2, (jint*)arg3, JNI_ABORT);
    }
  }
  {
    /* %typemap(freearg) (int nList, double* pList) */
    if (arg6) {
      jenv->ReleaseDoubleArrayElements(jarg5, arg6, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RasterizeLayer_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  OGRLayerShadow *arg4 = (OGRLayerShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  {
    /* %typemap(in) (int nList, int* pList) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      arg3 = (int *)jenv->GetIntArrayElements(jarg2, NULL);
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  arg4 = *(OGRLayerShadow **)&jarg4; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg4) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)RasterizeLayer(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, int* pList) */
  }
  {
    /* %typemap(freearg) (int nList, int* pList) */
    if (arg3) {
      jenv->ReleaseIntArrayElements(jarg2, (jint*)arg3, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Polygonize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jobject jarg5, jobject jarg6) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  int arg4 ;
  char **arg5 = (char **) 0 ;
  GDALProgressFunc arg6 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(OGRLayerShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  {
    /* %typemap(in) char **options */
    arg5 = NULL;
    if(jarg5 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg5, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg5);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg5 = CSLAddString(arg5,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if ( jarg6 != 0 ) {
      sProgressInfo.pJavaCallback = jarg6;
      arg6 = JavaProgressProxy;
      arg7 = &sProgressInfo;
    }
    else
    {
      arg6 = NULL;
      arg7 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)Polygonize(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Polygonize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jobject jarg5) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  int arg4 ;
  char **arg5 = (char **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(OGRLayerShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  {
    /* %typemap(in) char **options */
    arg5 = NULL;
    if(jarg5 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg5, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg5);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg5 = CSLAddString(arg5,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)Polygonize(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Polygonize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(OGRLayerShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)Polygonize(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_FPolygonize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jobject jarg5, jobject jarg6) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  int arg4 ;
  char **arg5 = (char **) 0 ;
  GDALProgressFunc arg6 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(OGRLayerShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  {
    /* %typemap(in) char **options */
    arg5 = NULL;
    if(jarg5 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg5, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg5);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg5 = CSLAddString(arg5,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if ( jarg6 != 0 ) {
      sProgressInfo.pJavaCallback = jarg6;
      arg6 = JavaProgressProxy;
      arg7 = &sProgressInfo;
    }
    else
    {
      arg6 = NULL;
      arg7 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)FPolygonize(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_FPolygonize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jobject jarg5) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  int arg4 ;
  char **arg5 = (char **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(OGRLayerShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  {
    /* %typemap(in) char **options */
    arg5 = NULL;
    if(jarg5 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg5, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg5);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg5 = CSLAddString(arg5,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)FPolygonize(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_FPolygonize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  OGRLayerShadow *arg3 = (OGRLayerShadow *) 0 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(OGRLayerShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)FPolygonize(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_FillNodata_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jint jarg4, jobject jarg5, jobject jarg6) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  double arg3 ;
  int arg4 ;
  char **arg5 = (char **) 0 ;
  GDALProgressFunc arg6 ;
  void *arg7 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  {
    /* %typemap(in) char **options */
    arg5 = NULL;
    if(jarg5 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg5, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg5);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg5 = CSLAddString(arg5,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if ( jarg6 != 0 ) {
      sProgressInfo.pJavaCallback = jarg6;
      arg6 = JavaProgressProxy;
      arg7 = &sProgressInfo;
    }
    else
    {
      arg6 = NULL;
      arg7 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)FillNodata(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_FillNodata_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jint jarg4, jobject jarg5) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  double arg3 ;
  int arg4 ;
  char **arg5 = (char **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  {
    /* %typemap(in) char **options */
    arg5 = NULL;
    if(jarg5 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg5, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg5);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg5 = CSLAddString(arg5,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)FillNodata(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_FillNodata_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jdouble jarg3, jint jarg4) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  double arg3 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (int)jarg4; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)FillNodata(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_SieveFilter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5, jobject jarg6, jobject jarg7) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  int arg4 ;
  int arg5 ;
  char **arg6 = (char **) 0 ;
  GDALProgressFunc arg7 ;
  void *arg8 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(GDALRasterBandShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    /* %typemap(in) char **options */
    arg6 = NULL;
    if(jarg6 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg6, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg6);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg6 = CSLAddString(arg6,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if ( jarg7 != 0 ) {
      sProgressInfo.pJavaCallback = jarg7;
      arg7 = JavaProgressProxy;
      arg8 = &sProgressInfo;
    }
    else
    {
      arg7 = NULL;
      arg8 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)SieveFilter(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg6 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_SieveFilter_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5, jobject jarg6) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  int arg4 ;
  int arg5 ;
  char **arg6 = (char **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(GDALRasterBandShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    /* %typemap(in) char **options */
    arg6 = NULL;
    if(jarg6 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg6, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg6);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg6 = CSLAddString(arg6,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)SieveFilter(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg6 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_SieveFilter_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(GDALRasterBandShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)SieveFilter(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_SieveFilter_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  int arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(GDALRasterBandShadow **)&jarg3; 
  arg4 = (int)jarg4; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)SieveFilter(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RegenerateOverviews_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jstring jarg4, jobject jarg5) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  GDALRasterBandShadow **arg3 = (GDALRasterBandShadow **) 0 ;
  char *arg4 = (char *) 0 ;
  GDALProgressFunc arg5 ;
  void *arg6 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in)(int object_list_count, GDALRasterBandShadow **poObjects) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      {
        arg3 = (GDALRasterBandShadow**) malloc(sizeof(GDALRasterBandShadow*) * arg2);
        int i;
        for (i = 0; i<arg2; i++) {
          jobject obj = (jobject)jenv->GetObjectArrayElement(jarg2, i);
          if (obj == NULL)
          {
            free (arg3 );
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
            return 0;
          }
          const jclass klass = jenv->FindClass("org/gdal/gdal/Band");
          const jmethodID getCPtr = jenv->GetStaticMethodID(klass, "getCPtr", "(Lorg/gdal/gdal/Band;)J");
          arg3[i] = (GDALRasterBandShadow*) jenv->CallStaticLongMethod(klass, getCPtr, obj);
        }
      }
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  {
    /* %typemap(in) (const char* stringWithDefaultValue) */
    if (jarg4)
    {
      arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    }
  }
  {
    if ( jarg5 != 0 ) {
      sProgressInfo.pJavaCallback = jarg5;
      arg5 = JavaProgressProxy;
      arg6 = &sProgressInfo;
    }
    else
    {
      arg5 = NULL;
      arg6 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)RegenerateOverviews(arg1,arg2,arg3,(char const *)arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int object_list_count, GDALRasterBandShadow **poObjects) */
  }
  {
    /* %typemap(freearg) (int object_list_count, GDALRasterBandShadow **poObjects) */
    if (arg3) {
      free((void*) arg3);
    }
  }
  {
    /* %typemap(freearg) (const char* stringWithDefaultValue) */
    if (jarg4)
    {
      jenv->ReleaseStringUTFChars(jarg4, (char*)arg4);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RegenerateOverviews_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jstring jarg4) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  GDALRasterBandShadow **arg3 = (GDALRasterBandShadow **) 0 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in)(int object_list_count, GDALRasterBandShadow **poObjects) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      {
        arg3 = (GDALRasterBandShadow**) malloc(sizeof(GDALRasterBandShadow*) * arg2);
        int i;
        for (i = 0; i<arg2; i++) {
          jobject obj = (jobject)jenv->GetObjectArrayElement(jarg2, i);
          if (obj == NULL)
          {
            free (arg3 );
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
            return 0;
          }
          const jclass klass = jenv->FindClass("org/gdal/gdal/Band");
          const jmethodID getCPtr = jenv->GetStaticMethodID(klass, "getCPtr", "(Lorg/gdal/gdal/Band;)J");
          arg3[i] = (GDALRasterBandShadow*) jenv->CallStaticLongMethod(klass, getCPtr, obj);
        }
      }
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  {
    /* %typemap(in) (const char* stringWithDefaultValue) */
    if (jarg4)
    {
      arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)RegenerateOverviews(arg1,arg2,arg3,(char const *)arg4);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int object_list_count, GDALRasterBandShadow **poObjects) */
  }
  {
    /* %typemap(freearg) (int object_list_count, GDALRasterBandShadow **poObjects) */
    if (arg3) {
      free((void*) arg3);
    }
  }
  {
    /* %typemap(freearg) (const char* stringWithDefaultValue) */
    if (jarg4)
    {
      jenv->ReleaseStringUTFChars(jarg4, (char*)arg4);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RegenerateOverviews_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  int arg2 ;
  GDALRasterBandShadow **arg3 = (GDALRasterBandShadow **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  {
    /* %typemap(in)(int object_list_count, GDALRasterBandShadow **poObjects) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      {
        arg3 = (GDALRasterBandShadow**) malloc(sizeof(GDALRasterBandShadow*) * arg2);
        int i;
        for (i = 0; i<arg2; i++) {
          jobject obj = (jobject)jenv->GetObjectArrayElement(jarg2, i);
          if (obj == NULL)
          {
            free (arg3 );
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
            return 0;
          }
          const jclass klass = jenv->FindClass("org/gdal/gdal/Band");
          const jmethodID getCPtr = jenv->GetStaticMethodID(klass, "getCPtr", "(Lorg/gdal/gdal/Band;)J");
          arg3[i] = (GDALRasterBandShadow*) jenv->CallStaticLongMethod(klass, getCPtr, obj);
        }
      }
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)RegenerateOverviews(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int object_list_count, GDALRasterBandShadow **poObjects) */
  }
  {
    /* %typemap(freearg) (int object_list_count, GDALRasterBandShadow **poObjects) */
    if (arg3) {
      free((void*) arg3);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RegenerateOverview_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jobject jarg4) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  GDALProgressFunc arg4 ;
  void *arg5 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    if ( jarg4 != 0 ) {
      sProgressInfo.pJavaCallback = jarg4;
      arg4 = JavaProgressProxy;
      arg5 = &sProgressInfo;
    }
    else
    {
      arg4 = NULL;
      arg5 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)RegenerateOverview(arg1,arg2,(char const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RegenerateOverview_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)RegenerateOverview(arg1,arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_RegenerateOverview_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)RegenerateOverview(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_GridCreate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jobjectArray jarg2, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jint jarg10, jint jarg11, jint jarg12, jobject jarg13, jobject jarg15) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  int arg10 ;
  int arg11 ;
  GDALDataType arg12 ;
  void *arg13 = (void *) 0 ;
  long arg14 ;
  GDALProgressFunc arg15 ;
  void *arg16 = (void *) 0 ;
  int xyzLen2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    /* %typemap(in) ( int nCount, double *x, double *y, double *z ) (int xyzLen2) */
    arg2 = (jarg2) ? jenv->GetArrayLength(jarg2) : 0;
    xyzLen2 = arg2;
    arg3 = (double*)CPLMalloc(arg2 * sizeof(double));
    arg4 = (double*)CPLMalloc(arg2 * sizeof(double));
    arg5 = (double*)CPLMalloc(arg2 * sizeof(double));
    int i;
    for (i = 0; i<arg2; i++) {
      jdoubleArray doubleArray = (jdoubleArray)jenv->GetObjectArrayElement(jarg2, i);
      if (doubleArray == NULL)
      {
        CPLFree (arg3);
        CPLFree (arg4);
        CPLFree (arg5);
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
        return 0;
      }
      int nDim = jenv->GetArrayLength(doubleArray);
      if (nDim != 2 && nDim != 3)
      {
        CPLFree (arg3);
        CPLFree (arg4);
        CPLFree (arg5);
        SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "wrong array dimensions");
        return 0;
      }
      double* pElements = jenv->GetDoubleArrayElements(doubleArray, NULL);
      arg3[i] = pElements[0];
      arg4[i] = pElements[1];
      if (nDim == 3)
      arg5[i] = pElements[2];
      else
      arg5[i] = 0;
      jenv->ReleaseDoubleArrayElements(doubleArray, pElements, JNI_ABORT);
    }
  }
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (int)jarg11; 
  arg12 = (GDALDataType)jarg12; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg13 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg13 = jenv->GetDirectBufferAddress(jarg13);
    if (arg13 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg14 = (long) ((jenv->GetDirectBufferCapacity(jarg13) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg13));
  }
  {
    if ( jarg15 != 0 ) {
      sProgressInfo.pJavaCallback = jarg15;
      arg15 = JavaProgressProxy;
      arg16 = &sProgressInfo;
    }
    else
    {
      arg15 = NULL;
      arg16 = NULL;
    }
  }
  result = (int)wrapper_GridCreate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (jint)result; 
  {
    /* %typemap(argout) ( int nCount, double *x, double *y, double *z ) */
    int i;
    for (i = 0; i<arg2; i++) {
      jdoubleArray doubleArray = (jdoubleArray)jenv->GetObjectArrayElement(jarg2, i);
      int nDim = jenv->GetArrayLength(doubleArray);
      jenv->SetDoubleArrayRegion(doubleArray, (jsize)0, (jsize)1, &arg3[i]);
      jenv->SetDoubleArrayRegion(doubleArray, (jsize)1, (jsize)1, &arg4[i]);
      if (nDim == 3)
      jenv->SetDoubleArrayRegion(doubleArray, (jsize)2, (jsize)1, &arg5[i]);
    }
    CPLFree(arg3);
    CPLFree(arg4);
    CPLFree(arg5);
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_GridCreate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jobjectArray jarg2, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jint jarg10, jint jarg11, jint jarg12, jobject jarg13) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  int arg10 ;
  int arg11 ;
  GDALDataType arg12 ;
  void *arg13 = (void *) 0 ;
  long arg14 ;
  int xyzLen2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    /* %typemap(in) ( int nCount, double *x, double *y, double *z ) (int xyzLen2) */
    arg2 = (jarg2) ? jenv->GetArrayLength(jarg2) : 0;
    xyzLen2 = arg2;
    arg3 = (double*)CPLMalloc(arg2 * sizeof(double));
    arg4 = (double*)CPLMalloc(arg2 * sizeof(double));
    arg5 = (double*)CPLMalloc(arg2 * sizeof(double));
    int i;
    for (i = 0; i<arg2; i++) {
      jdoubleArray doubleArray = (jdoubleArray)jenv->GetObjectArrayElement(jarg2, i);
      if (doubleArray == NULL)
      {
        CPLFree (arg3);
        CPLFree (arg4);
        CPLFree (arg5);
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
        return 0;
      }
      int nDim = jenv->GetArrayLength(doubleArray);
      if (nDim != 2 && nDim != 3)
      {
        CPLFree (arg3);
        CPLFree (arg4);
        CPLFree (arg5);
        SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "wrong array dimensions");
        return 0;
      }
      double* pElements = jenv->GetDoubleArrayElements(doubleArray, NULL);
      arg3[i] = pElements[0];
      arg4[i] = pElements[1];
      if (nDim == 3)
      arg5[i] = pElements[2];
      else
      arg5[i] = 0;
      jenv->ReleaseDoubleArrayElements(doubleArray, pElements, JNI_ABORT);
    }
  }
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = (double)jarg9; 
  arg10 = (int)jarg10; 
  arg11 = (int)jarg11; 
  arg12 = (GDALDataType)jarg12; 
  {
    /* %typemap(in, numinputs=1) (void * nioBuffer, long nioBufferSize)  */
    if (jarg13 == 0)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
      return 0;
    }
    arg13 = jenv->GetDirectBufferAddress(jarg13);
    if (arg13 == NULL)
    {
      SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException,
        "Unable to get address of direct buffer. Buffer must be allocated direct.");
      return 0;
    }
    
    /* The cast to long is actually not that correct, but anyway afterwards */
    /* we check that the theoretical minimum buffer size is not larger than INT_MAX */
    /* so truncating to INT_MAX is OK */
    arg14 = (long) ((jenv->GetDirectBufferCapacity(jarg13) > INT_MAX) ? INT_MAX : jenv->GetDirectBufferCapacity(jarg13));
  }
  result = (int)wrapper_GridCreate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jresult = (jint)result; 
  {
    /* %typemap(argout) ( int nCount, double *x, double *y, double *z ) */
    int i;
    for (i = 0; i<arg2; i++) {
      jdoubleArray doubleArray = (jdoubleArray)jenv->GetObjectArrayElement(jarg2, i);
      int nDim = jenv->GetArrayLength(doubleArray);
      jenv->SetDoubleArrayRegion(doubleArray, (jsize)0, (jsize)1, &arg3[i]);
      jenv->SetDoubleArrayRegion(doubleArray, (jsize)1, (jsize)1, &arg4[i]);
      if (nDim == 3)
      jenv->SetDoubleArrayRegion(doubleArray, (jsize)2, (jsize)1, &arg5[i]);
    }
    CPLFree(arg3);
    CPLFree(arg4);
    CPLFree(arg5);
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ContourGenerate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdoubleArray jarg4, jint jarg6, jdouble jarg7, jlong jarg8, jobject jarg8_, jint jarg9, jint jarg10, jobject jarg11) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double arg7 ;
  OGRLayerShadow *arg8 = (OGRLayerShadow *) 0 ;
  int arg9 ;
  int arg10 ;
  GDALProgressFunc arg11 ;
  void *arg12 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    /* %typemap(in) (int nList, double* pList) */
    /* check if is List */
    if (jarg4)
    {
      arg4 = jenv->GetArrayLength(jarg4);
      if (arg4 == 0)
      arg5 = NULL;
      else
      arg5 = (double *)jenv->GetDoubleArrayElements(jarg4, NULL);
    }
    else
    {
      arg4 = 0;
      arg5 = NULL;
    }
  }
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = *(OGRLayerShadow **)&jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  {
    if ( jarg11 != 0 ) {
      sProgressInfo.pJavaCallback = jarg11;
      arg11 = JavaProgressProxy;
      arg12 = &sProgressInfo;
    }
    else
    {
      arg11 = NULL;
      arg12 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg8) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)ContourGenerate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, double* pList) */
  }
  {
    /* %typemap(freearg) (int nList, double* pList) */
    if (arg5) {
      jenv->ReleaseDoubleArrayElements(jarg4, arg5, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_ContourGenerate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdoubleArray jarg4, jint jarg6, jdouble jarg7, jlong jarg8, jobject jarg8_, jint jarg9, jint jarg10) {
  jint jresult = 0 ;
  GDALRasterBandShadow *arg1 = (GDALRasterBandShadow *) 0 ;
  double arg2 ;
  double arg3 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double arg7 ;
  OGRLayerShadow *arg8 = (OGRLayerShadow *) 0 ;
  int arg9 ;
  int arg10 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(GDALRasterBandShadow **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    /* %typemap(in) (int nList, double* pList) */
    /* check if is List */
    if (jarg4)
    {
      arg4 = jenv->GetArrayLength(jarg4);
      if (arg4 == 0)
      arg5 = NULL;
      else
      arg5 = (double *)jenv->GetDoubleArrayElements(jarg4, NULL);
    }
    else
    {
      arg4 = 0;
      arg5 = NULL;
    }
  }
  arg6 = (int)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = *(OGRLayerShadow **)&jarg8; 
  arg9 = (int)jarg9; 
  arg10 = (int)jarg10; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg8) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)ContourGenerate(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int nList, double* pList) */
  }
  {
    /* %typemap(freearg) (int nList, double* pList) */
    if (arg5) {
      jenv->ReleaseDoubleArrayElements(jarg4, arg5, JNI_ABORT);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_AutoCreateWarpedVRT_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  GDALResampleAlg arg4 ;
  double arg5 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (GDALResampleAlg)jarg4; 
  arg5 = (double)jarg5; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)AutoCreateWarpedVRT(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_AutoCreateWarpedVRT_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  GDALResampleAlg arg4 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (GDALResampleAlg)jarg4; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)AutoCreateWarpedVRT(arg1,(char const *)arg2,(char const *)arg3,arg4);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_AutoCreateWarpedVRT_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)AutoCreateWarpedVRT(arg1,(char const *)arg2,(char const *)arg3);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_AutoCreateWarpedVRT_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  char *arg2 = (char *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)AutoCreateWarpedVRT(arg1,(char const *)arg2);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_AutoCreateWarpedVRT_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)AutoCreateWarpedVRT(arg1);
  *(GDALDatasetShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_CreatePansharpenedVRT(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jobjectArray jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  int arg3 ;
  GDALRasterBandShadow **arg4 = (GDALRasterBandShadow **) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  {
    /* %typemap(in)(int object_list_count, GDALRasterBandShadow **poObjects) */
    /* check if is List */
    if (jarg3)
    {
      arg3 = jenv->GetArrayLength(jarg3);
      if (arg3 == 0)
      arg4 = NULL;
      else
      {
        arg4 = (GDALRasterBandShadow**) malloc(sizeof(GDALRasterBandShadow*) * arg3);
        int i;
        for (i = 0; i<arg3; i++) {
          jobject obj = (jobject)jenv->GetObjectArrayElement(jarg3, i);
          if (obj == NULL)
          {
            free (arg4 );
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
            return 0;
          }
          const jclass klass = jenv->FindClass("org/gdal/gdal/Band");
          const jmethodID getCPtr = jenv->GetStaticMethodID(klass, "getCPtr", "(Lorg/gdal/gdal/Band;)J");
          arg4[i] = (GDALRasterBandShadow*) jenv->CallStaticLongMethod(klass, getCPtr, obj);
        }
      }
    }
    else
    {
      arg3 = 0;
      arg4 = NULL;
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)CreatePansharpenedVRT((char const *)arg1,arg2,arg3,arg4);
  *(GDALDatasetShadow **)&jresult = result; 
  {
    /* %typemap(argout) (int object_list_count, GDALRasterBandShadow **poObjects) */
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) (int object_list_count, GDALRasterBandShadow **poObjects) */
    if (arg4) {
      free((void*) arg4);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1Transformer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jobject jarg3) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char **arg3 = (char **) 0 ;
  GDALTransformerInfoShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  {
    /* %typemap(in) char **options */
    arg3 = NULL;
    if(jarg3 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg3, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg3);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg3 = CSLAddString(arg3,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (GDALTransformerInfoShadow *)new_GDALTransformerInfoShadow(arg1,arg2,arg3);
  *(GDALTransformerInfoShadow **)&jresult = result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1Transformer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDALTransformerInfoShadow **)&jarg1; 
  delete_GDALTransformerInfoShadow(arg1);
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Transformer_1TransformPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  jint jresult = 0 ;
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  int arg2 ;
  double *arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALTransformerInfoShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    /* %typemap(in) (double argout[ANY]) */
    if(jarg3 == NULL || jenv->GetArrayLength(jarg3) != 3) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 3);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return 0;
    }
    arg3 = (double *)jenv->GetDoubleArrayElements(jarg3, NULL);
  }
  result = (int)GDALTransformerInfoShadow_TransformPoint__SWIG_0(arg1,arg2,arg3);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (double argout[ANY]) */
  }
  {
    /* %typemap(freearg) (double argout[ANY]) */
    jenv->ReleaseDoubleArrayElements(jarg3, (jdouble *)arg3, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Transformer_1TransformPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jint jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  jint jresult = 0 ;
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  double *arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALTransformerInfoShadow **)&jarg1; 
  {
    /* %typemap(in) (double argout[ANY]) */
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) != 3) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 3);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return 0;
    }
    arg2 = (double *)jenv->GetDoubleArrayElements(jarg2, NULL);
  }
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (int)GDALTransformerInfoShadow_TransformPoint__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (double argout[ANY]) */
  }
  {
    /* %typemap(freearg) (double argout[ANY]) */
    jenv->ReleaseDoubleArrayElements(jarg2, (jdouble *)arg2, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Transformer_1TransformPoint_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jint jarg3, jdouble jarg4, jdouble jarg5) {
  jint jresult = 0 ;
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  double *arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALTransformerInfoShadow **)&jarg1; 
  {
    /* %typemap(in) (double argout[ANY]) */
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) != 3) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 3);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return 0;
    }
    arg2 = (double *)jenv->GetDoubleArrayElements(jarg2, NULL);
  }
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = (int)GDALTransformerInfoShadow_TransformPoint__SWIG_1(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (double argout[ANY]) */
  }
  {
    /* %typemap(freearg) (double argout[ANY]) */
    jenv->ReleaseDoubleArrayElements(jarg2, (jdouble *)arg2, 0);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Transformer_1TransformPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobjectArray jarg3, jintArray jarg7) {
  jint jresult = 0 ;
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  int *arg7 = (int *) 0 ;
  int xyzLen3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GDALTransformerInfoShadow **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    /* %typemap(in) ( int nCount, double *x, double *y, double *z ) (int xyzLen3) */
    arg3 = (jarg3) ? jenv->GetArrayLength(jarg3) : 0;
    xyzLen3 = arg3;
    arg4 = (double*)CPLMalloc(arg3 * sizeof(double));
    arg5 = (double*)CPLMalloc(arg3 * sizeof(double));
    arg6 = (double*)CPLMalloc(arg3 * sizeof(double));
    int i;
    for (i = 0; i<arg3; i++) {
      jdoubleArray doubleArray = (jdoubleArray)jenv->GetObjectArrayElement(jarg3, i);
      if (doubleArray == NULL)
      {
        CPLFree (arg4);
        CPLFree (arg5);
        CPLFree (arg6);
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
        return 0;
      }
      int nDim = jenv->GetArrayLength(doubleArray);
      if (nDim != 2 && nDim != 3)
      {
        CPLFree (arg4);
        CPLFree (arg5);
        CPLFree (arg6);
        SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "wrong array dimensions");
        return 0;
      }
      double* pElements = jenv->GetDoubleArrayElements(doubleArray, NULL);
      arg4[i] = pElements[0];
      arg5[i] = pElements[1];
      if (nDim == 3)
      arg6[i] = pElements[2];
      else
      arg6[i] = 0;
      jenv->ReleaseDoubleArrayElements(doubleArray, pElements, JNI_ABORT);
    }
  }
  {
    /* %typemap(in) ( int *panSuccess ) */
    if (jarg7 == NULL)
    {
      arg7 = (int*)CPLCalloc(xyzLen3, sizeof(int));
    }
    else
    {
      int len = jenv->GetArrayLength(jarg7);
      /* HACK */
      if (len != xyzLen3)
      {
        SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "wrong array dimensions");
        return 0;
      }
      arg7 = (int*)CPLCalloc(len, sizeof(int));
    }
  }
  result = (int)GDALTransformerInfoShadow_TransformPoints(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  {
    /* %typemap(argout) ( int nCount, double *x, double *y, double *z ) */
    int i;
    for (i = 0; i<arg3; i++) {
      jdoubleArray doubleArray = (jdoubleArray)jenv->GetObjectArrayElement(jarg3, i);
      int nDim = jenv->GetArrayLength(doubleArray);
      jenv->SetDoubleArrayRegion(doubleArray, (jsize)0, (jsize)1, &arg4[i]);
      jenv->SetDoubleArrayRegion(doubleArray, (jsize)1, (jsize)1, &arg5[i]);
      if (nDim == 3)
      jenv->SetDoubleArrayRegion(doubleArray, (jsize)2, (jsize)1, &arg6[i]);
    }
    CPLFree(arg4);
    CPLFree(arg5);
    CPLFree(arg6);
  }
  {
    /* %typemap(argout) ( int *panSuccess ) */
    if (jarg7)
    jenv->SetIntArrayRegion(jarg7, (jsize)0, (jsize)xyzLen3, (jint*)arg7);
    CPLFree(arg7);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Transformer_1TransformGeolocations_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jobject jarg5, jobject jarg7) {
  jint jresult = 0 ;
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg4 = (GDALRasterBandShadow *) 0 ;
  GDALProgressFunc arg5 ;
  void *arg6 = (void *) 0 ;
  char **arg7 = (char **) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(GDALTransformerInfoShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(GDALRasterBandShadow **)&jarg3; 
  arg4 = *(GDALRasterBandShadow **)&jarg4; 
  {
    if ( jarg5 != 0 ) {
      sProgressInfo.pJavaCallback = jarg5;
      arg5 = JavaProgressProxy;
      arg6 = &sProgressInfo;
    }
    else
    {
      arg5 = NULL;
      arg6 = NULL;
    }
  }
  {
    /* %typemap(in) char **options */
    arg7 = NULL;
    if(jarg7 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg7, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg7);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg7 = CSLAddString(arg7,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg4) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)GDALTransformerInfoShadow_TransformGeolocations__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg7 );
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Transformer_1TransformGeolocations_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jobject jarg5) {
  jint jresult = 0 ;
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg4 = (GDALRasterBandShadow *) 0 ;
  GDALProgressFunc arg5 ;
  void *arg6 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(GDALTransformerInfoShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(GDALRasterBandShadow **)&jarg3; 
  arg4 = *(GDALRasterBandShadow **)&jarg4; 
  {
    if ( jarg5 != 0 ) {
      sProgressInfo.pJavaCallback = jarg5;
      arg5 = JavaProgressProxy;
      arg6 = &sProgressInfo;
    }
    else
    {
      arg5 = NULL;
      arg6 = NULL;
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg4) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)GDALTransformerInfoShadow_TransformGeolocations__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Transformer_1TransformGeolocations_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  GDALTransformerInfoShadow *arg1 = (GDALTransformerInfoShadow *) 0 ;
  GDALRasterBandShadow *arg2 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg3 = (GDALRasterBandShadow *) 0 ;
  GDALRasterBandShadow *arg4 = (GDALRasterBandShadow *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(GDALTransformerInfoShadow **)&jarg1; 
  arg2 = *(GDALRasterBandShadow **)&jarg2; 
  arg3 = *(GDALRasterBandShadow **)&jarg3; 
  arg4 = *(GDALRasterBandShadow **)&jarg4; 
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg4) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (int)GDALTransformerInfoShadow_TransformGeolocations__SWIG_0(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_ApplyVerticalShiftGrid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jdouble jarg4, jdouble jarg5, jobject jarg6) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  bool arg3 ;
  double arg4 ;
  double arg5 ;
  char **arg6 = (char **) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    /* %typemap(in) char **options */
    arg6 = NULL;
    if(jarg6 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg6, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg6);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg6 = CSLAddString(arg6,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)ApplyVerticalShiftGrid(arg1,arg2,arg3,arg4,arg5,arg6);
  *(GDALDatasetShadow **)&jresult = result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg6 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_ApplyVerticalShiftGrid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jdouble jarg4, jdouble jarg5) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  bool arg3 ;
  double arg4 ;
  double arg5 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)ApplyVerticalShiftGrid(arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_ApplyVerticalShiftGrid_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  bool arg3 ;
  double arg4 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (double)jarg4; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)ApplyVerticalShiftGrid(arg1,arg2,arg3,arg4);
  *(GDALDatasetShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_ApplyVerticalShiftGrid_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  bool arg3 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)ApplyVerticalShiftGrid(arg1,arg2,arg3);
  *(GDALDatasetShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_ApplyVerticalShiftGrid_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)ApplyVerticalShiftGrid(arg1,arg2);
  *(GDALDatasetShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_ApplyGeoTransform(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdouble jarg2, jdouble jarg3, jdoubleArray jarg4, jdoubleArray jarg5) {
  double *arg1 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double temp4 ;
  double temp5 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) (double argin[ANY]) */
    if(jarg1 == NULL || jenv->GetArrayLength(jarg1) != 6) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 6);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return ;
    }
    arg1 = (double *)jenv->GetDoubleArrayElements(jarg1, NULL);
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg4) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp4 = (double)0;
    arg4 = &temp4; 
  }
  {
    if (!jarg5) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg5) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp5 = (double)0;
    arg5 = &temp5; 
  }
  GDALApplyGeoTransform(arg1,arg2,arg3,arg4,arg5);
  {
    /* %typemap(argout) (double argin[ANY]) */
  }
  {
    jdouble jvalue = (jdouble)temp4;
    jenv->SetDoubleArrayRegion(jarg4, 0, 1, &jvalue);
  }
  {
    jdouble jvalue = (jdouble)temp5;
    jenv->SetDoubleArrayRegion(jarg5, 0, 1, &jvalue);
  }
  {
    /* %typemap(in) (double argin[ANY]) */
    if(arg1) {
      jenv->ReleaseDoubleArrayElements(jarg1, (jdouble *)arg1, JNI_ABORT);
    }
  }
  
  
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_InvGeoTransform(JNIEnv *jenv, jclass jcls, jdoubleArray jarg1, jdoubleArray jarg2) {
  jint jresult = 0 ;
  double *arg1 ;
  double *arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) (double argin[ANY]) */
    if(jarg1 == NULL || jenv->GetArrayLength(jarg1) != 6) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 6);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return 0;
    }
    arg1 = (double *)jenv->GetDoubleArrayElements(jarg1, NULL);
  }
  {
    /* %typemap(in) (double argout[ANY]) */
    if(jarg2 == NULL || jenv->GetArrayLength(jarg2) != 6) {
      char errorMsg[512];
      sprintf(errorMsg, "array of size %d expected", 6);
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, errorMsg);
      return 0;
    }
    arg2 = (double *)jenv->GetDoubleArrayElements(jarg2, NULL);
  }
  result = (int)GDALInvGeoTransform(arg1,arg2);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (double argin[ANY]) */
  }
  {
    /* %typemap(argout) (double argout[ANY]) */
  }
  {
    /* %typemap(in) (double argin[ANY]) */
    if(arg1) {
      jenv->ReleaseDoubleArrayElements(jarg1, (jdouble *)arg1, JNI_ABORT);
    }
  }
  {
    /* %typemap(freearg) (double argout[ANY]) */
    jenv->ReleaseDoubleArrayElements(jarg2, (jdouble *)arg2, 0);
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_VersionInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) (const char* stringWithDefaultValue) */
    if (jarg1)
    {
      arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    }
  }
  result = (char *)wrapper_GDALVersionInfo((char const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  {
    /* %typemap(freearg) (const char* stringWithDefaultValue) */
    if (jarg1)
    {
      jenv->ReleaseStringUTFChars(jarg1, (char*)arg1);
    }
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_VersionInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)wrapper_GDALVersionInfo();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_AllRegister(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  GDALAllRegister();
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_GDALDestroyDriverManager(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  GDALDestroyDriverManager();
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_GetCacheMax(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)wrapper_GDALGetCacheMax();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_GetCacheUsed(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)wrapper_GDALGetCacheUsed();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_SetCacheMax(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  wrapper_GDALSetCacheMax(arg1);
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_GetDataTypeSize(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  GDALDataType arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (GDALDataType)jarg1; 
  result = (int)GDALGetDataTypeSize(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_DataTypeIsComplex(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  GDALDataType arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (GDALDataType)jarg1; 
  result = (int)GDALDataTypeIsComplex(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GetDataTypeName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  GDALDataType arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (GDALDataType)jarg1; 
  result = (char *)GDALGetDataTypeName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_GetDataTypeByName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDataType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (GDALDataType)GDALGetDataTypeByName((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GetColorInterpretationName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  GDALColorInterp arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (GDALColorInterp)jarg1; 
  result = (char *)GDALGetColorInterpretationName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GetPaletteInterpretationName(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  GDALPaletteInterp arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (GDALPaletteInterp)jarg1; 
  result = (char *)GDALGetPaletteInterpretationName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_DecToDMS_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jdouble jarg1, jstring jarg2, jint jarg3) {
  jstring jresult = 0 ;
  double arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (char *)wrapper_GDALDecToDMS(arg1,(char const *)arg2,arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_DecToDMS_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)wrapper_GDALDecToDMS(arg1,(char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_gdal_gdal_gdalJNI_PackedDMSToDec(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)GDALPackedDMSToDec(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_org_gdal_gdal_gdalJNI_DecToPackedDMS(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (double)GDALDecToPackedDMS(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_ParseXMLString(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  CPLXMLNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (CPLXMLNode *)CPLParseXMLString(arg1);
  *(CPLXMLNode **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_SerializeXMLTree(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CPLXMLNode *arg1 = (CPLXMLNode *) 0 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CPLXMLNode **)&jarg1; 
  result = (retStringAndCPLFree *)CPLSerializeXMLTree(arg1);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GetJPEG2000StructureAsString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jobject jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    /* %typemap(in) char **options */
    arg2 = NULL;
    if(jarg2 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg2, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg2);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg2 = CSLAddString(arg2,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (retStringAndCPLFree *)GetJPEG2000StructureAsString((char const *)arg1,arg2);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg2 );
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GetJPEG2000StructureAsString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (retStringAndCPLFree *)GetJPEG2000StructureAsString((char const *)arg1);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_GetDriverCount(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)GetDriverCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_GetDriverByName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDriverShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDriverShadow *)GetDriverByName((char const *)arg1);
  *(GDALDriverShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_GetDriver(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  GDALDriverShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (GDALDriverShadow *)GetDriver(arg1);
  *(GDALDriverShadow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALAccess arg2 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (GDALAccess)jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)Open((char const *)arg1,arg2);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)Open((char const *)arg1);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_OpenEx_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg3, jobject jarg4, jobject jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  char **arg3 = (char **) 0 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (unsigned int)jarg2; 
  {
    /* %typemap(in) char **options */
    arg3 = NULL;
    if(jarg3 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg3, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg3);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg3 = CSLAddString(arg3,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    /* %typemap(in) char **options */
    arg4 = NULL;
    if(jarg4 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg4, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg4);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg4 = CSLAddString(arg4,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    /* %typemap(in) char **options */
    arg5 = NULL;
    if(jarg5 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg5, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg5);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg5 = CSLAddString(arg5,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)OpenEx((char const *)arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg4 );
  }
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg5 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_OpenEx_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg3, jobject jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  char **arg3 = (char **) 0 ;
  char **arg4 = (char **) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (unsigned int)jarg2; 
  {
    /* %typemap(in) char **options */
    arg3 = NULL;
    if(jarg3 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg3, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg3);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg3 = CSLAddString(arg3,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    /* %typemap(in) char **options */
    arg4 = NULL;
    if(jarg4 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg4, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg4);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg4 = CSLAddString(arg4,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)OpenEx((char const *)arg1,arg2,arg3,arg4);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg4 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_OpenEx_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  char **arg3 = (char **) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (unsigned int)jarg2; 
  {
    /* %typemap(in) char **options */
    arg3 = NULL;
    if(jarg3 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg3, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg3);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg3 = CSLAddString(arg3,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)OpenEx((char const *)arg1,arg2,arg3);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_OpenEx_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (unsigned int)jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)OpenEx((char const *)arg1,arg2);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_OpenEx_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)OpenEx((char const *)arg1);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_OpenShared_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALAccess arg2 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (GDALAccess)jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)OpenShared((char const *)arg1,arg2);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_OpenShared_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)OpenShared((char const *)arg1);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_IdentifyDriver_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jobject jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  GDALDriverShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    /* %typemap(in) char **options */
    arg2 = NULL;
    if(jarg2 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg2, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg2);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg2 = CSLAddString(arg2,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDriverShadow *)IdentifyDriver((char const *)arg1,arg2);
  *(GDALDriverShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg2 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_IdentifyDriver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDriverShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDriverShadow *)IdentifyDriver((char const *)arg1);
  *(GDALDriverShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_IdentifyDriverEx_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg3, jobject jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  char **arg3 = (char **) 0 ;
  char **arg4 = (char **) 0 ;
  GDALDriverShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (unsigned int)jarg2; 
  {
    /* %typemap(in) char **options */
    arg3 = NULL;
    if(jarg3 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg3, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg3);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg3 = CSLAddString(arg3,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    /* %typemap(in) char **options */
    arg4 = NULL;
    if(jarg4 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg4, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg4);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg4 = CSLAddString(arg4,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDriverShadow *)IdentifyDriverEx((char const *)arg1,arg2,arg3,arg4);
  *(GDALDriverShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg4 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_IdentifyDriverEx_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  char **arg3 = (char **) 0 ;
  GDALDriverShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (unsigned int)jarg2; 
  {
    /* %typemap(in) char **options */
    arg3 = NULL;
    if(jarg3 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg3, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg3);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg3 = CSLAddString(arg3,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDriverShadow *)IdentifyDriverEx((char const *)arg1,arg2,arg3);
  *(GDALDriverShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg3 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_IdentifyDriverEx_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  GDALDriverShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (unsigned int)jarg2; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDriverShadow *)IdentifyDriverEx((char const *)arg1,arg2);
  *(GDALDriverShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_IdentifyDriverEx_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDriverShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDriverShadow *)IdentifyDriverEx((char const *)arg1);
  *(GDALDriverShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_GeneralCmdLineProcessor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jobject jarg1, jint jarg2) {
  jobject jresult = 0 ;
  char **arg1 = (char **) 0 ;
  int arg2 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) char **options */
    arg1 = NULL;
    if(jarg1 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg1, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg1);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg1 = CSLAddString(arg1,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  arg2 = (int)jarg2; 
  result = (char **)GeneralCmdLineProcessor(arg1,arg2);
  {
    /* %typemap(out) char **CSL -> vector of strings */
    char **stringarray = result;
    const jclass vector = jenv->FindClass("java/util/Vector");
    const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
    const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
    
    jresult = jenv->NewObject(vector, constructor);
    if ( stringarray != NULL ) {
      while(*stringarray != NULL) {
        /*printf("working on string %s\n", *stringarray);*/
        jstring value = (jstring)jenv->NewStringUTF(*stringarray);
        jenv->CallBooleanMethod(jresult, add, value);
        jenv->DeleteLocalRef(value);
        stringarray++;
      }
    }
    CSLDestroy(result);
  }
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg1 );
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_org_gdal_gdal_gdalJNI_GeneralCmdLineProcessor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jobject jresult = 0 ;
  char **arg1 = (char **) 0 ;
  char **result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) char **options */
    arg1 = NULL;
    if(jarg1 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg1, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg1);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg1 = CSLAddString(arg1,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (char **)GeneralCmdLineProcessor(arg1);
  {
    /* %typemap(out) char **CSL -> vector of strings */
    char **stringarray = result;
    const jclass vector = jenv->FindClass("java/util/Vector");
    const jmethodID constructor = jenv->GetMethodID(vector, "<init>", "()V");
    const jmethodID add = jenv->GetMethodID(vector, "add", "(Ljava/lang/Object;)Z");
    
    jresult = jenv->NewObject(vector, constructor);
    if ( stringarray != NULL ) {
      while(*stringarray != NULL) {
        /*printf("working on string %s\n", *stringarray);*/
        jstring value = (jstring)jenv->NewStringUTF(*stringarray);
        jenv->CallBooleanMethod(jresult, add, value);
        jenv->DeleteLocalRef(value);
        stringarray++;
      }
    }
    CSLDestroy(result);
  }
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg1 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1InfoOptions(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  char **arg1 = (char **) 0 ;
  GDALInfoOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) char **options */
    arg1 = NULL;
    if(jarg1 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg1, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg1);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg1 = CSLAddString(arg1,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (GDALInfoOptions *)new_GDALInfoOptions(arg1);
  *(GDALInfoOptions **)&jresult = result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg1 );
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1InfoOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDALInfoOptions *arg1 = (GDALInfoOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDALInfoOptions **)&jarg1; 
  delete_GDALInfoOptions(arg1);
}


SWIGEXPORT jstring JNICALL Java_org_gdal_gdal_gdalJNI_GDALInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALInfoOptions *arg2 = (GDALInfoOptions *) 0 ;
  retStringAndCPLFree *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALInfoOptions **)&jarg2; 
  result = (retStringAndCPLFree *)GDALInfo(arg1,arg2);
  {
    /* %typemap(out) (retStringAndCPLFree*) */
    if(result)
    {
      jresult = jenv->NewStringUTF((const char *)result);
      CPLFree(result);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1TranslateOptions(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  char **arg1 = (char **) 0 ;
  GDALTranslateOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) char **options */
    arg1 = NULL;
    if(jarg1 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg1, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg1);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg1 = CSLAddString(arg1,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (GDALTranslateOptions *)new_GDALTranslateOptions(arg1);
  *(GDALTranslateOptions **)&jresult = result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg1 );
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1TranslateOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDALTranslateOptions *arg1 = (GDALTranslateOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDALTranslateOptions **)&jarg1; 
  delete_GDALTranslateOptions(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Translate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALTranslateOptions *arg3 = (GDALTranslateOptions *) 0 ;
  GDALProgressFunc arg4 ;
  void *arg5 = (void *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALTranslateOptions **)&jarg3; 
  {
    if ( jarg4 != 0 ) {
      sProgressInfo.pJavaCallback = jarg4;
      arg4 = JavaProgressProxy;
      arg5 = &sProgressInfo;
    }
    else
    {
      arg4 = NULL;
      arg5 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALTranslate((char const *)arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Translate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALTranslateOptions *arg3 = (GDALTranslateOptions *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALTranslateOptions **)&jarg3; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALTranslate((char const *)arg1,arg2,arg3);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1WarpOptions(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  char **arg1 = (char **) 0 ;
  GDALWarpAppOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) char **options */
    arg1 = NULL;
    if(jarg1 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg1, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg1);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg1 = CSLAddString(arg1,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (GDALWarpAppOptions *)new_GDALWarpAppOptions(arg1);
  *(GDALWarpAppOptions **)&jresult = result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg1 );
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1WarpOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDALWarpAppOptions *arg1 = (GDALWarpAppOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDALWarpAppOptions **)&jarg1; 
  delete_GDALWarpAppOptions(arg1);
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Warp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg4, jobject jarg4_, jobject jarg5) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  GDALDatasetShadow **arg3 = (GDALDatasetShadow **) 0 ;
  GDALWarpAppOptions *arg4 = (GDALWarpAppOptions *) 0 ;
  GDALProgressFunc arg5 ;
  void *arg6 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  {
    /* %typemap(in)(int object_list_count, GDALDatasetShadow **poObjects) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      {
        arg3 = (GDALDatasetShadow**) malloc(sizeof(GDALDatasetShadow*) * arg2);
        int i;
        for (i = 0; i<arg2; i++) {
          jobject obj = (jobject)jenv->GetObjectArrayElement(jarg2, i);
          if (obj == NULL)
          {
            free (arg3 );
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
            return 0;
          }
          const jclass klass = jenv->FindClass("org/gdal/gdal/Dataset");
          const jmethodID getCPtr = jenv->GetStaticMethodID(klass, "getCPtr", "(Lorg/gdal/gdal/Dataset;)J");
          arg3[i] = (GDALDatasetShadow*) jenv->CallStaticLongMethod(klass, getCPtr, obj);
        }
      }
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  arg4 = *(GDALWarpAppOptions **)&jarg4; 
  {
    if ( jarg5 != 0 ) {
      sProgressInfo.pJavaCallback = jarg5;
      arg5 = JavaProgressProxy;
      arg6 = &sProgressInfo;
    }
    else
    {
      arg5 = NULL;
      arg6 = NULL;
    }
  }
  result = (int)wrapper_GDALWarpDestDS(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int object_list_count, GDALDatasetShadow **poObjects) */
  }
  {
    /* %typemap(freearg) (int object_list_count, GDALDatasetShadow **poObjects) */
    if (arg3) {
      free((void*) arg3);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Warp_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  int arg2 ;
  GDALDatasetShadow **arg3 = (GDALDatasetShadow **) 0 ;
  GDALWarpAppOptions *arg4 = (GDALWarpAppOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  {
    /* %typemap(in)(int object_list_count, GDALDatasetShadow **poObjects) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      {
        arg3 = (GDALDatasetShadow**) malloc(sizeof(GDALDatasetShadow*) * arg2);
        int i;
        for (i = 0; i<arg2; i++) {
          jobject obj = (jobject)jenv->GetObjectArrayElement(jarg2, i);
          if (obj == NULL)
          {
            free (arg3 );
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
            return 0;
          }
          const jclass klass = jenv->FindClass("org/gdal/gdal/Dataset");
          const jmethodID getCPtr = jenv->GetStaticMethodID(klass, "getCPtr", "(Lorg/gdal/gdal/Dataset;)J");
          arg3[i] = (GDALDatasetShadow*) jenv->CallStaticLongMethod(klass, getCPtr, obj);
        }
      }
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  arg4 = *(GDALWarpAppOptions **)&jarg4; 
  result = (int)wrapper_GDALWarpDestDS(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  {
    /* %typemap(argout) (int object_list_count, GDALDatasetShadow **poObjects) */
  }
  {
    /* %typemap(freearg) (int object_list_count, GDALDatasetShadow **poObjects) */
    if (arg3) {
      free((void*) arg3);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Warp_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jobjectArray jarg2, jlong jarg4, jobject jarg4_, jobject jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  GDALDatasetShadow **arg3 = (GDALDatasetShadow **) 0 ;
  GDALWarpAppOptions *arg4 = (GDALWarpAppOptions *) 0 ;
  GDALProgressFunc arg5 ;
  void *arg6 = (void *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    /* %typemap(in)(int object_list_count, GDALDatasetShadow **poObjects) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      {
        arg3 = (GDALDatasetShadow**) malloc(sizeof(GDALDatasetShadow*) * arg2);
        int i;
        for (i = 0; i<arg2; i++) {
          jobject obj = (jobject)jenv->GetObjectArrayElement(jarg2, i);
          if (obj == NULL)
          {
            free (arg3 );
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
            return 0;
          }
          const jclass klass = jenv->FindClass("org/gdal/gdal/Dataset");
          const jmethodID getCPtr = jenv->GetStaticMethodID(klass, "getCPtr", "(Lorg/gdal/gdal/Dataset;)J");
          arg3[i] = (GDALDatasetShadow*) jenv->CallStaticLongMethod(klass, getCPtr, obj);
        }
      }
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  arg4 = *(GDALWarpAppOptions **)&jarg4; 
  {
    if ( jarg5 != 0 ) {
      sProgressInfo.pJavaCallback = jarg5;
      arg5 = JavaProgressProxy;
      arg6 = &sProgressInfo;
    }
    else
    {
      arg5 = NULL;
      arg6 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALWarpDestName((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  *(GDALDatasetShadow **)&jresult = result; 
  {
    /* %typemap(argout) (int object_list_count, GDALDatasetShadow **poObjects) */
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) (int object_list_count, GDALDatasetShadow **poObjects) */
    if (arg3) {
      free((void*) arg3);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Warp_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jobjectArray jarg2, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  GDALDatasetShadow **arg3 = (GDALDatasetShadow **) 0 ;
  GDALWarpAppOptions *arg4 = (GDALWarpAppOptions *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    /* %typemap(in)(int object_list_count, GDALDatasetShadow **poObjects) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      {
        arg3 = (GDALDatasetShadow**) malloc(sizeof(GDALDatasetShadow*) * arg2);
        int i;
        for (i = 0; i<arg2; i++) {
          jobject obj = (jobject)jenv->GetObjectArrayElement(jarg2, i);
          if (obj == NULL)
          {
            free (arg3 );
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
            return 0;
          }
          const jclass klass = jenv->FindClass("org/gdal/gdal/Dataset");
          const jmethodID getCPtr = jenv->GetStaticMethodID(klass, "getCPtr", "(Lorg/gdal/gdal/Dataset;)J");
          arg3[i] = (GDALDatasetShadow*) jenv->CallStaticLongMethod(klass, getCPtr, obj);
        }
      }
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  arg4 = *(GDALWarpAppOptions **)&jarg4; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALWarpDestName((char const *)arg1,arg2,arg3,arg4);
  *(GDALDatasetShadow **)&jresult = result; 
  {
    /* %typemap(argout) (int object_list_count, GDALDatasetShadow **poObjects) */
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) (int object_list_count, GDALDatasetShadow **poObjects) */
    if (arg3) {
      free((void*) arg3);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1VectorTranslateOptions(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  char **arg1 = (char **) 0 ;
  GDALVectorTranslateOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) char **options */
    arg1 = NULL;
    if(jarg1 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg1, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg1);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg1 = CSLAddString(arg1,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (GDALVectorTranslateOptions *)new_GDALVectorTranslateOptions(arg1);
  *(GDALVectorTranslateOptions **)&jresult = result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg1 );
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1VectorTranslateOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDALVectorTranslateOptions *arg1 = (GDALVectorTranslateOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDALVectorTranslateOptions **)&jarg1; 
  delete_GDALVectorTranslateOptions(arg1);
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_VectorTranslate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALVectorTranslateOptions *arg3 = (GDALVectorTranslateOptions *) 0 ;
  GDALProgressFunc arg4 ;
  void *arg5 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALVectorTranslateOptions **)&jarg3; 
  {
    if ( jarg4 != 0 ) {
      sProgressInfo.pJavaCallback = jarg4;
      arg4 = JavaProgressProxy;
      arg5 = &sProgressInfo;
    }
    else
    {
      arg4 = NULL;
      arg5 = NULL;
    }
  }
  result = (int)wrapper_GDALVectorTranslateDestDS(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_VectorTranslate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALVectorTranslateOptions *arg3 = (GDALVectorTranslateOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALVectorTranslateOptions **)&jarg3; 
  result = (int)wrapper_GDALVectorTranslateDestDS(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_VectorTranslate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALVectorTranslateOptions *arg3 = (GDALVectorTranslateOptions *) 0 ;
  GDALProgressFunc arg4 ;
  void *arg5 = (void *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALVectorTranslateOptions **)&jarg3; 
  {
    if ( jarg4 != 0 ) {
      sProgressInfo.pJavaCallback = jarg4;
      arg4 = JavaProgressProxy;
      arg5 = &sProgressInfo;
    }
    else
    {
      arg4 = NULL;
      arg5 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALVectorTranslateDestName((char const *)arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_VectorTranslate_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALVectorTranslateOptions *arg3 = (GDALVectorTranslateOptions *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALVectorTranslateOptions **)&jarg3; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALVectorTranslateDestName((char const *)arg1,arg2,arg3);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1DEMProcessingOptions(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  char **arg1 = (char **) 0 ;
  GDALDEMProcessingOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) char **options */
    arg1 = NULL;
    if(jarg1 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg1, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg1);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg1 = CSLAddString(arg1,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (GDALDEMProcessingOptions *)new_GDALDEMProcessingOptions(arg1);
  *(GDALDEMProcessingOptions **)&jresult = result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg1 );
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1DEMProcessingOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDALDEMProcessingOptions *arg1 = (GDALDEMProcessingOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDALDEMProcessingOptions **)&jarg1; 
  delete_GDALDEMProcessingOptions(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_DEMProcessing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_, jobject jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  GDALDEMProcessingOptions *arg5 = (GDALDEMProcessingOptions *) 0 ;
  GDALProgressFunc arg6 ;
  void *arg7 = (void *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(GDALDEMProcessingOptions **)&jarg5; 
  {
    if ( jarg6 != 0 ) {
      sProgressInfo.pJavaCallback = jarg6;
      arg6 = JavaProgressProxy;
      arg7 = &sProgressInfo;
    }
    else
    {
      arg6 = NULL;
      arg7 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALDEMProcessing((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_DEMProcessing_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  GDALDEMProcessingOptions *arg5 = (GDALDEMProcessingOptions *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(GDALDEMProcessingOptions **)&jarg5; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg3) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALDEMProcessing((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,arg5);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1NearblackOptions(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  char **arg1 = (char **) 0 ;
  GDALNearblackOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) char **options */
    arg1 = NULL;
    if(jarg1 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg1, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg1);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg1 = CSLAddString(arg1,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (GDALNearblackOptions *)new_GDALNearblackOptions(arg1);
  *(GDALNearblackOptions **)&jresult = result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg1 );
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1NearblackOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDALNearblackOptions *arg1 = (GDALNearblackOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDALNearblackOptions **)&jarg1; 
  delete_GDALNearblackOptions(arg1);
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Nearblack_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALNearblackOptions *arg3 = (GDALNearblackOptions *) 0 ;
  GDALProgressFunc arg4 ;
  void *arg5 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALNearblackOptions **)&jarg3; 
  {
    if ( jarg4 != 0 ) {
      sProgressInfo.pJavaCallback = jarg4;
      arg4 = JavaProgressProxy;
      arg5 = &sProgressInfo;
    }
    else
    {
      arg4 = NULL;
      arg5 = NULL;
    }
  }
  result = (int)wrapper_GDALNearblackDestDS(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Nearblack_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALNearblackOptions *arg3 = (GDALNearblackOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALNearblackOptions **)&jarg3; 
  result = (int)wrapper_GDALNearblackDestDS(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Nearblack_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALNearblackOptions *arg3 = (GDALNearblackOptions *) 0 ;
  GDALProgressFunc arg4 ;
  void *arg5 = (void *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALNearblackOptions **)&jarg3; 
  {
    if ( jarg4 != 0 ) {
      sProgressInfo.pJavaCallback = jarg4;
      arg4 = JavaProgressProxy;
      arg5 = &sProgressInfo;
    }
    else
    {
      arg4 = NULL;
      arg5 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALNearblackDestName((char const *)arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Nearblack_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALNearblackOptions *arg3 = (GDALNearblackOptions *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALNearblackOptions **)&jarg3; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALNearblackDestName((char const *)arg1,arg2,arg3);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1GridOptions(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  char **arg1 = (char **) 0 ;
  GDALGridOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) char **options */
    arg1 = NULL;
    if(jarg1 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg1, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg1);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg1 = CSLAddString(arg1,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (GDALGridOptions *)new_GDALGridOptions(arg1);
  *(GDALGridOptions **)&jresult = result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg1 );
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1GridOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDALGridOptions *arg1 = (GDALGridOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDALGridOptions **)&jarg1; 
  delete_GDALGridOptions(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Grid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALGridOptions *arg3 = (GDALGridOptions *) 0 ;
  GDALProgressFunc arg4 ;
  void *arg5 = (void *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALGridOptions **)&jarg3; 
  {
    if ( jarg4 != 0 ) {
      sProgressInfo.pJavaCallback = jarg4;
      arg4 = JavaProgressProxy;
      arg5 = &sProgressInfo;
    }
    else
    {
      arg4 = NULL;
      arg5 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALGrid((char const *)arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Grid_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALGridOptions *arg3 = (GDALGridOptions *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALGridOptions **)&jarg3; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  {
    if (!arg2) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALGrid((char const *)arg1,arg2,arg3);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1RasterizeOptions(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  char **arg1 = (char **) 0 ;
  GDALRasterizeOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) char **options */
    arg1 = NULL;
    if(jarg1 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg1, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg1);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg1 = CSLAddString(arg1,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (GDALRasterizeOptions *)new_GDALRasterizeOptions(arg1);
  *(GDALRasterizeOptions **)&jresult = result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg1 );
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1RasterizeOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDALRasterizeOptions *arg1 = (GDALRasterizeOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDALRasterizeOptions **)&jarg1; 
  delete_GDALRasterizeOptions(arg1);
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Rasterize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALRasterizeOptions *arg3 = (GDALRasterizeOptions *) 0 ;
  GDALProgressFunc arg4 ;
  void *arg5 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALRasterizeOptions **)&jarg3; 
  {
    if ( jarg4 != 0 ) {
      sProgressInfo.pJavaCallback = jarg4;
      arg4 = JavaProgressProxy;
      arg5 = &sProgressInfo;
    }
    else
    {
      arg4 = NULL;
      arg5 = NULL;
    }
  }
  result = (int)wrapper_GDALRasterizeDestDS(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_gdal_gdal_gdalJNI_Rasterize_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  GDALDatasetShadow *arg1 = (GDALDatasetShadow *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALRasterizeOptions *arg3 = (GDALRasterizeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GDALDatasetShadow **)&jarg1; 
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALRasterizeOptions **)&jarg3; 
  result = (int)wrapper_GDALRasterizeDestDS(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Rasterize_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALRasterizeOptions *arg3 = (GDALRasterizeOptions *) 0 ;
  GDALProgressFunc arg4 ;
  void *arg5 = (void *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALRasterizeOptions **)&jarg3; 
  {
    if ( jarg4 != 0 ) {
      sProgressInfo.pJavaCallback = jarg4;
      arg4 = JavaProgressProxy;
      arg5 = &sProgressInfo;
    }
    else
    {
      arg4 = NULL;
      arg5 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALRasterizeDestName((char const *)arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Rasterize_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  GDALDatasetShadow *arg2 = (GDALDatasetShadow *) 0 ;
  GDALRasterizeOptions *arg3 = (GDALRasterizeOptions *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(GDALDatasetShadow **)&jarg2; 
  arg3 = *(GDALRasterizeOptions **)&jarg3; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALRasterizeDestName((char const *)arg1,arg2,arg3);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_new_1BuildVRTOptions(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  char **arg1 = (char **) 0 ;
  GDALBuildVRTOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* %typemap(in) char **options */
    arg1 = NULL;
    if(jarg1 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg1, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg1);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg1 = CSLAddString(arg1,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  result = (GDALBuildVRTOptions *)new_GDALBuildVRTOptions(arg1);
  *(GDALBuildVRTOptions **)&jresult = result; 
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg1 );
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_gdal_gdal_gdalJNI_delete_1BuildVRTOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GDALBuildVRTOptions *arg1 = (GDALBuildVRTOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GDALBuildVRTOptions **)&jarg1; 
  delete_GDALBuildVRTOptions(arg1);
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_BuildVRT_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jobjectArray jarg2, jlong jarg4, jobject jarg4_, jobject jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  GDALDatasetShadow **arg3 = (GDALDatasetShadow **) 0 ;
  GDALBuildVRTOptions *arg4 = (GDALBuildVRTOptions *) 0 ;
  GDALProgressFunc arg5 ;
  void *arg6 = (void *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    /* %typemap(in)(int object_list_count, GDALDatasetShadow **poObjects) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      {
        arg3 = (GDALDatasetShadow**) malloc(sizeof(GDALDatasetShadow*) * arg2);
        int i;
        for (i = 0; i<arg2; i++) {
          jobject obj = (jobject)jenv->GetObjectArrayElement(jarg2, i);
          if (obj == NULL)
          {
            free (arg3 );
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
            return 0;
          }
          const jclass klass = jenv->FindClass("org/gdal/gdal/Dataset");
          const jmethodID getCPtr = jenv->GetStaticMethodID(klass, "getCPtr", "(Lorg/gdal/gdal/Dataset;)J");
          arg3[i] = (GDALDatasetShadow*) jenv->CallStaticLongMethod(klass, getCPtr, obj);
        }
      }
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  arg4 = *(GDALBuildVRTOptions **)&jarg4; 
  {
    if ( jarg5 != 0 ) {
      sProgressInfo.pJavaCallback = jarg5;
      arg5 = JavaProgressProxy;
      arg6 = &sProgressInfo;
    }
    else
    {
      arg5 = NULL;
      arg6 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALBuildVRT_objects((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  *(GDALDatasetShadow **)&jresult = result; 
  {
    /* %typemap(argout) (int object_list_count, GDALDatasetShadow **poObjects) */
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) (int object_list_count, GDALDatasetShadow **poObjects) */
    if (arg3) {
      free((void*) arg3);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_BuildVRT_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jobjectArray jarg2, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  GDALDatasetShadow **arg3 = (GDALDatasetShadow **) 0 ;
  GDALBuildVRTOptions *arg4 = (GDALBuildVRTOptions *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    /* %typemap(in)(int object_list_count, GDALDatasetShadow **poObjects) */
    /* check if is List */
    if (jarg2)
    {
      arg2 = jenv->GetArrayLength(jarg2);
      if (arg2 == 0)
      arg3 = NULL;
      else
      {
        arg3 = (GDALDatasetShadow**) malloc(sizeof(GDALDatasetShadow*) * arg2);
        int i;
        for (i = 0; i<arg2; i++) {
          jobject obj = (jobject)jenv->GetObjectArrayElement(jarg2, i);
          if (obj == NULL)
          {
            free (arg3 );
            SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null object in array");
            return 0;
          }
          const jclass klass = jenv->FindClass("org/gdal/gdal/Dataset");
          const jmethodID getCPtr = jenv->GetStaticMethodID(klass, "getCPtr", "(Lorg/gdal/gdal/Dataset;)J");
          arg3[i] = (GDALDatasetShadow*) jenv->CallStaticLongMethod(klass, getCPtr, obj);
        }
      }
    }
    else
    {
      arg2 = 0;
      arg3 = NULL;
    }
  }
  arg4 = *(GDALBuildVRTOptions **)&jarg4; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALBuildVRT_objects((char const *)arg1,arg2,arg3,arg4);
  *(GDALDatasetShadow **)&jresult = result; 
  {
    /* %typemap(argout) (int object_list_count, GDALDatasetShadow **poObjects) */
  }
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) (int object_list_count, GDALDatasetShadow **poObjects) */
    if (arg3) {
      free((void*) arg3);
    }
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_BuildVRT_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jobject jarg2, jlong jarg3, jobject jarg3_, jobject jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  GDALBuildVRTOptions *arg3 = (GDALBuildVRTOptions *) 0 ;
  GDALProgressFunc arg4 ;
  void *arg5 = (void *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  JavaProgressData sProgressInfo;
  sProgressInfo.jenv = jenv;
  sProgressInfo.pJavaCallback = NULL;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    /* %typemap(in) char **options */
    arg2 = NULL;
    if(jarg2 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg2, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg2);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg2 = CSLAddString(arg2,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  arg3 = *(GDALBuildVRTOptions **)&jarg3; 
  {
    if ( jarg4 != 0 ) {
      sProgressInfo.pJavaCallback = jarg4;
      arg4 = JavaProgressProxy;
      arg5 = &sProgressInfo;
    }
    else
    {
      arg4 = NULL;
      arg5 = NULL;
    }
  }
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALBuildVRT_names((char const *)arg1,arg2,arg3,arg4,arg5);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg2 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_BuildVRT_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jobject jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  GDALBuildVRTOptions *arg3 = (GDALBuildVRTOptions *) 0 ;
  GDALDatasetShadow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    /* %typemap(in) char **options */
    arg2 = NULL;
    if(jarg2 != 0) {
      const jclass vector = jenv->FindClass("java/util/Vector");
      const jclass enumeration = jenv->FindClass("java/util/Enumeration");
      const jclass stringClass = jenv->FindClass("java/lang/String");
      const jmethodID elements = jenv->GetMethodID(vector, "elements",
        "()Ljava/util/Enumeration;");
      const jmethodID hasMoreElements = jenv->GetMethodID(enumeration,
        "hasMoreElements", "()Z");
      const jmethodID getNextElement = jenv->GetMethodID(enumeration,
        "nextElement", "()Ljava/lang/Object;");
      if(vector == NULL || enumeration == NULL || elements == NULL ||
        hasMoreElements == NULL || getNextElement == NULL) {
        fprintf(stderr, "Could not load (options **) jni types.\n");
        return 0;
      }
      for (jobject keys = jenv->CallObjectMethod(jarg2, elements);
        jenv->CallBooleanMethod(keys, hasMoreElements) == JNI_TRUE;) {
        jstring value = (jstring)jenv->CallObjectMethod(keys, getNextElement);
        if (value == NULL || !jenv->IsInstanceOf(value, stringClass))
        {
          CSLDestroy(arg2);
          SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, "an element in the vector is not a string");
          return 0;
        }
        const char *valptr = jenv->GetStringUTFChars(value, 0);
        arg2 = CSLAddString(arg2,  valptr);
        jenv->ReleaseStringUTFChars(value, valptr);
      }
    }
  }
  arg3 = *(GDALBuildVRTOptions **)&jarg3; 
  {
    if (!arg1) {
      {
        SWIG_JavaException(jenv, SWIG_ValueError, "Received a NULL pointer."); return 0; 
      };
    }
  }
  result = (GDALDatasetShadow *)wrapper_GDALBuildVRT_names((char const *)arg1,arg2,arg3);
  *(GDALDatasetShadow **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  {
    /* %typemap(freearg) char **options */
    CSLDestroy( arg2 );
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_TermProgressCallback_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ProgressCallback **)&baseptr = *(TermProgressCallback **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Driver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(GDALMajorObjectShadow **)&baseptr = *(GDALDriverShadow **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Dataset_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(GDALMajorObjectShadow **)&baseptr = *(GDALDatasetShadow **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_gdal_gdal_gdalJNI_Band_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(GDALMajorObjectShadow **)&baseptr = *(GDALRasterBandShadow **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

